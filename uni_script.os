// UNI_SCRIPT - универсальный скрипт на языке 1С//	VERSION: 2016.08.26.1
// Версия
// TO-DO
//	1. Добавить определение V83.ComConnector где определять 83 по платформе(?)	
//  2. Там где используется COmConnector использовать 	ОсвободитьОбъект(Соединение);	ОсвободитьОбъект(COMОбъект);	ВыполнитьСборкуМусора();
//
// ПОДДЕРЖИВАЕМЫЕ КОМАНДЫ:
//		+ /DumpIB		Резервная копия с блокировкой сеансов
//			Параметры запуска:
//				- /F <путь> (тип базы - файловая)
//				- /S <адрес> (тип базы - серверная, <Имя компьютера, работающего сервером приложений>\<Ссылочное имя информационной базы, известное в рамках сервера 1С:Предприятия 8>)
//				- /N (логин администратора ИБ, если не задан, то без логина)
//				- /P (пароль администратора ИБ)
//				- /CN (логин администратора кластера серверов, если не задан, то не авторизоваться на кластере)
//				- /CP (пароль администратора кластера серверов)
//				- /UC (код блокировки, если не задано, то блокировка не ставится)
//				- /Format (формат имени файла бэкапа, если не задано, то будет использован формат "yyyyMMddHHmmss")
//				- /UCMsg (текст сообщения пользователям при блокировке работы ИБ)
//				- /LOG <имя файла> (не обязательный параметр, путь к файлу логов, записи добавляются в конец, в виде Дата, Тип сообщения([INFO ], [ERROR], [WARNG]), Сообщение)
//				- /UPath <путь> (Путь выгрузки ИБ)
//				- /UCount (количество копий, которые необходимо оставить)
//				- /Pref (префикс имя файла бэкапа)
// 	
//		+ /RestoreIB	Восстановление резервеной копии в ИБ
//				- /F <путь> (тип базы - файловая)
//				- /S <адрес> (тип базы - серверная, <Имя компьютера, работающего сервером приложений>\<Ссылочное имя информационной базы, известное в рамках сервера 1С:Предприятия 8>)
//				- /N (логин администратора ИБ, если не задан, то без логина)
//				- /P (пароль администратора ИБ)
//				- /CN (логин администратора кластера серверов, если не задан, то не авторизоваться на кластере)
//				- /CP (пароль администратора кластера серверов)
//				- /UC (код блокировки)
//				- /UCMsg (Текст сообщения пользователям при блокировке работы ИБ)
//				- /LOG <имя файла> (не обязательный параметр, путь к файлу логов, записи добавляются в конец, в виде Дата, Тип сообщения([INFO ], [ERROR], [WARNG]), Сообщение)
//				- /UPath <путь> (Путь к файлу dt)
//
//		+ /Lock			Блокировка сеансов пользователей
//			Параметры запуска:
//				- /F <путь> (тип базы - файловая)
//				- /S <адрес> (тип базы - серверная, <Имя компьютера, работающего сервером приложений>\<Ссылочное имя информационной базы, известное в рамках сервера 1С:Предприятия 8>)
//				- /N (логин админситратора ИБ, если не задан, то без логина)
//				- /P (пароль администратора ИБ)
//				- /UC (код блокировки, если не задано, то блокировка не ставится)
//				- /UCMsg (Текст сообщения пользователям при блокировке работы ИБ)
//				- /LOG
//				- /LockBegin (время начала блокировки сеансов)
//				- /LockEnd (время окончания блокировки сеансов)
//
//		+ /Unlock		Разблокировка сеансов пользователей
//			Параметры запуска:
//				- /F <путь> (тип базы - файловая)
//				- /S <адрес> (тип базы - серверная, <Имя компьютера, работающего сервером приложений>\<Ссылочное имя информационной базы, известное в рамках сервера 1С:Предприятия 8>)
//				- /N (логин админситратора ИБ, если не задан, то без логина)
//				- /P (пароль администратора ИБ)
//				- /LOG
//
//		+ /Terminate	Прерывание сеансов работы пользователей по условиями или без
//			Параметры запуска:
//				- /F <путь> (тип базы - файловая)
//				- /S <адрес> (тип базы - серверная, <Имя компьютера, работающего сервером приложений>\<Ссылочное имя информационной базы, известное в рамках сервера 1С:Предприятия 8>)
//				- /N (логин админситратора ИБ, если не задан, то без логина)
//				- /P (пароль администратора ИБ)
//				- /CN (логин администратора кластера серверов, если не задан, то не авторизоваться на кластере)
//				- /CP (пароль администратора кластера серверов)
//				- /UTime (время в секундах, для удаления устаревших сеансов)
//				- /LOG
//
//		+ /ClearOldFiles Удаление файлов по заданной маске с учетом последней даты изменения (устаревших)
//			Параметры запуска:
//				- /UPath <путь> (каталог с файлами)
//				- /UMask <маска> (маска имени файла для отбора файлов)
//				- /UCount <количество> (количество файлов, которые необходимо оставить)
//
//		+ /TestUpdate Тестирование установки обновления. Обновление устанавливается на
//			Параметры запуска:
//				- /VerPL (версия платформы, например, 8.3.8.1861)
//				- /NVer (номер версии обновления для тестирования, например 3.0.6.1)
//				- /NVerRab (номер рабочей версии, на которую будет устанавливаться обновление, например, 3.0.5.5)
//				- /UPath <путь> (каталог сборки, где будет произведено тестирование обновления)
//
//		- /CopyFTP Копирования файла на FTP (ПОКА НЕ ПОДДЕРЖИВАЕТСЯ, ВВИДУ ОТСУТСТВИЯ ПОДДЕРЖКИ FTP в OneScript, добавлено в виде заготовки)
//			Параметры запуска:
//				- /UPath <путь к файлу> (файл на локальной машине для копирования по FTP)
//				- /N (логин FTP)
//				- /P (пароль FTP)
//				- /UServer <имя> (имя или ip-адрес сервера FTP)
//				- /UPathFTP <путь> (каталог на FTP куда необходимо скопировать файлы)
//
//		- /BuildDistrib создание дистрибутива по шагам
//			1. Загружаются все изменения из хранилища
//			2. Запустить в пользовательском режиме и подтвердить легальность обновления (если необходимо)
//			3. Создание файла поставщика
//			4. Создание папок "Полный", "Обновление", "Дополнительные файлы"
//			5. Создание файлов 1cv8upd.htm, ReadMe.txt, UpdInfo.txt в папке "Дополнительные файлы"
//			4. Сбор дистрибутива, включающего в себя конфигурацию поставщика
//			Параметры запуска:
//				- /F <путь> (тип базы - файловая)
//				- /S <адрес> (тип базы - серверная, <Имя компьютера, работающего сервером приложений>\<Ссылочное имя информационной базы, известное в рамках сервера 1С:Предприятия 8>)
//				- /N (логин администратора ИБ, если не задан, то без логина)
//				- /P (пароль администратора ИБ)
//				- /ConfigurationRepositoryF <путь> (Путь к хранилищу конфигурации)
//				- /ConfigurationRepositoryN логин
//				- /ConfigurationRepositoryP пароль
//				- /Legal "Y" (делать проверку легальности)
//				- /UPath <путь> (корневой каталог с обновлениями, где будет создан дистрибутив)
//				- /NVer (номера версий обновления для которой делается обновление, например "3.0.6.1,3.0.6.2")
//				- /NeedVerPL (номер версии необходимой платформы (информативно 8.3.6))
//
//		- /SaveLastConfigUpdateText получает из конфигурации из макета ОписаниеИзмененийСистемы текст последнего обновления и сохраняет его в файл
//				- /F <путь> (тип базы - файловая)
//				- /S <адрес> (тип базы - серверная, <Имя компьютера, работающего сервером приложений>\<Ссылочное имя информационной базы, известное в рамках сервера 1С:Предприятия 8>)
//				- /N (логин администратора ИБ, если не задан, то без логина)
//				- /P (пароль администратора ИБ)
//				- /UPath куда сохранить


#Использовать v8runner
#Использовать cmdline

Перем юсКонфигуратор;
Перем юсПарсер;
Перем юсПараметры;

Процедура ЗадатьНачальныеНастройки()	
	
	юсКонфигуратор 				= Новый УправлениеКонфигуратором();
	юсПарсер 					= Новый ПарсерАргументовКоманднойСтроки();
	юсПараметры					= ЗаполнитьПараметры();		
	
	Если АргументыКоманднойСтроки.Количество() = 0 Тогда		
		юсСообщить("ERROR", "Не заданы аргументы командной строки!");		
		ЗавершитьРаботу(1);
	КонецЕсли;	
	
КонецПроцедуры

Функция ЗаполнитьПараметры()
	
	юсПарсер.ДобавитьПараметр("ИмяКоманды"); 							// Имя команды 
	юсПарсер.ДобавитьИменованныйПараметр("/F");							// База файловая
	юсПарсер.ДобавитьИменованныйПараметр("/S");							// База серверная
	юсПарсер.ДобавитьИменованныйПараметр("/N");							// Логин админиcтратора ИБ
	юсПарсер.ДобавитьИменованныйПараметр("/P"); 						// Пароль администратора ИБ
	юсПарсер.ДобавитьИменованныйПараметр("/CN"); 						// Логин администратора кластера серверов
	юсПарсер.ДобавитьИменованныйПараметр("/CP"); 						// Пароль администратора кластера серверов
	юсПарсер.ДобавитьИменованныйПараметр("/UC");						// Код блокировки
	юсПарсер.ДобавитьИменованныйПараметр("/Format");					// Формат имение бэкапа
	юсПарсер.ДобавитьИменованныйПараметр("/UCMsg");						// Текст сообщения пользователям
	юсПарсер.ДобавитьИменованныйПараметр("/LOG");						// Сохранять лог - файл
	юсПарсер.ДобавитьИменованныйПараметр("/UTime");						// Время в секундах
	юсПарсер.ДобавитьИменованныйПараметр("/UPath");						// Путь сохранения
	юсПарсер.ДобавитьИменованныйПараметр("/LockBegin");					// Время начала блокировки сеансов
	юсПарсер.ДобавитьИменованныйПараметр("/LockEnd");					// Время окончания блокировки сеансов
	юсПарсер.ДобавитьИменованныйПараметр("/UCount");					// Количество копий, которые необходимо оставить после бэкапа
	юсПарсер.ДобавитьИменованныйПараметр("/Pref");						// Префикс имени файла бэкапа
	юсПарсер.ДобавитьИменованныйПараметр("/UMask");						// Маска имени файла	
	юсПарсер.ДобавитьИменованныйПараметр("/NVer");						// Номер версии обновления для тестирования
	юсПарсер.ДобавитьИменованныйПараметр("/NVerRab");					// Номер рабочей версии, на которую будет устанавливаться обновление 
	юсПарсер.ДобавитьИменованныйПараметр("/VerPL");						// Версия платформы
	юсПарсер.ДобавитьИменованныйПараметр("/UPathFTP");					// каталог на FTP
	юсПарсер.ДобавитьИменованныйПараметр("/UServer");					// сервер FTP
	юсПарсер.ДобавитьИменованныйПараметр("/ConfigurationRepositoryF");	// 
	юсПарсер.ДобавитьИменованныйПараметр("/ConfigurationRepositoryN");	// 
	юсПарсер.ДобавитьИменованныйПараметр("/ConfigurationRepositoryP");	// 
	юсПарсер.ДобавитьИменованныйПараметр("/Legal");						// 
	юсПарсер.ДобавитьИменованныйПараметр("/NeedVerPL");					// 
	
	
	Возврат юсПарсер.Разобрать(АргументыКоманднойСтроки);	 
	
КонецФункции

Процедура юсВыполнитьКоманду()
	
	ИмяКоманды 			= юсПараметры["ИмяКоманды"];
	ПутьКБазеСерверной 	= юсПараметры["/S"];
	ПутьКБазеФайловой 	= юсПараметры["/F"];
	
	ВРегИмяКоманды		= ВРег(ИмяКоманды);
	
	Если ВРегИмяКоманды = "/RESTOREIB" Тогда		
		Если ЗначениеЗаполнено(ПутьКБазеСерверной) Тогда
			УстановитьБлокировкуСеансов();
			ПрерватьСеансыПользователей();
			ЗагрузитьИБИзФайла();
			СнятьБлокировкуСеансов();
		Иначе
			ЗагрузитьИБИзФайла();		
		КонецЕсли;		
	КонецЕсли;
	
	Если ВРегИмяКоманды = "/DUMPIB" Тогда
		Если ЗначениеЗаполнено(ПутьКБазеСерверной) Тогда
			УстановитьБлокировкуСеансов();
			ПрерватьСеансыПользователей();
			ВыгрузитьИБВФайл();			
			СнятьБлокировкуСеансов();
			юсУдалитьФайлы();
		Иначе
			ВыгрузитьИБВФайл();
		КонецЕсли;			
	КонецЕсли;
	
	Если ВРегИмяКоманды = "/LOCK" Тогда
		УстановитьБлокировкуСеансов();		
	КонецЕсли;
	
	Если ВРегИмяКоманды = "/UNLOCK" Тогда
		СнятьБлокировкуСеансов();		
	КонецЕсли;
	
	Если ВРегИмяКоманды = "/TERMINATE" Тогда
		ПрерватьСеансыПользователей();		
	КонецЕсли;
	
	Если ВРегИмяКоманды = "/CLEAROLDFILES" Тогда
		юсУдалитьФайлы();		
	КонецЕсли;
	
	Если ВРегИмяКоманды = "/TESTUPDATE" Тогда 
		СоздатьВременныеИБ();	
	КонецЕсли;

	Если ВРегИмяКоманды = "/COPYFTP" Тогда 
		КопироватьНаFTP();
	КонецЕсли;

	Если ВРегИмяКоманды = "/BUILDDISTRIB" Тогда 
		СоздатьДистрибутивИзХранилища();
	КонецЕсли;

	Если ВРегИмяКоманды = "/SAVELASTCONFIGUPDATETEXT" Тогда 
		ПолучитьОписаниеОбновленияИзМакета();
	КонецЕсли;

КонецПроцедуры


Процедура ИнициализацияСистемныхПеременных()

	СтрокаПодключения 		= "";
	ПутьКБазе				= "";
	ИмяАдминистратораИБ 	= ?(юсПараметры["/N"] <> Неопределено, юсПараметры["/N"], "");
	ПарольАдминистратораИБ 	= ?(юсПараметры["/P"] <> Неопределено, юсПараметры["/P"], "");
	КодРазрешения			= ?(юсПараметры["/UC"] <> Неопределено, юсПараметры["/UC"], "");	
	
	Если юсПараметры["/S"] <> Неопределено Тогда
		мПутьКБазе				= юсПараметры["/S"];
		ИмяСервера 				= Лев(мПутьКБазе, Найти(мПутьКБазе,"\") - 1);
		ИмяБазы					= Прав(мПутьКБазе, СтрДлина(мПутьКБазе) - Найти(мПутьКБазе,"\"));
		ПутьКБазе				= "/S""" + мПутьКБазе + """";				
		СтрокаПодключения		= "Srvr=""" + ИмяСервера + """;Ref=""" + ИмяБазы + """;";
		юсСообщить("INFO ", "Начало работы с базой """ + ИмяБазы + """");
	Иначе
		ПутьКБазе			= "/F""" + юсПараметры["/F"] + """";
		СтрокаПодключения	= "File=""" + юсПараметры["/F"] + """;";
		Если ПутьКБазе<> "/F""""" Тогда 
			юсСообщить("INFO ", "Начало работы с базой """ + юсПараметры["/F"] + """");
		КонецЕсли;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяАдминистратораИБ) Тогда
		СтрокаПодключения = СтрокаПодключения + "Usr=""" + ИмяАдминистратораИБ + """;";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПарольАдминистратораИБ) Тогда
		СтрокаПодключения = СтрокаПодключения + "Pwd=""" + ПарольАдминистратораИБ + """;";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПутьКБазе) Тогда
		юсКонфигуратор.УстановитьКонтекст(ПутьКБазе, ИмяАдминистратораИБ, ПарольАдминистратораИБ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КодРазрешения) Тогда 
		СтрокаПодключения = СтрокаПодключения + "UC=""" + КодРазрешения + """;";
		юсКонфигуратор.УстановитьКлючРазрешенияЗапуска(КодРазрешения);
	КонецЕсли;
	
	Попытка
		СтрокаПодключения = Сред(СтрокаПодключения,1,СтрДлина(СтрокаПодключения) - 1);	
	Исключение
	КонецПопытки;
	
	юсПараметры.Вставить("ПутьКБазе", 			ПутьКБазе);
	юсПараметры.Вставить("СтрокаПодключения", 	СтрокаПодключения);
	юсПараметры.Вставить("ИмяСервера", 			ИмяСервера);
	юсПараметры.Вставить("ИмяБазы", 			ИмяБазы);
	
КонецПроцедуры

Функция ДополнитьСтрокуСлешем(Знач Стр)
	
	Если ПустаяСтрока(Стр) Тогда
		Возврат "\";
	КонецЕсли;
	
	Возврат Стр + ?(Прав(Стр, 1) = "\", "", "\");
	
КонецФункции

Процедура УстановитьБлокировкуСеансов()
	
	Соединение 			= Неопределено;
	СтрокаПодключения 	= юсПараметры["СтрокаПодключения"];
	ВремяНачала			= юсПараметры["/LockBegin"];
	ВремяОкончания		= юсПараметры["/LockEnd"];
	КодРазрешения		= юсПараметры["/UC"];
	Сообщение			= юсПараметры["/UCMsg"];
	V8 					= Новый COMObject("V83.COMConnector");
	
	Попытка
		Соединение 				= V8.Connect(СтрокаПодключения);
		Блокировка 				= Соединение.NewObject("БлокировкаСеансов");
		Блокировка.Установлена	= Истина;

		Если ЗначениеЗаполнено(ВремяНачала) Тогда
			Блокировка.Начало 	= ВремяНачала;
		Иначе
			Блокировка.Начало 	= ТекущаяДата();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВремяОкончания) Тогда
			Блокировка.Конец 	= ВремяОкончания;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(КодРазрешения) Тогда 
			Блокировка.КодРазрешения= КодРазрешения;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Сообщение) Тогда	
			Блокировка.Сообщение= Сообщение;
		КонецЕсли;	
		
		Соединение.УстановитьБлокировкуСеансов(Блокировка);
		
		юсСообщить("INFO ", "Блокировка сеансов установлена");
	Исключение
		юсСообщить("ERROR", "При установке блокировки возникла ошибка: " + ОписаниеОшибки());
	КонецПопытки;
	
	ОсвободитьОбъект(Соединение);
	ОсвободитьОбъект(V8);
	ВыполнитьСборкуМусора();
	
КонецПроцедуры

Процедура ПрерватьСеансыПользователей()
	
	ИмяСервера					= юсПараметры["ИмяСервера"];	
	ИмяБазы						= юсПараметры["ИмяБазы"];
	ИмяАдминистратораИБ			= юсПараметры["/N"];
	ПарольАдминистратораИБ 		= юсПараметры["/P"];	
	ИмяАдминистратораКластера 	= юсПараметры["/CN"];
	ПарольАдминистратораКластера= юсПараметры["/CP"];
	ВремяПростоя				= юсПараметры["/UTime"];
	Соединение 					= Неопределено;
	V8 							= Новый COMObject("V83.COMConnector");	
	Попытка		
		Агент 	 = V8.ConnectAgent(ИмяСервера);
		Кластеры = Агент.GetClusters();
		Для Каждого Кластер из Кластеры Цикл
			
			Если ЗначениеЗаполнено(ИмяАдминистратораКластера) И ЗначениеЗаполнено(ПарольАдминистратораКластера) Тогда
				Агент.Authenticate(Кластер, ИмяАдминистратораКластера, ИмяАдминистратораКластера);
			ИначеЕсли ЗначениеЗаполнено(ИмяАдминистратораКластера) Тогда
				Агент.Authenticate(Кластер,ИмяАдминистратораКластера,"");
			Иначе 
				Агент.Authenticate(Кластер,"","");
			КонецЕсли;
			
			Процессы = Агент.GetWorkingProcesses(Кластер);
			
			Для Каждого Процесс из Процессы Цикл
				Порт 	= Процесс.MainPort;
				// теперь есть адрес и порт для подключения к рабочему процессу
				РабПроц = V8.ConnectWorkingProcess(ИмяСервера + ":" + СтрЗаменить(Порт, Символы.НПП, ""));
				РабПроц.AddAuthentication(ИмяАдминистратораИБ, ПарольАдминистратораИБ);
				ИнформационнаяБаза = "";
				Базы 	= Агент.GetInfoBases(Кластер);				
				Для Каждого База из Базы Цикл
					Если ВРег(База.Name) = ВРег(ИмяБазы) Тогда
						ИнформационнаяБаза = База;
						Прервать;
					КонецЕсли;
				КонецЦикла;				
				
				Если ИнформационнаяБаза = "" Тогда
					юсСообщить("ERROR", "ИБ не найдена!");
					ЗавершитьРаботу(1);
				КонецЕсли;				
				
				Сеансы = Агент.GetInfoBaseSessions(Кластер, ИнформационнаяБаза);
				Для Каждого Сеанс из Сеансы Цикл
					//Если нРег(Сеанс.AppID) = "backgroundjob" ИЛИ нРег(Сеанс.AppID) = "comconsole" ИЛИ нРег(Сеанс.AppID) = "designer" Тогда
					// если это сеансы конфигуратора или фонового задания, то не отключаем
					
					Если нРег(Сеанс.AppID) = "comconsole" Тогда					
						Продолжить;
					КонецЕсли;
					
					//Если Сеанс.UserName = ИмяПользователя() Тогда
						// это текущий пользователь
						//Продолжить;
					//КонецЕсли;
					
					Если ЗначениеЗаполнено(ВремяПростоя) Тогда						
						КонтрольнаяДата = ТекущаяДата() - Число(ВремяПростоя);
						Если Сеанс.LastActiveAt < КонтрольнаяДата Тогда
							Агент.TerminateSession(Кластер, Сеанс);
							юсСообщить("INFO ","Сеанс " + Сеанс.UserName +" " + Сеанс.AppID +" отключен");		
						КонецЕсли;
					Иначе
						Агент.TerminateSession(Кластер, Сеанс);
						юсСообщить("INFO ", "Сеанс " + Сеанс.UserName +" " + Сеанс.AppID +" отключен");		
					КонецЕсли;					
				КонецЦикла;
				
				//СоединенияБазы = Агент.GetInfoBaseConnections(Кластер, ИнформационнаяБаза);
				Шаблон 	 		= РабПроц.CreateInfoBaseInfo();
				Шаблон.Name 	= ИмяБазы;
				СоединенияБазы 	= РабПроц.GetInfoBaseConnections(Шаблон); 
								
				// Разорвать соединения клиентских приложений.
				Если Не ЗначениеЗаполнено(ВремяПростоя) Тогда
					Для Каждого мСоединение Из СоединенияБазы Цикл
						//Если нРег(Соединение.Application) = "backgroundjob" ИЛИ нРег(Соединение.Application) = "designer" Тогда
						// если это соединение конфигуратора или фонового задания, то не отключаем
						Если нРег(мСоединение.AppID) = "designer" Тогда 
							Продолжить;
						КонецЕсли;
						//Если мСоединение.UserName = ИмяПользователя() Тогда
						//	// это текущий пользователь
						//	Продолжить;
						//КонецЕсли;
						Попытка
							РабПроц.Disconnect(мСоединение);
							юсСообщить("INFO ", "Соединение " + мСоединение.UserName + " " +мСоединение.AppID+ " отключено");
						Исключение
						юсСообщить("ERROR", "Ошибка при отключении соединения: " + ОписаниеОшибки());
						КонецПопытки;					
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;		
	Исключение
		юсСообщить("ERROR", "Не удалось установить соединение!" + ОписаниеОшибки());		
	КонецПопытки;
	
	ОсвободитьОбъект(Соединение);
	ОсвободитьОбъект(V8);
	ВыполнитьСборкуМусора();
	юсСообщить("INFO ", "Завершение сеансов выполнено");
	
КонецПроцедуры

Процедура ЗагрузитьИБИзФайла()		
	
	ПутьСохранения 		= юсПараметры["/UPath"];	
	ПараметрыЗапуска 	= юсКонфигуратор.ПолучитьПараметрыЗапуска();	
	ПараметрыЗапуска.Добавить("/RestoreIB " + ПутьСохранения);	
	юсСообщить("INFO ", "Начало загрузки...");
	Попытка	
	    юсКонфигуратор.ВыполнитьКоманду(ПараметрыЗапуска);
		юсСообщить("INFO ", "Загрузка завершена");
	Исключение												   
		юсСообщить("ERROR", "Произошла ошибка при выгрузке " + юсКонфигуратор.ВыводКоманды());
	КонецПопытки
	
КонецПроцедуры

Процедура ВыгрузитьИБВФайл()		
	
	ПутьСохранения 				= юсПараметры["/UPath"];	
	ФорматИмениРезервнойКопии 	= ?(юсПараметры["/Format"] <> Неопределено, юсПараметры["/Format"], "yyyyMMddHHmmss");
	ИмяБазы						= юсПараметры["ИмяБазы"];
	Префикс						= юсПараметры["/Pref"];

	Если ЗначениеЗаполнено(Префикс) Тогда
		ПолныйПутьСохранения 	= ДополнитьСтрокуСлешем(ПутьСохранения) + Префикс + Формат(ТекущаяДата(), "ДФ=" + ФорматИмениРезервнойКопии) + ".dt";
	Иначе
		ПолныйПутьСохранения 	= ДополнитьСтрокуСлешем(ПутьСохранения) + ИмяБазы + Формат(ТекущаяДата(), "ДФ=" + ФорматИмениРезервнойКопии) + ".dt";
	КонецЕсли;
			
	// Делаем копию
	ПараметрыЗапуска 			= юсКонфигуратор.ПолучитьПараметрыЗапуска();
	ПараметрыЗапуска.Добавить("/DumpIB""" + ПолныйПутьСохранения + """"); 	
	юсСообщить("INFO ", "Начало выгрузки");
	Попытка
	    юсКонфигуратор.ВыполнитьКоманду(ПараметрыЗапуска);
		юсСообщить("INFO ", "Выгрузка завершена");
	Исключение												   
		юсСообщить("ERROR", "Произошла ошибка при выгрузке " + юсКонфигуратор.ВыводКоманды());		
	КонецПопытки;
		
КонецПроцедуры

Процедура СнятьБлокировкуСеансов()
	
	Соединение 			= Неопределено;
	СтрокаПодключения 	= юсПараметры["СтрокаПодключения"];
	V8 					= Новый COMObject("V83.COMConnector");	
	Попытка
		Соединение 	= V8.Connect(СтрокаПодключения);	
		ТекущийРежим= Соединение.ПолучитьБлокировкуСеансов();	
		Если ТекущийРежим.Установлена Тогда
			НовыйРежим 				= Соединение.NewObject("БлокировкаСеансов");
			НовыйРежим.Установлена 	= Ложь;
			Соединение.УстановитьБлокировкуСеансов(НовыйРежим);
		КонецЕсли;
		юсСообщить("INFO ", "Блокировка сеансов отключена");
	Исключение
		юсСообщить("ERROR", "Не удалось установить соединение!");		
	КонецПопытки;					
	ОсвободитьОбъект(Соединение);
	ОсвободитьОбъект(V8);
	ВыполнитьСборкуМусора();
	
КонецПроцедуры

Процедура юсСообщить(ТипСообщения, ТекстСообщения)
	
	ИмяЛогФайла 	= юсПараметры["/LOG"];
	ТекстСообщения 	= "[" + ТекущаяДата() + "] " + "[" + ТипСообщения + "] " + ТекстСообщения;
	
	Если ЗначениеЗаполнено(ИмяЛогФайла) Тогда
		ВЛогФайл(ИмяЛогФайла, ТекстСообщения);
	Иначе
		Сообщить(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры	

Функция ВЛогфайл(ИмяФайла, ТекстСообщения)
	
	Если Найти(ИмяФайла, "\") = 0 Тогда
        ИмяФайла = КаталогПрограммы() + ИмяФайла;
        Сообщить("Лог:" + ИмяФайла);
    КонецЕсли;
	
	ТекстовыйДокумент 	= Новый ТекстовыйДокумент;
    Кодировка 			= "UTF-8" ;
    юсРазделительСтрок 	= Символы.ВК + Символы.ПС;
	
	МассивФайлов 		= НайтиФайлы(ИмяФайла);
	// если файл еще не создан добавим строку
    Если МассивФайлов.Количество() = 0 Тогда        
        ТекстовыйДокумент.ДобавитьСтроку(ТекстСообщения);    
    Иначе 
        // если файл с таким именем уже создан прочитаем его
        ТекстовыйДокумент.Прочитать(ИмяФайла, Кодировка);
		ТекстовыйДокумент.ДобавитьСтроку(ТекстСообщения);
    КонецЕсли;	
    // закрываем ТекстовыйДокумент файл
    ТекстовыйДокумент.Записать(ИмяФайла, Кодировка);
	
КонецФункции

Процедура юсУдалитьФайлы()
	
	ПутьСохранения 				= юсПараметры["/UPath"];	
	Префикс						= юсПараметры["/Pref"];
	КоличествоХранимыхАрхивов	= Число(юсПараметры["/UCount"]);
	МаскаФайла					= юсПараметры["/UMask"];
	
	Если КоличествоХранимыхАрхивов <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(МаскаФайла) Тогда
			МассивФайлов = НайтиФайлы(ПутьСохранения, МаскаФайла);
		ИначеЕсли ЗначениеЗаполнено(Префикс) Тогда
			МассивФайлов = НайтиФайлы(ПутьСохранения, Префикс + "*.dt");
		Иначе
			МассивФайлов = НайтиФайлы(ПутьСохранения, "*.dt");
		КонецЕсли;	
		
		Если МассивФайлов.Количество() > КоличествоХранимыхАрхивов Тогда
			ТЗ = Новый ТаблицаЗначений;
			ТЗ.Колонки.Добавить("Файл");
			ТЗ.Колонки.Добавить("ПоследняяДатаИзменения");
			Для Каждого Файл Из МассивФайлов Цикл
				СтрокаТЗ 						= ТЗ.Добавить();
				СтрокаТЗ.Файл 					= Файл.ПолноеИмя;
				СтрокаТЗ.ПоследняяДатаИзменения = Файл.ПолучитьВремяИзменения();				
			КонецЦикла;
			ТЗ.Сортировать("ПоследняяДатаИзменения Убыв");
			Пока ТЗ.Количество() > КоличествоХранимыхАрхивов Цикл
				Попытка
					мФайл	= ТЗ[ТЗ.Количество() - 1].Файл;
					УдалитьФайлы(мФайл);
					ТЗ.Удалить(ТЗ.Количество() - 1);
				Исключение
					юсСообщить("ERROR", "Произошла ошибка при удалении файла " + мФайл + " " + ОписаниеОшибки());
					Возврат;
				КонецПопытки;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьВременныеИБ()
	
	Если ЗначениеЗаполнено(юсПараметры["/VerPL"]) Тогда
		мКонфигуратор 				= Новый УправлениеКонфигуратором();
		ПутьКПлатформе				= мКонфигуратор.ПолучитьПутьКВерсииПлатформы(юсПараметры["/VerPL"]);
	Иначе
		юсСообщить("ERROR", "Не заполнен параметр ""/VerPL"" - версия платформы!");
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(юсПараметры["/NVerRab"]) Тогда
		НомерВерсииДляРаботы		= юсПараметры["/NVerRab"];
	Иначе
		юсСообщить("INFO ", "Не заполнен параметр ""/NVerRab"" - номер версии для обновления, файл dt будет взят из каталога сборки!");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(юсПараметры["/NVer"]) Тогда
		НомерВерсииДляТестирования	= юсПараметры["/NVer"];
	Иначе
		юсСообщить("ERROR", "Не заполнен параметр ""/NVer"" - версия для тестирования!");
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(юсПараметры["/UPath"]) Тогда
		мКаталогСборки = юсПараметры["/UPath"];		
	Иначе
		юсСообщить("ERROR", "Не заполнен параметр ""/UPath"" - каталог сборки!");
		Возврат;
	КонецЕсли;
	
	СтрокаПодключения		= юсПараметры["СтрокаПодключения"];
	ПутьКБазе				= юсПараметры["ПутьКБазе"];
	
	//1я часть тест cfu
	//ищем файл dt рабочей версии
	Если ЗначениеЗаполнено(НомерВерсииДляРаботы) Тогда
		МассивФайлов = НайтиФайлы(Строка(ДополнитьСтрокуСлешем(мКаталогСборки) + Строка(НомерВерсииДляРаботы)), "*.dt", Истина);
	Иначе
		МассивФайлов = НайтиФайлы(мКаталогСборки, "*.dt", Ложь);
	КонецЕсли;
	
	Если МассивФайлов.Количество()>0 Тогда		
		//определяем имя иб для списка баз
		Если ЗначениеЗаполнено(НомерВерсииДляТестирования) Тогда
			ИмяИБВСписке = "Отладка_v_" + Строка(НомерВерсииДляТестирования) + "_обновление_cfu";		
		КонецЕсли;
		
		//каталог для создания временной иб для загрузки из dt
		Если ЗначениеЗаполнено(НомерВерсииДляТестирования) Тогда 
			КаталогБазы = ДополнитьСтрокуСлешем(мКаталогСборки) + "TempIB\" + НомерВерсииДляТестирования + "_load_cfu";
			Файл = Новый Файл(КаталогБазы);
			Если Не Файл.Существует() Тогда
				СоздатьКаталог(КаталогБазы);
				юсСообщить("INFO ", "Каталог """ + КаталогБазы + """" + " создан.");
			ИначеЕсли Файл.ЭтоКаталог() Тогда
				УдалитьФайлы(КаталогБазы, "*.*");
				юсСообщить("INFO ", "Каталог с файлами """ + КаталогБазы + """" + " очищен.");		
			КонецЕсли;	
			СтрокаПодключения = "File=" + КаталогБазы + ";";
		КонецЕсли;	
		
		//создание пустой базы
		СтрокаЗапуска = " createinfobase " + СтрокаПодключения + " /AddInList " + ИмяИБВСписке;		
		юсСообщить("INFO ", "Начало работы с базой """ + КаталогБазы + """");	
		ЗапуститьПриложение("""" + ПутьКПлатформе+ """" + СтрокаЗапуска, , Истина);		
		юсСообщить("INFO ", "Временная база """ + КаталогБазы + """" + " создана.");
		
		//загрузка dt файла
		мКонфигуратор 	= Новый УправлениеКонфигуратором();
		ПутьКБазе 		= "/F""" + КаталогБазы + """";					
		мКонфигуратор.УстановитьКонтекст(ПутьКБазе,"","");		
		ПараметрыЗапуска= мКонфигуратор.ПолучитьПараметрыЗапуска();	
		ПараметрыЗапуска.Добавить("/RestoreIB " + МассивФайлов[0].ПолноеИмя);			
		Попытка	
			мКонфигуратор.ВыполнитьКоманду(ПараметрыЗапуска);
			юсСообщить("INFO ", "Загрузка завершена");
		Исключение												   
			юсСообщить("ERROR", "Произошла ошибка при зарузке: " + мКонфигуратор.ВыводКоманды());
		КонецПопытки;
		
		//поиск cfu
		МассивФайловcfu = НайтиФайлы(Строка(ДополнитьСтрокуСлешем(мКаталогСборки) + Строка(НомерВерсииДляТестирования)),"*.cfu",Истина);
		Если МассивФайловcfu.Количество()>0 Тогда
			Файлcfu = МассивФайловcfu[0];
			ФайлЛога= ДополнитьСтрокуСлешем(мКаталогСборки) + НомерВерсииДляТестирования + "_update_cfu.log";
			СтрокаЗапуска = " CONFIG /F""" + КаталогБазы + """ /N""Администратор"" /UpdateCfg " + """" + Файлcfu.ПолноеИмя + """" + " /UpdateDBCfg /OUT """ + ФайлЛога + """ -NoTruncate";			
			юсСообщить("INFO ", "Запущено обновление ИБ """ + КаталогБазы + """");
			КодВозврата = "";		
			ЗапуститьПриложение("""" + ПутьКПлатформе+ """" + СтрокаЗапуска,,Истина,КодВозврата);		
			юсСообщить("INFO ", "Обновление ИБ """ + КаталогБазы + """" + " завершено.");
			Если КодВозврата = 0 Тогда
				юсСообщить("INFO ", "Обновление ИБ """ + КаталогБазы + """" + " завершено.");
			Иначе
				юсСообщить("ERROR", "Обновление ИБ """ + КаталогБазы + """" + " завершено c ошибками, см. " + ФайлЛога);
				Возврат;
			КонецЕсли;		
		КонецЕсли;
		
		//принятие изменений
		юсСообщить("INFO ", "Для ИБ""" + КаталогБазы + """" + " запущено принятие обновления.");
		ИмяCOMСоединителя = "V83.COMConnector";
		
		Попытка
			COMОбъект = Новый COMОбъект(ИмяCOMСоединителя);
		Исключение
			юсСообщить("ERROR", "Не удалось подключиться через V83.COMConnector по причине: " + ОписаниеОшибки());
			Возврат;
		КонецПопытки;
		
		СтрокаСоединения = "File = """ + КаталогБазы + """; Usr = ""Администратор""";
		
		Попытка
        Соединение = COMОбъект.Connect(СтрокаСоединения);
		Исключение
			юсСообщить("ERROR", "Не удалось подключиться через V83.COMConnector по причине: " + ОписаниеОшибки());
			Возврат;
		КонецПопытки;
		
		Попытка
			Соединение.ОбновлениеИнформационнойБазы.ВыполнитьОбновлениеИнформационнойБазы(Ложь);
			юсСообщить("INFO ", "Принятие обновления для ИБ """ + КаталогБазы + """" + " завершено.");
		Исключение
			юсСообщить("ERROR", "Не удалось принять обновление по причине: " + ОписаниеОшибки());
		КонецПопытки;
		
		ОсвободитьОбъект(Соединение);
		ОсвободитьОбъект(COMОбъект);
		ВыполнитьСборкуМусора();
	Иначе
		юсСообщить("ERROR", "Файл выгрузки dt не найден. Создание временной базы отменено.");
	КонецЕсли;
	
	//2я часть тест шаблона 
	//поиск cf
	МассивФайловcf = НайтиФайлы(Строка(ДополнитьСтрокуСлешем(мКаталогСборки) + Строка(НомерВерсииДляТестирования)),"*.cf",Истина);	
	Если МассивФайловcf.Количество()>0 Тогда
		//определяем имя иб для списка баз
		Если ЗначениеЗаполнено(НомерВерсииДляТестирования) Тогда
			ИмяИБВСписке = "Отладка_v_" + Строка(НомерВерсииДляТестирования) + "_разворачивание_cf";		
		КонецЕсли;
		
		//каталог для создания временной иб для загрузки из dt
		Если ЗначениеЗаполнено(НомерВерсииДляТестирования) Тогда 
			КаталогБазы = ДополнитьСтрокуСлешем(мКаталогСборки) + "TempIB\" + НомерВерсииДляТестирования + "_load_cf";
			Файл = Новый Файл(КаталогБазы);
			Если Не Файл.Существует() Тогда
				СоздатьКаталог(КаталогБазы);
				юсСообщить("INFO ", "Каталог """ + КаталогБазы + """" + " создан.");
			ИначеЕсли Файл.ЭтоКаталог() Тогда
				УдалитьФайлы(КаталогБазы, "*.*");
				юсСообщить("INFO ", "Каталог с файлами """ + КаталогБазы + """" + " очищен.");		
			КонецЕсли;	
			СтрокаПодключения = "File=" + КаталогБазы + ";";
		КонецЕсли;
		
		//создание базы
		СтрокаЗапуска = " createinfobase " + СтрокаПодключения + "/UseTemplate """ + МассивФайловcf[0].ПолноеИмя + """" + " /AddInList " + ИмяИБВСписке;		
		юсСообщить("INFO ", "Начало работы с базой """ + КаталогБазы + """");	
		ЗапуститьПриложение("""" + ПутьКПлатформе+ """" + СтрокаЗапуска, , Истина);		
		юсСообщить("INFO ", "Временная база """ + КаталогБазы + """" + " создана.");
		
		//принятие изменений
		юсСообщить("INFO ", "Для ИБ""" + КаталогБазы + """" + " запущено принятие обновления.");
		ИмяCOMСоединителя = "V83.COMConnector";
		
		Попытка
			COMОбъект = Новый COMОбъект(ИмяCOMСоединителя);
		Исключение
			юсСообщить("ERROR", "Не удалось подключиться через V83.COMConnector по причине: " + ОписаниеОшибки());
			Возврат;
		КонецПопытки;
		
		СтрокаСоединения = "File = """ + КаталогБазы + """;";
		
		Попытка
        Соединение = COMОбъект.Connect(СтрокаСоединения);
		Исключение
			юсСообщить("ERROR", "Не удалось подключиться через V83.COMConnector по причине: " + ОписаниеОшибки());
			Возврат;
		КонецПопытки;
		
		Попытка
			Соединение.ОбновлениеИнформационнойБазы.ВыполнитьОбновлениеИнформационнойБазы(Ложь);
			Соединение.УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПервыйЗапуск();
		Исключение
			юсСообщить("ERROR", "Не удалось принять обновление по причине: " + ОписаниеОшибки());
		КонецПопытки;
		
		ОсвободитьОбъект(Соединение);
		ОсвободитьОбъект(COMОбъект);
		ВыполнитьСборкуМусора();
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает внешнее соединение с информационной базой по переданным параметрам подключения и возвращает указатель
// на это соединение.
// 
// Параметры:
//  ПараметрыПодключения - Структура - параметры для установки внешнего соединения с информационной базой.
//
//    * ВерсияПлатформы                              - Строка - Версия платформы: 82; 83;
//    * ВариантРаботыИнформационнойБазы             - Число  - Вариант работы информационной базы: 0 - файловый; 1 -
//                                                             клиент-серверный;
//    * КаталогИнформационнойБазы                   - Строка - Каталог информационной базы для файлового режима работы;
//    * ИмяСервера1СПредприятия                     - Строка - Имя сервера1С:Предприятия;
//    * ИмяИнформационнойБазыНаСервере1СПредприятия - Строка - Имя информационной базы на сервере1С:Предприятия;
//    * АутентификацияОперационнойСистемы           - Булево - Признак аутентификации операционной системы при создании
//                                                             внешнего подключения к информационной базе;
//    * ИмяПользователя                             - Строка - Имя пользователя информационной базы;
//    * ПарольПользователя                          - Строка - Пароль пользователя информационной базы.
// 
// Возвращаемое значение:
//  COMОбъект, Неопределено - указатель на COM-объект соединения или Неопределено в случае ошибки;
//
Функция УстановитьВнешнееСоединениеСБазой(знач ПараметрыПодключения) 
    
    ИмяCOMСоединителя = "V" + ПараметрыПодключения.ВерсияПлатформы + ".COMConnector";
    Попытка
        COMОбъект = Новый COMОбъект(ИмяCOMСоединителя);
    Исключение
        юсСообщить("ERROR", "Не удалось создать Com-объект по причине: " + ОписаниеОшибки());
        Возврат Неопределено;
    КонецПопытки; 
    
    ФайловыйВариантРаботы = ПараметрыПодключения.ВариантРаботыИнформационнойБазы = 0;
    
    // Проверка корректности указания параметров.
    ОшибкаПроверкиЗаполнения = Ложь;
    Если ФайловыйВариантРаботы Тогда
        Если ПустаяСтрока(ПараметрыПодключения.КаталогИнформационнойБазы) Тогда
            ТекстСообщения = "Не задано месторасположение каталога информационной базы.";
            ОшибкаПроверкиЗаполнения = Истина;
        КонецЕсли;
    Иначе
        Если ПустаяСтрока(ПараметрыПодключения.ИмяСервера1СПредприятия) Или ПустаяСтрока(ПараметрыПодключения.ИмяИнформационнойБазыНаСервере1СПредприятия) Тогда
            ТекстСообщения = "Не заданы обязательные параметры подключения: ""Имя сервера""; ""Имя информационной базы на сервере"".";
            ОшибкаПроверкиЗаполнения = Истина;
        КонецЕсли;
    КонецЕсли;
    
    Если ОшибкаПроверкиЗаполнения Тогда
        юсСообщить("ERROR", ТекстСообщения);
        Возврат Неопределено;
    КонецЕсли;
    
    // Формирование строки соединения.
    ШаблонСтрокиСоединения = "[СтрокаБазы][СтрокаАутентификации]";
    
    Если ФайловыйВариантРаботы Тогда
        СтрокаБазы = "File = ""&КаталогИнформационнойБазы""";
        СтрокаБазы = СтрЗаменить(СтрокаБазы, "&КаталогИнформационнойБазы", ПараметрыПодключения.КаталогИнформационнойБазы);
    Иначе
        СтрокаБазы = "Srvr = ""&ИмяСервера1СПредприятия""; Ref = ""&ИмяИнформационнойБазыНаСервере1СПредприятия""";
        СтрокаБазы = СтрЗаменить(СтрокаБазы, "&ИмяСервера1СПредприятия",                     ПараметрыПодключения.ИмяСервера1СПредприятия);
        СтрокаБазы = СтрЗаменить(СтрокаБазы, "&ИмяИнформационнойБазыНаСервере1СПредприятия", ПараметрыПодключения.ИмяИнформационнойБазыНаСервере1СПредприятия);
    КонецЕсли;
    
    Если ПараметрыПодключения.АутентификацияОперационнойСистемы Тогда
        СтрокаАутентификации = "";
    Иначе
        
        Если СтрНайти(ПараметрыПодключения.ИмяПользователя, """") Тогда
            ПараметрыПодключения.ИмяПользователя = СтрЗаменить(ПараметрыПодключения.ИмяПользователя, """", """""");
        КонецЕсли;
        
        Если СтрНайти(ПараметрыПодключения.ПарольПользователя, """") Тогда
            ПараметрыПодключения.ПарольПользователя = СтрЗаменить(ПараметрыПодключения.ПарольПользователя, """", """""");
        КонецЕсли;
        
        СтрокаАутентификации = "; Usr = ""&ИмяПользователя""; Pwd = ""&ПарольПользователя""";
        СтрокаАутентификации = СтрЗаменить(СтрокаАутентификации, "&ИмяПользователя",    ПараметрыПодключения.ИмяПользователя);
        СтрокаАутентификации = СтрЗаменить(СтрокаАутентификации, "&ПарольПользователя", ПараметрыПодключения.ПарольПользователя);
    КонецЕсли;
    
    СтрокаСоединения = СтрЗаменить(ШаблонСтрокиСоединения, "[СтрокаБазы]", СтрокаБазы);
    СтрокаСоединения = СтрЗаменить(СтрокаСоединения, "[СтрокаАутентификации]", СтрокаАутентификации);
    
    Попытка
        Соединение = COMОбъект.Connect(СтрокаСоединения);
    Исключение
        юсСообщить("ERROR", "Не удалось подключиться к ИБ по причине: " + ОписаниеОшибки());
        Возврат Неопределено;
    КонецПопытки;
    
    Возврат Соединение;
    
КонецФункции

// Возвращает строку для подключения к внешней базе по переданным параметрам подключения. 
// Параметры:
//  ПараметрыПодключения - Структура - параметры для установки внешнего соединения с информационной базой (см. УстановитьВнешнееСоединениеСБазой()). 
// Возвращаемое значение:
//  Строка, Неопределено - строка подключения или Неопределено в случае ошибки;
//
Функция ПолучитьСтрокуСоединения(знач ПараметрыПодключения)  
    
    ФайловыйВариантРаботы = ПараметрыПодключения.ВариантРаботыИнформационнойБазы = 0;
    
    // Формирование строки соединения.
    СтрокаСоединения = "[СтрокаБазы][СтрокаАутентификации]";
    
    Если ФайловыйВариантРаботы Тогда
        СтрокаБазы = " /F""&КаталогИнформационнойБазы""";
        СтрокаБазы = СтрЗаменить(СтрокаБазы, "&КаталогИнформационнойБазы", ПараметрыПодключения.КаталогИнформационнойБазы);
    Иначе
        СтрокаБазы = " /S""&ИмяСервера1СПредприятия/&ИмяИнформационнойБазыНаСервере1СПредприятия""";
        СтрокаБазы = СтрЗаменить(СтрокаБазы, "&ИмяСервера1СПредприятия",                     ПараметрыПодключения.ИмяСервера1СПредприятия);
        СтрокаБазы = СтрЗаменить(СтрокаБазы, "&ИмяИнформационнойБазыНаСервере1СПредприятия", ПараметрыПодключения.ИмяИнформационнойБазыНаСервере1СПредприятия);
    КонецЕсли;
    
    Если ПараметрыПодключения.АутентификацияОперационнойСистемы Тогда
        СтрокаАутентификации = "";
    Иначе
        
        Если СтрНайти(ПараметрыПодключения.ИмяПользователя, """") Тогда
            ПараметрыПодключения.ИмяПользователя = СтрЗаменить(ПараметрыПодключения.ИмяПользователя, """", """""");
        КонецЕсли;
        
        Если СтрНайти(ПараметрыПодключения.ПарольПользователя, """") Тогда
            ПараметрыПодключения.ПарольПользователя = СтрЗаменить(ПараметрыПодключения.ПарольПользователя, """", """""");
        КонецЕсли;
        
        СтрокаАутентификации = " /N""&ИмяПользователя"" /P""&ПарольПользователя""";
        СтрокаАутентификации = СтрЗаменить(СтрокаАутентификации, "&ИмяПользователя",    ПараметрыПодключения.ИмяПользователя);
        СтрокаАутентификации = СтрЗаменить(СтрокаАутентификации, "&ПарольПользователя", ПараметрыПодключения.ПарольПользователя);
    КонецЕсли;
    
    СтрокаСоединения = СтрЗаменить(СтрокаСоединения, "[СтрокаБазы]", СтрокаБазы);
    СтрокаСоединения = СтрЗаменить(СтрокаСоединения, "[СтрокаАутентификации]", СтрокаАутентификации);
    
    Возврат СтрокаСоединения;
    
КонецФункции

// oscript $(FULL_CURRENT_PATH) /CopyFTP /UPath d:\_Проекты\Uni_Script\Примеры\1.txt /UServer bitrix122.timeweb.ru /N diversus /P *** /UPathFTP /softonit.ru/public_html/test/
Процедура КопироватьНаFTP()	
	
	// Проверка параметров
	Если ЗначениеЗаполнено(юсПараметры["/UPath"]) Тогда
		мИмяФайла = юсПараметры["/UPath"];		
	Иначе
		юсСообщить("ERROR", "Не заполнен параметр ""/UPath"" - путь к файлу для копирования по FTP!");
		Возврат;
	КонецЕсли;

	Файл = Новый Файл(мИмяФайла);
	Если Не Файл.Существует() Тогда		
		юсСообщить("ERROR ", "Файл """ + мИмяФайла + """" + " не существует для копирования по FTP.");
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(юсПараметры["/N"]) Тогда
		мИмяПользователя = юсПараметры["/N"];		
	Иначе
		юсСообщить("ERROR", "Не заполнен параметр ""/N"" - имя пользователя для копирования по FTP!");
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(юсПараметры["/P"]) Тогда
		мПароль = юсПараметры["/P"];		
	Иначе
		юсСообщить("ERROR", "Не заполнен параметр ""/P"" - пароль для копирования по FTP!");
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(юсПараметры["/UServer"]) Тогда
		мСервер = юсПараметры["/UServer"];		
	Иначе
		юсСообщить("ERROR", "Не заполнен параметр ""/P"" - пароль для копирования по FTP!");
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(юсПараметры["/UPathFTP"]) Тогда
		мПутьНаСервере = юсПараметры["/UPathFTP"];		
	Иначе
		юсСообщить("ERROR", "Не заполнен параметр ""/UPathFTP"" - путь на сервере FTP куда необходимо скопировать файл!");
		Возврат;
	КонецЕсли;
	
	Сообщить(мИмяФайла);
	Сообщить(мИмяПользователя);
	Сообщить(мПароль);
	Сообщить(мСервер);
	Сообщить(мПутьНаСервере);
	
	мСтрока = "ftp://" + мИмяПользователя + ":" + мПароль + "@" + мСервер + "/" + мПутьНаСервере + "/";
	Попытка
	objShell = Новый COMОбъект("Shell.Application");
	objFolder = objShell.NameSpace(мСтрока);
	а = objFolder.CopyHere(мИмяФайла);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки
	
	
КонецПроцедуры

// Разбивает строку на несколько строк по разделителю. Разделитель может иметь любую длину.
Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, СокращатьНепечатаемыеСимволы = Ложь) Экспорт
	
	Результат = Новый Массив;
	
	// для обеспечения обратной совместимости
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Строка));
		Иначе
			Результат.Добавить(Строка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ВыполнитьПрограммноеОбновлениеКонфигурации()
	
	// ШАГ 3. Подключаемся по COM
	ИмяCOMСоединителя = "V83.ComConnector";
	Попытка
		COMОбъект = Новый COMОбъект(ИмяCOMСоединителя);
	Исключение
		юсСообщить("ERROR", "Не удалось подключиться через " + ИмяCOMСоединителя + " по причине: " + ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;	
			
	Попытка
		Соединение 				= COMОбъект.Connect(юсПараметры["СтрокаПодключения"]);
		мВерсияКонфигурации 	= Соединение.Метаданные().Версия;
		мИмяКонфигурации 		= Соединение.Метаданные().Имя;
		мСинонимКонфигурации 	= Соединение.Метаданные().Синоним;			
		юсСообщить("INFO ", "Текущая версия конфигурации для релиза " + мВерсияКонфигурации);
	Исключение
		юсСообщить("ERROR", "Не удалось получить данные конфигурации через " + ИмяCOMСоединителя + " по причине: " + ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	Если ПустаяСтрока(мВерсияКонфигурации) Тогда
		юсСообщить("ERROR", "Текущая версия конфигурации не получена. Нельзя продолжить.");
		Возврат Неопределено;		
	КонецЕсли;
	
	// ШАГ 3. Запуск конфигурации в режиме предприятия с проверкой легальности
	Если ЗначениеЗаполнено(юсПараметры["/Legal"]) Тогда
		
		юсСообщить("INFO ", "Принятие обновления.");		
		
		Попытка
			Соединение.ОбновлениеИнформационнойБазыСлужебный.ЗаписатьПодтверждениеЛегальностиПолученияОбновлений();
			Соединение.ОбновлениеИнформационнойБазы.ВыполнитьОбновлениеИнформационнойБазы(Ложь);			
			юсСообщить("INFO ", "Принятие обновления завершено.");
		Исключение
			юсСообщить("ERROR", "Не удалось принять обновление по причине: " + ОписаниеОшибки());
		КонецПопытки;
		
	КонецЕсли;

	// Очищаем соединения
	ОсвободитьОбъект(Соединение);
	ОсвободитьОбъект(COMОбъект);
	ВыполнитьСборкуМусора();	
	
	Возврат Новый Структура("мВерсияКонфигурации, мИмяКонфигурации, мСинонимКонфигурации", мВерсияКонфигурации, мИмяКонфигурации, мСинонимКонфигурации)
	
КонецФункции

// oscript $(FULL_CURRENT_PATH) /BuildDistrib /F "D:\_Проекты\Управление IT-отделом 8 УФ\Пустая конфигурация для обновления" /N "Администратор" /P "" /ConfigurationRepositoryF "D:\Хранилище\Управление IT-отделом 8" /ConfigurationRepositoryN "Обновления" /Legal "Yes" /UPath "d:\_Проекты\Управление IT-отделом 8 УФ\Полные комплекты и обновления" /NVer "3.0.27.6" /NeedVerPL "8.3.6"
Процедура СоздатьДистрибутивИзХранилища()	
	
	// Шаг 0. Проверка заполненных параметров
	мКаталогСборки = юсПараметры["/UPath"];
	Если НЕ ЗначениеЗаполнено(юсПараметры["/ConfigurationRepositoryF"]) Тогда
		юсСообщить("ERROR", "Не заполнен параметр ""/ConfigurationRepositoryF"" - путь к хранилищу!");
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(юсПараметры["/ConfigurationRepositoryN"]) Тогда
		юсСообщить("ERROR", "Не заполнен параметр ""/ConfigurationRepositoryN"" - пользователь хранилища!");
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(мКаталогСборки) Тогда
		юсСообщить("ERROR", "Не заполнен параметр ""/UPath"" - каталог сборки (где будет создан дистрибутив)!");
		Возврат;
	Иначе
		Файл = Новый Файл(мКаталогСборки);
		Если Не Файл.Существует() Тогда		
			юсСообщить("ERROR ", "Каталог """ + мКаталогСборки + """" + " не существует для создания дистрибутива.");
			Возврат;
		КонецЕсли;	
	КонецЕсли;
	мКаталогСборки = ДополнитьСтрокуСлешем(мКаталогСборки);
	
	// Шаг 1. Загружаем все изменения из хранилища
	НомерШага = 1;
	ПараметрыЗапуска 			= юсКонфигуратор.ПолучитьПараметрыЗапуска();
	ПараметрыЗапуска.Добавить("/ConfigurationRepositoryUpdateCfg -revised -force");
	ПараметрыЗапуска.Добавить("/ConfigurationRepositoryF """ + юсПараметры["/ConfigurationRepositoryF"] + """");	
	ПараметрыЗапуска.Добавить("/ConfigurationRepositoryN """ + юсПараметры["/ConfigurationRepositoryN"] + """");
	Если ЗначениеЗаполнено(юсПараметры["/ConfigurationRepositoryP"]) Тогда
		ПараметрыЗапуска.Добавить("/ConfigurationRepositoryP """ + юсПараметры["/ConfigurationRepositoryP"] + """");
	КонецЕсли;
		
	юсСообщить("INFO ", "ШАГ " + Строка(НомерШага)); 
	юсСообщить("INFO ", "Получаем конфигурацию из хранилища");
	Попытка
	    юсКонфигуратор.ВыполнитьКоманду(ПараметрыЗапуска);
		юсСообщить("INFO ", "Получение завершено");
	Исключение												   
		юсСообщить("ERROR", "Произошла ошибка при получении конфигурации из хранилища " + юсКонфигуратор.ВыводКоманды());		
		Возврат;
	КонецПопытки;
	НомерШага = НомерШага + 1;
	
	// Шаг 2. Обновляем конфигурацию
	ПараметрыЗапуска 			= юсКонфигуратор.ПолучитьПараметрыЗапуска();
	ПараметрыЗапуска.Добавить("/UpdateDBCfg");
	
	юсСообщить("INFO ", "ШАГ " + Строка(НомерШага));
	юсСообщить("INFO ", "Обновление конфигурации базы данных");
	Попытка
	    юсКонфигуратор.ВыполнитьКоманду(ПараметрыЗапуска);
		юсСообщить("INFO ", "Обновление конфигурации завершено");
	Исключение												   
		юсСообщить("ERROR", "Произошла ошибка при обновлении конфигурации базы данных " + юсКонфигуратор.ВыводКоманды());
		Возврат;
	КонецПопытки;
	НомерШага = НомерШага + 1;

	// Обновляем при необходимости
	Результат = ВыполнитьПрограммноеОбновлениеКонфигурации();
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	мВерсияКонфигурации 	= Результат.мВерсияКонфигурации;
	мИмяКонфигурации 		= Результат.мИмяКонфигурации;
	мСинонимКонфигурации 	= Результат.мСинонимКонфигурации;	
	ВыполнитьСборкуМусора();
	
	// ШАГ 4. Создаем папки и будущую навигацию
	юсСообщить("INFO ", "ШАГ " + Строка(НомерШага));
	юсСообщить("INFO ", "Создание каталогов и заполнение вспомогательных данных.");
	мВерсииОбновлений = юсПараметры["/NVer"];
	мМассивВерсий = РазложитьСтрокуВМассивПодстрок(мВерсииОбновлений);
	
	мКаталогВерсии 						= ДополнитьСтрокуСлешем(мКаталогСборки + мВерсияКонфигурации);
	мКаталогВерсииПолный 				= ДополнитьСтрокуСлешем(мКаталогВерсии + "Полный");
	мКаталогВерсииОбновление 			= ДополнитьСтрокуСлешем(мКаталогВерсии + "Обновление");
	мКаталогВерсииДополнительныеФайлы 	= ДополнитьСтрокуСлешем(мКаталогВерсии + "Дополнительные файлы");
	
	Файл = Новый Файл(мКаталогСборки);
	// Удаляем все файлы в папке сборки, если она есть
	Если Файл.Существует() Тогда
		Попытка
			УдалитьФайлы(мКаталогВерсии);
		Исключение
			юсСообщить("ERROR", "Не удалось удалить каталог со старой версией, для новой сборки: " + ОписаниеОшибки());
			Возврат;
		КонецПопытки;
	КонецЕсли;

	// Создаем каталоги
	СоздатьКаталог(мКаталогВерсии);
	СоздатьКаталог(мКаталогВерсииПолный);	
	СоздатьКаталог(мКаталогВерсииДополнительныеФайлы);
	
	// Нужно делать и обновление
	мСтрокаСВерсиями = "";
	Если мМассивВерсий.Количество() > 0 Тогда
		СоздатьКаталог(мКаталогВерсииОбновление);
		// Создаем UpdInfo.txt
		ТД = Новый ТекстовыйДокумент;
		ТекстВерсий = "Version=" + мВерсияКонфигурации + Символы.ПС + "FromVersions=;";
		Для Каждого мВерсия Из мМассивВерсий Цикл
			ТекстВерсий = ТекстВерсий + мВерсия + ";";
			Если НЕ ПустаяСтрока(мСтрокаСВерсиями) Тогда
				мСтрокаСВерсиями = мСтрокаСВерсиями + ", ";
			КонецЕсли;
			мСтрокаСВерсиями = мСтрокаСВерсиями + мВерсия;
		КонецЦикла;
		ТекстВерсий = ТекстВерсий + Символы.ПС + "UpdateDate=" + Формат(ТекущаяДата(), "ДФ=dd.MM.yyyy");
		ТД.УстановитьТекст(ТекстВерсий);
		ТД.Записать(мКаталогВерсииДополнительныеФайлы + "UpdInfo.txt");
	КонецЕсли;
	
	// Создаем ReadMe.txt
	ТД = Новый ТекстовыйДокумент;
	Текст = "Конфигурация """ + мСинонимКонфигурации + """" + Символы.ПС + 
		"Версия " + мВерсияКонфигурации + Символы.ПС +
		"=================================================================" + Символы.ПС + Символы.ПС +		
		"Внимание!"+ Символы.ПС +
		"Текущая версия конфигурации """ + мСинонимКонфигурации + """ предназначена"+ Символы.ПС +
		"для использования с версией системы 1С:Предприятие 8.3 не ниже " + юсПараметры["/NeedVerPL"];
	ТД.УстановитьТекст(Текст);
	ТД.Записать(мКаталогВерсииДополнительныеФайлы + "ReadMe.txt");
	
	ПолучитьОписаниеОбновленияИзМакета(мКаталогСборки + "news.html");
	ВыполнитьСборкуМусора();
	
	// Создаем 1cv8upd.htm
	ТД = Новый ТекстовыйДокумент;
	мТекстНовостей = "";
	Файл = Новый Файл(мКаталогСборки);
	Если Файл.Существует() Тогда			
		ТД.Прочитать(мКаталогСборки + "news.html");
		мТекстНовостей = ТД.ПолучитьТекст();
	КонецЕсли;	
	Текст = "<HTML><HEAD>
			|<META http-equiv=Content-Type content=""text/html; charset=utf-8""><LINK href=""__STYLE__"" type=text/css rel=stylesheet><BASE href=v8config://1F802B99-D580-4E0F-93A3-F3F36B54052D/mdobject/id85895E9C-8000-4F0E-8DFD-B67B5FE6CC6C/8EB4FAD1-1FA6-403E-970F-2C12DBB43E23>
			|<META content=""MSHTML 6.00.2900.5969"" name=GENERATOR></HEAD>
			|<style type=""text/css"">
			|.updnew li:before{color:#090;content:""[+] "";font-family:""Courier New"",Courier,monospace;font-weight:bold;font-style:normal;list-style:none;}
			|.updedt li:before{color:#005EF9;content:""[*] "";font-family:""Courier New"",Courier,monospace;font-weight:bold;font-style:normal;list-style:none;}
			|.upderr li:before{color:#FF0000;content:""[-] "";font-family:""Courier New"",Courier,monospace;font-weight:bold;font-style:normal;list-style:none;}
			|.updnws li:before{color:#810A0A;content:""[#] "";font-family:""Courier New"",Courier,monospace;font-weight:bold;font-style:normal;list-style:none;}
			|</style>			
			|<BODY>
			|<TABLE style=""BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"" cellSpacing=0 cellPadding=8 width=""100%"" bgColor=#ffffd6 border=0>
			|<TBODY>
			|<TR>
			|<TD>
			|<H2><FONT face=Tahoma color=#c10000>Конфигурация<BR>" + мСинонимКонфигурации + "</FONT></FONT></H2></TD></TR></TBODY></TABLE>
			|<H3 style=""BORDER-BOTTOM: #c10000 2px solid""><FONT face=Arial color=#c10000 size=5><EM>Версия&nbsp;" + мВерсияКонфигурации + "</EM></FONT></H3>
			|<H4><FONT face=Verdana color=#823602>Порядок обновления всех конфигураций</FONT></H4>
			|<OL>
			|<LI>Запустите систему 1С:Предприятие в режиме ""Конфигуратор"".
			|<LI><B>Обязательно сделайте архивную копию вашей информационной базы!</B> Для этого надо в меню Администрирование выбрать пункт ""Выгрузить информационную базу"" и ввести имя файла выгрузки. Этот файл надо сохранить в надёжном месте. 
			|<LI>В режиме ""Конфигуратор"" откройте конфигурацию, для этого в меню ""Конфигурация"" выберите пункт ""Открыть конфигурацию"". 
			|<LI>Вызовите режим ""Обновление конфигураций"", для этого в меню ""Конфигурация"", подменю ""Поддержка"", выберите пункт ""Обновить конфигурацию"". 
			|<LI>В диалоге выбора обновления в качестве источника обновления укажите ""Доступные обновления"", после чего выберите нужное обновление в соответствующем списке. 
			|<LI>Если в списке обновлений необходимое обновление отсутствует, то в диалоге выбора обновления в качестве источника обновления укажите ""Файл обновления"", после чего выберите нужный файл обновления (по умолчанию 1cv8.cfu). 
			|<LI>В окне ""Обновление конфигураций"" нажмите кнопку ""OK"" для продолжения обновления конфигурации. 
			|<LI>На вопрос об обновлении конфигурации базы данных ответьте ""ДА"". 
			|<LI>После завершения <B>обязательно</B> запустите программу в режиме ""Предприятие"" - для совершения конвертации. Некоторые пользователи не выходя из конфигуратора последовательно обновляют версии - это недопустимо и повлечет за собой невозможность дальнейшей работы. После каждого обновления надо хотя бы 1 раз запускать 1С в режиме 1С:Предприятие.</LI></OL>
			|<H4><FONT face=Verdana color=#823602>Порядок обновления конфигурации версий " + мСтрокаСВерсиями + " на версию " + мВерсияКонфигурации + "</FONT></H4>
			|<P>Для обновления версии конфигурации следует использовать режим ""Обновление конфигураций"". Файл обновлений 1Cv8.cfu находится в каталоге шаблонов (по умолчанию - подкаталог tmplts\ каталога установки 1С:Предприятия 8), в подкаталоге \it3\" + СтрЗаменить(мВерсияКонфигурации, ".", "_") + "\</P>
			|</SPAN><hr><font color=""#ff0000"">Внимание!<br>Текущая версия конфигурации """ + мСинонимКонфигурации + """ предназначена для использования с версией системы 1С:Предприятие 8.3 не ниже " + юсПараметры["/NeedVerPL"] + ".</font><hr>" + 
			мТекстНовостей + "
			|</BODY></HTML>";
	ТД.УстановитьТекст(Текст);
	ТД.Записать(мКаталогВерсииДополнительныеФайлы + "1cv8upd.htm");		
	
	НомерШага = НомерШага + 1;
	
	// ШАГ 5. Создаем файл поставки
	ПараметрыЗапуска 			= юсКонфигуратор.ПолучитьПараметрыЗапуска();
	ПараметрыЗапуска.Добавить("/CreateDistributionFiles -cffile """ + мКаталогВерсии + "1Cv8.cf" + """");
	Если мМассивВерсий.Количество() > 0 Тогда
		ПараметрыЗапуска.Добавить("-cfufile """ + мКаталогВерсии + "1Cv8.cfu" + """");
		Для Каждого мВерсия Из мМассивВерсий Цикл
			ПараметрыЗапуска.Добавить("-v" + мВерсия);
		КонецЦикла;
	КонецЕсли;

	юсСообщить("INFO ", "ШАГ " + Строка(НомерШага));
	юсСообщить("INFO ", "Создание файла поставки");
	Попытка
		юсКонфигуратор.ВыполнитьКоманду(ПараметрыЗапуска);
		юсСообщить("INFO ", "Создание файла поставки завершено");
	Исключение												   
		юсСообщить("ERROR", "Произошла ошибка при создании файла поставки " + юсКонфигуратор.ВыводКоманды());
		Возврат;
	КонецПопытки;
	НомерШага = НомерШага + 1;
	
	// ШАГ 6. Создание дистрибутива
	ПараметрыЗапуска 			= юсКонфигуратор.ПолучитьПараметрыЗапуска();
	ПараметрыЗапуска.Добавить("/CreateDistributive """ + мКаталогВерсииПолный + """");
	ПараметрыЗапуска.Добавить("-File """ + мКаталогСборки + "install.edf" + """");
	ПараметрыЗапуска.Добавить("-MakeSetup");

	юсСообщить("INFO ", "ШАГ " + Строка(НомерШага));
	юсСообщить("INFO ", "Создание дистрибутива");
	Попытка
		юсКонфигуратор.ВыполнитьКоманду(ПараметрыЗапуска);
		юсСообщить("INFO ", "Создание дистрибутива завершено");
		
		// Делаем архив
		ЗаписьZIP =  Новый ЗаписьZipФайла(мКаталогВерсииПолный + "full.zip");     
		ЗаписьZIP.Добавить(мКаталогВерсииПолный + "1cv8.efd");
		ЗаписьZIP.Добавить(мКаталогВерсииПолный + "setup");
		ЗаписьZIP.Добавить(мКаталогВерсииПолный + "setup.exe");
		ЗаписьZIP.Записать();
		юсСообщить("INFO ", "Создание архива дистрибутива завершено");
		
	Исключение												   
		юсСообщить("ERROR", "Произошла ошибка при создании дистрибутива " + юсКонфигуратор.ВыводКоманды());
		Возврат;
	КонецПопытки;
	НомерШага = НомерШага + 1;
	
	// ШАГ 7. Создание обновления
	Если мМассивВерсий.Количество() > 0 Тогда
		ПараметрыЗапуска 			= юсКонфигуратор.ПолучитьПараметрыЗапуска();
		ПараметрыЗапуска.Добавить("/CreateDistributive """ + мКаталогВерсииОбновление + """");
		ПараметрыЗапуска.Добавить("-File """ + мКаталогСборки + "install.edf" + """");
		ПараметрыЗапуска.Добавить("-Option """ + "Обновление" + """");
		ПараметрыЗапуска.Добавить("-MakeSetup");

		юсСообщить("INFO ", "ШАГ " + Строка(НомерШага));
		юсСообщить("INFO ", "Создание обновления дистрибутива");
		Попытка
			юсКонфигуратор.ВыполнитьКоманду(ПараметрыЗапуска);			
			юсСообщить("INFO ", "Создание обновления дистрибутива завершено");
			
			// Делаем архив
			ЗаписьZIP =  Новый ЗаписьZipФайла(мКаталогВерсииОбновление + мВерсияКонфигурации + ".zip");     
			ЗаписьZIP.Добавить(мКаталогВерсииОбновление + "1cv8.efd");
			ЗаписьZIP.Добавить(мКаталогВерсииОбновление + "setup");
			ЗаписьZIP.Добавить(мКаталогВерсииОбновление + "setup.exe");
			ЗаписьZIP.Записать();
			юсСообщить("INFO ", "Создание архива обновления дистрибутива завершено");
			
		Исключение												   
			юсСообщить("ERROR", "Произошла ошибка при создании обновления дистрибутива " + юсКонфигуратор.ВыводКоманды());
			Возврат;
		КонецПопытки;
		НомерШага = НомерШага + 1;
			
	КонецЕсли;
	
	юсСообщить("INFO ", "Успешное завершение сборки.");
	
КонецПроцедуры

//	oscript $(FULL_CURRENT_PATH) /SaveLastConfigUpdateText /F "D:\_Проекты\Управление IT-отделом 8 УФ\Пустая конфигурация для обновления" /N "Администратор" /P "" /UPath "d:\_Проекты\Управление IT-отделом 8 УФ\Полные комплекты и обновления\news.html"
Процедура ПолучитьОписаниеОбновленияИзМакета(ФайлHTML = Неопределено)
	
	мФайлHTML = "";
	Если ФайлHTML = Неопределено Тогда
	
		Если НЕ ЗначениеЗаполнено(юсПараметры["/UPath"]) Тогда
			юсСообщить("ERROR", "Не заполнен параметр ""/UPath"" - путь к HTML документу с описанием изменений!");
			Возврат;
		КонецЕсли;
		мФайлHTML = юсПараметры["/UPath"];
		
	Иначе
	
		мФайлHTML = ФайлHTML;
		
	КонецЕсли;
	
	ИмяCOMСоединителя = "V83.ComConnector";
	Попытка
		COMОбъект = Новый COMОбъект(ИмяCOMСоединителя);
	Исключение
		юсСообщить("ERROR", "Не удалось подключиться через " + ИмяCOMСоединителя + " по причине: " + ОписаниеОшибки());
		Возврат;
	КонецПопытки;	
			
	Попытка
		Соединение 				= COMОбъект.Connect(юсПараметры["СтрокаПодключения"]);
		мВерсияКонфигурации 	= Соединение.Метаданные().Версия;
		
		// Получаем текстовый файл описания
		
		Макет = Соединение.ПолучитьОбщийМакет("ОписаниеИзмененийСистемы");
		
		Обновление = Новый ТаблицаЗначений;
		Обновление.Колонки.Добавить("Раздел");
		Обновление.Колонки.Добавить("Текст");
		Обновление.Колонки.Добавить("ТекстHTML");
		
		ТД = Новый ТекстовыйДокумент;
		Текст = "";
		ТекстHTML = "";
		Области = Макет.ПолучитьОбласть("Версия" + СтрЗаменить(мВерсияКонфигурации, ".", "_"));
		Раздел = "Новый функционал";
		Для а = 1 по Области.ВысотаТаблицы Цикл
		
			Текст = Области.Область(а,2,а,2).Текст;
			Если ПустаяСтрока(Текст) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Текст = "Новый функционал" ИЛИ Текст = "Изменения" ИЛИ Текст = "Исправление ошибок" Тогда
				Раздел = Текст;
				Продолжить;
			КонецЕсли;
			
			Стр = Обновление.Добавить();
			Стр.Раздел = Раздел;
			
			// Удаляем теги
			ТекстHTML = СтрЗаменить(Текст, "&", "&amp;");
			ТекстHTML = СтрЗаменить(ТекстHTML, "<", "&lt;");
			ТекстHTML = СтрЗаменить(ТекстHTML, ">", "&gt;");
			
			Стр.ТекстHTML = ТекстHTML;
			Стр.Текст	  = Текст;

		КонецЦикла;
		
		Раздел = "";
		ТекстHTML = "";
		Для Каждого Строки Из Обновление Цикл
			Если Раздел <> Строки.Раздел Тогда
				Если НЕ ПустаяСтрока(ТекстHTML) тогда
					ТекстHTML = ТекстHTML + "</ul>" + Символы.ПС;
				КонецЕсли;
				ТекстHTML = ТекстHTML + "<h4>" + Строки.Раздел + "</h4>" + Символы.ПС;
				Раздел = Строки.Раздел;
				КлассCSS = "";
				Если Раздел = "Новый функционал" Тогда
					КлассCSS = "updnew";
				ИначеЕсли Раздел = "Изменения" Тогда
					КлассCSS = "updedt";
				ИначеЕсли Раздел = "Исправление ошибок" Тогда
					КлассCSS = "upderr";
				КонецЕсли;
				ТекстHTML = ТекстHTML + "<ul class=""" + КлассCSS + """>" + Символы.ПС;
			КонецЕсли;
			ТекстHTML = ТекстHTML + "<li>" + Строки.ТекстHTML + "</li>" + Символы.ПС;
		КонецЦикла;
		ТекстHTML = ТекстHTML + "</ul>";
		
		Раздел = "";
		Текст = "";
		КлассCSS = "";
		Для Каждого Строки Из Обновление Цикл
			Если Раздел <> Строки.Раздел Тогда
				Раздел = Строки.Раздел;
				КлассCSS = "";
				Если Раздел = "Новый функционал" Тогда
					КлассCSS = "[+] ";
				ИначеЕсли Раздел = "Изменения" Тогда
					КлассCSS = "[*] ";
				ИначеЕсли Раздел = "Исправление ошибок" Тогда
					КлассCSS = "[-] ";
				КонецЕсли;
			КонецЕсли;
			Текст = Текст + КлассCSS + Строки.Текст + Символы.ПС;
		КонецЦикла;
		Текст = Текст + Символы.ПС;
		

		ТД = Новый ТекстовыйДокумент;
		
		Если Найти(НРег(мФайлHTML), ".html") > 0 ИЛИ Найти(НРег(мФайлHTML), ".htm") > 0 Тогда
			ТД.УстановитьТекст(ТекстHTML);
		Иначе
			ТД.УстановитьТекст(Текст);
		КонецЕсли;
		
		ТД.Записать(мФайлHTML);
		
		юсСообщить("INFO ", "Успешное завершение получение текста последнего текущего обновления.");
		
	Исключение
		юсСообщить("ERROR", "Не удалось получить текст последнего текущего обновления конфигурации через " + ИмяCOMСоединителя + " по причине: " + ОписаниеОшибки());
		Возврат;
	КонецПопытки;

	// Очищаем соединения
	ОсвободитьОбъект(Соединение);
	ОсвободитьОбъект(COMОбъект);
	ВыполнитьСборкуМусора();

КонецПроцедуры

ЗадатьНачальныеНастройки();
ИнициализацияСистемныхПеременных();
юсВыполнитьКоманду();