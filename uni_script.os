// BSLLS-off
// UNI_SCRIPT - универсальный скрипт на языке 1С VERSION: 2022.09.24
// Версия
// TO-DO
//	1. Добавить определение V83.ComConnector где определять 83 по платформе(?)	
//  2. Там где используется COmConnector использовать 	ОсвободитьОбъект(Соединение);	ОсвободитьОбъект(COMОбъект);	ВыполнитьСборкуМусора();
//
//
// ПОДДЕРЖИВАЕМЫЕ КОМАНДЫ:
//		+ /DumpConfigToFiles 
//				- /F <путь> (тип базы - файловая)
//				- /S <адрес> (тип базы - серверная, <Имя компьютера, работающего сервером приложений>\<Ссылочное имя информационной базы, известное в рамках сервера 1С:Предприятия 8>)
//				- /N (логин администратора ИБ, если не задан, то без логина)
//				- /P (пароль администратора ИБ)
//				- /UPath <путь> (Путь выгрузки файлов)
//				- /Format формат выгрузки (Plain)
//		+ /DumpIB		Резервная копия с блокировкой сеансов
//			Параметры запуска:
//				- /F <путь> (тип базы - файловая)
//				- /S <адрес> (тип базы - серверная, <Имя компьютера, работающего сервером приложений>\<Ссылочное имя информационной базы, известное в рамках сервера 1С:Предприятия 8>)
//				- /N (логин администратора ИБ, если не задан, то без логина)
//				- /P (пароль администратора ИБ)
//				- /CN (логин администратора кластера серверов, если не задан, то не авторизоваться на кластере)
//				- /CP (пароль администратора кластера серверов)
//				- /UC (код блокировки, если не задано, то блокировка не ставится)
//				- /Format (формат имени файла бэкапа, если не задано, то будет использован формат "yyyyMMddHHmmss")
//				- /UCMsg (текст сообщения пользователям при блокировке работы ИБ)
//				- /LOG <имя файла> (не обязательный параметр, путь к файлу логов, записи добавляются в конец, в виде Дата, Тип сообщения([INFO ], [ERROR], [WARNG]), Сообщение)
//				- /UPath <путь> (Путь выгрузки ИБ)
//				- /UCount (количество копий, которые необходимо оставить)
//				- /Pref (префикс имя файла бэкапа)
// 	
//		+ /RestoreIB	Восстановление резервеной копии в ИБ
//				- /F <путь> (тип базы - файловая)
//				- /S <адрес> (тип базы - серверная, <Имя компьютера, работающего сервером приложений>\<Ссылочное имя информационной базы, известное в рамках сервера 1С:Предприятия 8>)
//				- /N (логин администратора ИБ, если не задан, то без логина)
//				- /P (пароль администратора ИБ)
//				- /CN (логин администратора кластера серверов, если не задан, то не авторизоваться на кластере)
//				- /CP (пароль администратора кластера серверов)
//				- /UC (код блокировки)
//				- /UCMsg (Текст сообщения пользователям при блокировке работы ИБ)
//				- /LOG <имя файла> (не обязательный параметр, путь к файлу логов, записи добавляются в конец, в виде Дата, Тип сообщения([INFO ], [ERROR], [WARNG]), Сообщение)
//				- /UPath <путь> (Путь к файлу dt)
//
//		+ /Lock			Блокировка сеансов пользователей
//			Параметры запуска:
//				- /F <путь> (тип базы - файловая)
//				- /S <адрес> (тип базы - серверная, <Имя компьютера, работающего сервером приложений>\<Ссылочное имя информационной базы, известное в рамках сервера 1С:Предприятия 8>)
//				- /N (логин админситратора ИБ, если не задан, то без логина)
//				- /P (пароль администратора ИБ)
//				- /UC (код блокировки, если не задано, то блокировка не ставится)
//				- /UCMsg (Текст сообщения пользователям при блокировке работы ИБ)
//				- /LOG
//				- /LockBegin (время начала блокировки сеансов)
//				- /LockEnd (время окончания блокировки сеансов)
//
//		+ /Unlock		Разблокировка сеансов пользователей
//			Параметры запуска:
//				- /F <путь> (тип базы - файловая)
//				- /S <адрес> (тип базы - серверная, <Имя компьютера, работающего сервером приложений>\<Ссылочное имя информационной базы, известное в рамках сервера 1С:Предприятия 8>)
//				- /N (логин админситратора ИБ, если не задан, то без логина)
//				- /P (пароль администратора ИБ)
//				- /LOG
//
//		+ /Terminate	Прерывание сеансов работы пользователей по условиями или без
//			Параметры запуска:
//				- /F <путь> (тип базы - файловая)
//				- /S <адрес> (тип базы - серверная, <Имя компьютера, работающего сервером приложений>\<Ссылочное имя информационной базы, известное в рамках сервера 1С:Предприятия 8>)
//				- /N (логин админситратора ИБ, если не задан, то без логина)
//				- /P (пароль администратора ИБ)
//				- /CN (логин администратора кластера серверов, если не задан, то не авторизоваться на кластере)
//				- /CP (пароль администратора кластера серверов)
//				- /UTime (время в секундах, для удаления устаревших сеансов)
//				- /LOG
//
//		+ /ClearOldFiles Удаление файлов по заданной маске с учетом последней даты изменения (устаревших)
//			Параметры запуска:
//				- /UPath <путь> (каталог с файлами)
//				- /UMask <маска> (маска имени файла для отбора файлов)
//				- /UCount <количество> (количество файлов, которые необходимо оставить)
//
//		+ /TestUpdate Тестирование установки обновления. Обновление устанавливается на
//			Параметры запуска:
//				- /VerPL (версия платформы, например, 8.3.8.1861)
//				- /NVer (номер версии обновления для тестирования, например 3.0.6.1)
//				- /NVerRab (номер рабочей версии, на которую будет устанавливаться обновление, например, 3.0.5.5)
//				- /UPath <путь> (каталог сборки, где будет произведено тестирование обновления)
//
//		+ /CopyFTP Копирования файла на FTP
//			Параметры запуска:
//				- /UPath <путь к файлу> (файл на локальной машине для копирования по FTP)
//				- /N (логин FTP)
//				- /P (пароль FTP)
//				- /UServer <имя> (имя или ip-адрес сервера FTP)
//				- /UPathFTP <путь> (каталог на FTP куда необходимо скопировать файлы)
//
//		+ /DownloadFTP Скачать файл с FTP
//			Параметры запуска:
//				- /UPath <путь к каталогу> (путь к каталогу, куда сохранять файл)
//				- /N (логин FTP)
//				- /P (пароль FTP)
//				- /UServer <имя> (имя или ip-адрес сервера FTP)
//				- /UPathFTP <путь> (каталог на FTP, откуда необходимо скачать файл)
//				- /File - <имя или маска файла>
//
//		+ /BuildDistribRepo создание дистрибутива по шагам
//			1. Загружаются все изменения из хранилища
//			2. Запустить в пользовательском режиме и подтвердить легальность обновления (если необходимо)
//			3. Создание файла поставщика
//			4. Создание папок "Полный", "Обновление", "Дополнительные файлы"
//			5. Создание файлов 1cv8upd.htm, ReadMe.txt, UpdInfo.txt в папке "Дополнительные файлы"
//			4. Сбор дистрибутива, включающего в себя конфигурацию поставщика
//			Параметры запуска:
//				- /F <путь> (тип базы - файловая)
//				- /S <адрес> (тип базы - серверная, <Имя компьютера, работающего сервером приложений>\<Ссылочное имя информационной базы, известное в рамках сервера 1С:Предприятия 8>)
//				- /N (логин администратора ИБ, если не задан, то без логина)
//				- /P (пароль администратора ИБ)
//				- /ConfigurationRepositoryF <путь> (Путь к хранилищу конфигурации)
//				- /ConfigurationRepositoryN логин
//				- /ConfigurationRepositoryP пароль
//				- /Legal "Y" (делать проверку легальности)
//				- /UPath <путь> (корневой каталог с обновлениями, где будет создан дистрибутив)
//				- /NVer (номера версий обновления для которой делается обновление, например "3.0.6.1,3.0.6.2")
//				- /NeedVerPL (номер версии необходимой платформы (информативно 8.3.6))
//
//		+ /SaveLastConfigUpdateText получает из конфигурации из макета ОписаниеИзмененийСистемы текст последнего обновления и сохраняет его в файл
//				- /F <путь> (тип базы - файловая)
//				- /S <адрес> (тип базы - серверная, <Имя компьютера, работающего сервером приложений>\<Ссылочное имя информационной базы, известное в рамках сервера 1С:Предприятия 8>)
//				- /N (логин администратора ИБ, если не задан, то без логина)
//				- /P (пароль администратора ИБ)
//				- /UPath куда сохранить
//				- /Maket имя общего макета для создания файла с новостями, если не определено, то равен "ОписаниеИзмененийСистемы"
//		+ /ConfigurationRepositoryUpdateCfg обновляет конфигурацию из хранилища
//				- /F <путь> (тип базы - файловая)
//				- /S <адрес> (тип базы - серверная, <Имя компьютера, работающего сервером приложений>\<Ссылочное имя информационной базы, известное в рамках сервера 1С:Предприятия 8>)
//				- /N (логин администратора ИБ, если не задан, то без логина)
//				- /P (пароль администратора ИБ)
//				- /ConfigurationRepositoryF <путь> (Путь к хранилищу конфигурации)
//				- /ConfigurationRepositoryN логин
//				- /ConfigurationRepositoryP пароль
//		+ /LoadConfigFromFiles обновляет конфигурацию из папки с выгруженной конфигурацией (git)
//				- /F <путь> (тип базы - файловая)
//				- /S <адрес> (тип базы - серверная, <Имя компьютера, работающего сервером приложений>\<Ссылочное имя информационной базы, известное в рамках сервера 1С:Предприятия 8>)
//				- /N (логин администратора ИБ, если не задан, то без логина)
//				- /P (пароль администратора ИБ)
//				- /Catalog <путь> (Путь к папке с выгруженной конфигурацией в файлы)
//		+ /LoadExtensionFromFiles Загружает расширение из файлов xml, выгруженных из ЕДТ в основную конфигурацию.
//				- /Catalog <путь> (Путь к папке с выгруженныеми файлами расширения из ЕДТ)
//				- /Extension <имя> (Имя расширения, под которым оно будет загружено в основную конфигурацию)
//		+ /SaveExtensionInFile Сохраняет расширение конфигурации в файл.
//				- /Catalog <путь> (Путь куда необходимо сохранить файл расширения)
//				- /Extension <имя> (Имя расширение, которое необходимо сохранить в файл)
//		+ /GitLoad - получить изменения по определенной ветке из Git
//				- /Catalog <путь> (Путь к папке с выгруженной конфигурацией в файлы)
//				- /Branch <ветка> (ветка в GIT)
//
//		+ /EdtProjectExportToConfigFiles  - экспортировать проект 1C:Enterprise Development Tools в файлы конфигурации платформы 1С:Предприятия.
//				ring edt workspace export --project %CI_PROJECT_DIR%/ --configuration-files %CI_PROJECT_DIR%/config --workspace-location %CI_PROJECT_DIR%/workspace
//				- /Project <проект> (Директория, содержащая проект 1C:Enterprise Development Tools.)
//				- /ConfigurationFiles <адрес> (Обязательный параметр Директория для экспорта файлов конфигурации платформы 1С:Предприятия)
//				- /WorkspaceLocation (Обязательный параметр Директория рабочего простанства для запуска 1C:Enterprise Development Tools.)
//
//		+ /CreateInfoBase - создание пустой информационной базы в каталоге
//				- /F <путь> (тип базы - файловая)
//
//		- /BuildDistrib создание дистрибутива по шагам
//			1. Создание файла поставщика
//			2. Создание папок "Полный", "Обновление", "Дополнительные файлы"
//			3. Создание файлов 1cv8upd.htm, ReadMe.txt, UpdInfo.txt в папке "Дополнительные файлы"
//			4. Сбор дистрибутива, включающего в себя конфигурацию поставщика
//			Параметры запуска:
//				- /F <путь> (тип базы - файловая)
//				- /S <адрес> (тип базы - серверная, <Имя компьютера, работающего сервером приложений>\<Ссылочное имя информационной базы, известное в рамках сервера 1С:Предприятия 8>)
//				- /N (логин администратора ИБ, если не задан, то без логина)
//				- /P (пароль администратора ИБ)
//				- /UPath <путь> (корневой каталог с обновлениями, где будет создан дистрибутив)
//				- /NVer (номера версий обновления для которой делается обновление, например "3.0.6.1,3.0.6.2")
//				- /NeedVerPL (номер версии необходимой платформы (информативно 8.3.6))
//				- /Version (номер версии обновления)
//				- /Settings
//				- /Section
//				- /SectionURL
//
//		+ /Save1cv8_mft - создание файла 1cv8.mft для обновления
//				- /F <путь> (тип базы - файловая)
//				- /S <адрес> (тип базы - серверная, <Имя компьютера, работающего сервером приложений>\<Ссылочное имя информационной базы, известное в рамках сервера 1С:Предприятия 8>)
//				- /N (логин администратора ИБ, если не задан, то без логина)
//				- /P (пароль администратора ИБ)
//				- /UPath <путь> (корневой каталог, где будет создан файл)
//				- /Destination
//				- /DestinationDemo
//				- /Vendor
//
//		+ /SaveInstall_edf - создание файла install.edf для обновления
//				- /F <путь> (тип базы - файловая)
//				- /S <адрес> (тип базы - серверная, <Имя компьютера, работающего сервером приложений>\<Ссылочное имя информационной базы, известное в рамках сервера 1С:Предприятия 8>)
//				- /N (логин администратора ИБ, если не задан, то без логина)
//				- /P (пароль администратора ИБ)
//				- /UPath <путь> (корневой каталог, где будет создан файл)
//
//		+ /SetURLS - замена URL в файле с новостями.
//				- FileHTML
//				- FileTXT
//				- FileURL
//
//		+ /SendNews
//				- URL - адрес скрипта на сайте
//				- FileHTML - файл с HTML описанием обновления
//				- FileTXT - файл с TXT описанием обновления
//				- Settings путь к файлу settings.ini
//				- Section раздел файла settings.ini с настройками
//				- ThisDescriptionFutureVersion - это описание будущей версии
//				- SITE_ID_PROGRAM - если заполнено, то берется SITE_ID_PROGRAM из файла настроек
//				- SITE_ID_CATALOG - если заполнено, то берется SITE_ID_CATALOG из файла настроек
//				- SITE_NEWS_IBLOCK_SECTION_ID - если заполнено, то берется SITE_NEWS_IBLOCK_SECTION_ID из файла настроек
//
//		+ /Obfuscate - обфускация файла используя сервис https://netlenka.org
//				- File <путь к файлу> (оригинальный файл)
//				- ObfuscateFile <путь к файлу> (обфусцированный файл)
//				- ApiKey <23412341A4..12FDA> (API ключ, который можно найти на сайте сервиса)
//		
//		+ /FindFilesAndCopy - поиск файлов по маске и их копирование
//				- /UPath <путь> (каталог с файлами где искать)
//				- /UMask <маска> (маска имени файла для отбора файлов)
//				- /UDestination <путь> (каталог с файлами, куда копировать)
//
//		+ /WriteFileAsErrorInConsole - вывод содержания файла в консоль и зарегистрировать как ошибку
//				- /File <путь к файлу> (файл содержание которого ошибки)
//
//		- /CheckConfig - проверка конфигурации средствами платформы
//				- /F <путь> (тип базы - файловая)
//				- /S <адрес> (тип базы - серверная, <Имя компьютера, работающего сервером приложений>\<Ссылочное имя информационной базы, известное в рамках сервера 1С:Предприятия 8>)
//				- /N (логин администратора ИБ, если не задан, то без логина)
//				- /P (пароль администратора ИБ)
//				- /UParams <параметры> - параметры проверки конфигурации "-ConfigLogIntegrity -IncorrectReferences -ThinClient -WebClient -Server -ExternalConnection –ExternalConnectionServer -MobileAppClient -MobileAppServer -ThickClientManagedApplication -ThickClientServerManagedApplication -ThickClientOrdinaryApplication -ThickClientServerOrdinaryApplication -DistributiveModules -UnreferenceProcedures -HandlersExistence -EmptyHandlers -ExtendedModulesCheck -CheckUseModality -UnsupportedFunctional -AllExtensions"
//
//		- /UpdateIB - принудительный запуск процедуры обновления ИБ с помощью Комконнектора (oscript "c:\work\uni\uni_script.os" /UpdateIB /F "c:\Base1C\vanessa\chistaya")
//				- /F <путь> (тип базы - файловая)
//				- /S <адрес> (тип базы - серверная, <Имя компьютера, работающего сервером приложений>\<Ссылочное имя информационной базы, известное в рамках сервера 1С:Предприятия 8>)
//				- /N (логин администратора ИБ, если не задан, то без логина)
//				- /P (пароль администратора ИБ)
//		+ /GetImageForMailing получает из конфигурации из макета ОписаниеИзмененийСистемы текст последнего обновления, ищет ссылки на видео в youtube и скачивает картинки-превью
//				- /F <путь> (тип базы - файловая)
//				- /S <адрес> (тип базы - серверная, <Имя компьютера, работающего сервером приложений>\<Ссылочное имя информационной базы, известное в рамках сервера 1С:Предприятия 8>)
//				- /N (логин администратора ИБ, если не задан, то без логина)
//				- /P (пароль администратора ИБ)
//				- /UPath куда сохранить
//				- /Maket имя общего макета для создания файла с новостями, если не определено, то равен "ОписаниеИзмененийСистемы"
//				- /Settings путь к файлу settings.ini
//				- /Section раздел файла settings.ini с настройками
//				- /SectionURL раздел файла settings.ini, где описаны ссылки
//		+ /MakeMailing получает из конфигурации из макета ОписаниеИзмененийСистемы текст последнего обновления и формирует макет рассылки в виде файла html
//				- /F <путь> (тип базы - файловая)
//				- /S <адрес> (тип базы - серверная, <Имя компьютера, работающего сервером приложений>\<Ссылочное имя информационной базы, известное в рамках сервера 1С:Предприятия 8>)
//				- /N (логин администратора ИБ, если не задан, то без логина)
//				- /P (пароль администратора ИБ)
//				- /UPath куда сохранить
//				- /Maket имя общего макета для создания файла с новостями, если не определено, то равен "ОписаниеИзмененийСистемы"
//				- /Settings путь к файлу settings.ini
//				- /Section раздел файла settings.ini с настройками
//				- /SectionURL раздел файла settings.ini, где описаны ссылки
//		+ /MakeUpdatesXmlZip собирает файл описания обновления updates.zip
//				- /UPath куда сохранить
//				- /File имя файла
//				- /UServer адрес FTP
//				- /N пользователь FTP
//				- /P пароль FTP
//				- /UPathFTP путь к папке на FTP
//				- /Settings путь к файлу settings.ini
//				- /Section раздел файла settings.ini с настройками
//				- /Catalog путь к каталогу с обновлениями
//				- /SITE_ID_PROGRAM префикс продукта, если на задан будет прочтен из файла настроек
//		+ /CreateZip - создает архив с файлами добавленные по маске.
//				- /File - имя архива.
//				- /UMask - строки с файлами добавленные с разделителем "|" (пример: C:\File\File1.txt|C:\File\*.zip )
//		- /BuildDistribEpfErf создание дистрибутива с внешней обработкой и файлами по шагам
//			1. Создание архива с обработкой и доп. файлами
//			Параметры запуска:
//				- /UPath - путь к архиву.
//				- /UMask - строки с файлами добавленные с разделителем "|" (пример: C:\File\File1.txt|C:\File\*.zip )
//				- /Settings путь к файлу settings.ini
//				- /Section раздел файла settings.ini с настройками
//				- /SectionURL секция с URL
//				- /SITE_ID_PROGRAM - префикс продукта, если на задан будет прочтен из файла настроек
//		+ /ConvertChangeLog получает из файла Changelog.md текст последнего обновления для сайта и сохраняет его в файл
//				- /F <путь> (тип базы - файловая)
//				- /S <адрес> (тип базы - серверная, <Имя компьютера, работающего сервером приложений>\<Ссылочное имя информационной базы, известное в рамках сервера 1С:Предприятия 8>)
//				- /N (логин администратора ИБ, если не задан, то без логина)
//				- /P (пароль администратора ИБ)
//				- /UPath куда сохранить
//				- /Settings
//				- /Section
//				- /SectionURL
//		+ /GetVideoPreviewFromMarkDown получает из файла MarkDown ссылки на видео в youtube и скачивает картинки-превью
//		+ /MakeMailingFiles получает из конфигурации из макета ОписаниеИзмененийСистемы текст последнего обновления и формирует макет рассылки в виде файла html
//				- /UFile <путь> (тип базы - файловая)
//				- /UBody <адрес> (тип базы - серверная, <Имя компьютера, работающего сервером приложений>\<Ссылочное имя информационной базы, известное в рамках сервера 1С:Предприятия 8>)
//				- /UHeader (логин администратора ИБ, если не задан, то без логина)
//				- /UFooter (пароль администратора ИБ)
//				- /Settings путь к файлу settings.ini
//				- /Section раздел файла settings.ini с настройками
//				- /SectionURL раздел файла settings.ini, где описаны ссылки
//
//		+ /CheckVanessaErrors проверка файлов Vanessa Automation
//				- /UFile <путь к файлу> - имя log-файла
//				- /ReturnErrors - признак того, что нужно собрать список расположений упавших тестов (необязательный параметр).
//				- /UPath - путь куда необходимо сохранить файл полных путей к упавшим тестам. Если указан параметр /ReturnErrors, тогда параметр /UPath обязателен.
//				- /Fall - признак остановки папйплайна в случае обнаружения ошибок ВА.
//		
//		+ /TaskKill завершение всех запущенных процессов 1С по указанной маске наименования процесса 
//				- /Title наименование запущенного процесса 1С (маска наименования должна задаваться как в диспетчере задач)
//
//		+ /RunVanessaAutomation запуск тестов используя Vanessa Automation
//				- /F <путь> (тип базы - файловая)
//				- /S <адрес> (тип базы - серверная, <Имя компьютера, работающего сервером приложений>\<Ссылочное имя информационной базы, известное в рамках сервера 1С:Предприятия 8>)
//				- /N (логин администратора ИБ, если не задан, то без логина)
//				- /P (пароль администратора ИБ)
//				- /VanessaEpf путь к файлу Epf Vanessa Automation
//				- /VanessaSettings раздел файла settings.ini с настройками
//				- /Workspace параметры запуска %V83PATH% /Execute C:\vanessa-automation\vanessa-automation.epf /TESTMANAGER /C"StartFeaturePlayer;VBParams=C:\VBParams.json"
//				- /Asynch - признак того, что необходимо запускать VA в ассинхронном режиме не дожидаясь завершения.
//	
//		/FileCheckSum - возвращает MD5 (контрольную сумму) файла
//				- /FileName - имя файла
//		
//		/ FolderCheckSum - возвращает MD5 (контрольную сумму) по файлам в папке
//				- /Folder - папка с файлами
//				- /Mask - расширение для поиска файлов
//
//		/ConfigVersionFromEdtSrc
//				- /FolderName - папка с исходниками, в которой будет осуществлен поиск
//				- /Version - регулярное выражение шаблон версии вида "[0-9]*\.[0-9]*\.[0-9]*"
//
//		/StartDebugFile - запускает файл отладчика для файловых баз.
//				- /Settings - путь к файлу settings.ini.
//				- /Section - раздел файла settings.ini с настройками. 
//				- /DebugURL - адес отладчика.
//				- /Port - порт отладки.
//
//		/StartCoverage41C - запускает утилиту для анализа покрытия кода тестами. 
//				- /DebugURL адрес отладчика, например, http://127.0.0.1:1550/.
//				- /FilesProject путь к файлам проекта.
//				- /FileName имя создаваемого файла после завершения анализа прокрытия.
//				- /Settings - путь к файлу settings.ini.
//				- /Section - раздел файла settings.ini с настройками. 
//
//		/StopCoverage41C - выключает утилиту для анализа покрытия кода тестами.
//				- /DebugURL адрес отладчика, например, http://127.0.0.1:1550/.
//		
//		/CreateSettingsFileVanessaAutomation - формирует новый файл настроек ванессы automation.
//				- /ParamsVA - строка параметров настроек, строка должна жестко соблюдать последовательность значений настроек, разделяя каждый параметр символом "&". 
//							  Если значение параметра состоит из списка, тогда данные значения нужно перечислять через символ "|".
//							  Строка параметров содержит 4 обязательных параметра, которые всегда должны передаваться в жесткой последовательности, как это показано в примере шаблона,
//							  но также есть возможность расширить список параметров, передавая их всегда в конец. При этом нужно помнить, что необходимо дописать код вычисления добавленного параметра
//							  и его непосредственное заполнение в текст самих настроек.
//
//							  Шаблон строки параметров: /ParamsVA "<ВерсияВанессы>&<ТипОтладки>&<АдресОтладки>&<ТегиИсключения>|<ТегиИсключения>&<ТегиОтборов>|<ТегиОтборов>"
//							  Пример строки параметров: /ParamsVA "1.2.038.1&-http&http://localhost:1550&IgnoreOnCIMainBuild|FirstStart|Draft&Test1|Test2|Test3"
//				- /UPath - путь куда необходимо сохранить сформированный файл настроек.
//				- /Prefix - префикс сформированного файла настроек. Данный параметр необходим для сохранения уникального файла настроек каждого запуска Ванессы.
//		
//		/MergeLogsVanessaAutomation - Объединяет несколько файлов логов ванессы в один и сохраняет в нужный каталог.
//				- /ParamsVA - путь где необходимо искать файлы логов.
//				- /UPath - путь куда необходимо сохранить.
//				- /FileName - имя итогового файла.
//		/MergeCoverage41CFiles - Объединяет несколько файлов отчетов анализа покрытия Coverage41C в один.
//				- /Catalog - путь где необходимо искать файлы отчетов.
//				- /UPath - путь куда необходимо сохранить.
//				- /FileName - имя итогового файла.
//				- /UMask - маска поиска файлов.
//			
//		/CreateMaileTemplate - Создает шаблон для е-mail рассылки.
//				- /F <путь> (тип базы - файловая)
//				- /S <адрес> (тип базы - серверная, <Имя компьютера, работающего сервером приложений>\<Ссылочное имя информационной базы, известное в рамках сервера 1С:Предприятия 8>)
//				- /N (логин администратора ИБ, если не задан, то без логина)
//				- /P (пароль администратора ИБ)
//				- /UPath куда сохранить
//				- /Maket имя общего макета для создания файла с новостями, если не определено, то равен "ОписаниеИзмененийСистемы"
//				- /Settings путь к файлу settings.ini
//				- /Section раздел файла settings.ini с настройками
//				- /SectionURL раздел файла settings.ini, где описаны ссылки
//
//		/SendMailOnApiSendSay - Выполняет отправку сформированного шаблона рассылки на сервис SendSay с использованием их API. Подробности про API(https://sendsay.ru/api/api.html).
//				- /UPath <путь> - Путь к файлу готового шаблона рассылки в формате *.html.
//				- /KeyAPI <секретный ключ> - Секретный ключ, который генерируется у пользователя SendSay, по которому будет осуществлена авторизация в API(https://sendsay.ru/api/api.html#%D0%90%D0%B2%D1%82%D0%BE%D1%80%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F-%D0%BF%D0%BE-%D0%BA%D0%BB%D1%8E%D1%87%D1%83-api)
//				- /ID <номер шаблона> - идентификатор шаблона рассылки, который необходимо изменить, посмотреть можно в адресе на сайте: https://app.sendsay.ru/content/drafts/email/<<<<<<75>>>>>/summary
//				- /Name <имя шаблона> - наименование шаблона рассылки.
//				- /IDSegment <id сегмента> - идентификатор сегмента получателей рассылки.
//

#Использовать v8runner
#Использовать cmdline
#Использовать logos
#Использовать tempfiles
#Использовать ftp
#Использовать gitrunner
#Использовать 1connector
//#Использовать verbal-expressions

Перем Конфигуратор;
Перем Парсер;
Перем Параметры;
Перем ГитРепозиторий;
Перем КодВозврата;
Перем Лог;

Процедура ЗадатьНачальныеНастройки()	
	
	КодВозврата 	= 0;
	Конфигуратор 	= Новый УправлениеКонфигуратором();
	Парсер 			= Новый ПарсерАргументовКоманднойСтроки();
	Параметры		= ЗаполнитьПараметры();
	ГитРепозиторий 	= Новый ГитРепозиторий();
	
	Лог 			= Логирование.ПолучитьЛог("oscript.app.uni_script");
	Лог.УстановитьРаскладку(ЭтотОбъект);	
	
	Если АргументыКоманднойСтроки.Количество() = 0 Тогда		
		Лог.Ошибка("Не заданы аргументы командной строки!");
		КодВозврата = 1;
		ЗавершитьРаботу(1);
	КонецЕсли;	
	
КонецПроцедуры

Функция ЗаполнитьПараметры()
	
	Парсер.ДобавитьПараметр("ИмяКоманды"); 								
	Парсер.ДобавитьИменованныйПараметр("/PlatformVersion");
	Парсер.ДобавитьИменованныйПараметр("/F");
	Парсер.ДобавитьИменованныйПараметр("/S");
	Парсер.ДобавитьИменованныйПараметр("/N");
	Парсер.ДобавитьИменованныйПараметр("/P");
	Парсер.ДобавитьИменованныйПараметр("/CN");
	Парсер.ДобавитьИменованныйПараметр("/CP");
	Парсер.ДобавитьИменованныйПараметр("/UC");
	Парсер.ДобавитьИменованныйПараметр("/Format");
	Парсер.ДобавитьИменованныйПараметр("/UCMsg");
	Парсер.ДобавитьИменованныйПараметр("/LOG");
	Парсер.ДобавитьИменованныйПараметр("/UTime");
	Парсер.ДобавитьИменованныйПараметр("/UPath");
	Парсер.ДобавитьИменованныйПараметр("/LockBegin");
	Парсер.ДобавитьИменованныйПараметр("/LockEnd");
	Парсер.ДобавитьИменованныйПараметр("/UCount");
	Парсер.ДобавитьИменованныйПараметр("/Pref");
	Парсер.ДобавитьИменованныйПараметр("/UMask");
	Парсер.ДобавитьИменованныйПараметр("/NVer");
	Парсер.ДобавитьИменованныйПараметр("/NVerRab");
	Парсер.ДобавитьИменованныйПараметр("/VerPL");
	Парсер.ДобавитьИменованныйПараметр("/UPathFTP");
	Парсер.ДобавитьИменованныйПараметр("/UServer");
	Парсер.ДобавитьИменованныйПараметр("/ConfigurationRepositoryF");
	Парсер.ДобавитьИменованныйПараметр("/ConfigurationRepositoryN");
	Парсер.ДобавитьИменованныйПараметр("/ConfigurationRepositoryP");
	Парсер.ДобавитьИменованныйПараметр("/Legal");
	Парсер.ДобавитьИменованныйПараметр("/NeedVerPL");
	Парсер.ДобавитьИменованныйПараметр("/Maket");
	Парсер.ДобавитьИменованныйПараметр("/Catalog");
	Парсер.ДобавитьИменованныйПараметр("/Branch");
	Парсер.ДобавитьИменованныйПараметр("/Project");
	Парсер.ДобавитьИменованныйПараметр("/ConfigurationFiles");
	Парсер.ДобавитьИменованныйПараметр("/WorkspaceLocation");
	Парсер.ДобавитьИменованныйПараметр("/Version");
	Парсер.ДобавитьИменованныйПараметр("/Destination");
	Парсер.ДобавитьИменованныйПараметр("/DestinationDemo");
	Парсер.ДобавитьИменованныйПараметр("/Vendor");
	Парсер.ДобавитьИменованныйПараметр("/Name");	
	Парсер.ДобавитьИменованныйПараметр("/File");
	Парсер.ДобавитьИменованныйПараметр("/FileHTML");
	Парсер.ДобавитьИменованныйПараметр("/FileTXT");
	Парсер.ДобавитьИменованныйПараметр("/FileURL");
	Парсер.ДобавитьИменованныйПараметр("/FileZIP");	
	Парсер.ДобавитьИменованныйПараметр("/URL");	
	Парсер.ДобавитьИменованныйПараметр("/IDProgram");	
	Парсер.ДобавитьИменованныйПараметр("/IDCatalog");
	Парсер.ДобавитьИменованныйПараметр("/ErrorFile");
	Парсер.ДобавитьИменованныйПараметр("/Params");
	Парсер.ДобавитьИменованныйПараметр("/Versions");
	Парсер.ДобавитьИменованныйПараметр("/CommonFiles");
	Парсер.ДобавитьИменованныйПараметр("/Scenario");
	Парсер.ДобавитьИменованныйПараметр("/EMail");
	Парсер.ДобавитьИменованныйПараметр("/Prefix");
	Парсер.ДобавитьИменованныйПараметр("/Title");
	Парсер.ДобавитьИменованныйПараметр("/ObfuscateFile");
	Парсер.ДобавитьИменованныйПараметр("/ApiKey");
	Парсер.ДобавитьИменованныйПараметр("/Settings");
	Парсер.ДобавитьИменованныйПараметр("/Section");
	Парсер.ДобавитьИменованныйПараметр("/SectionURL");
	Парсер.ДобавитьИменованныйПараметр("/News");
	Парсер.ДобавитьИменованныйПараметр("/Action");
	Парсер.ДобавитьИменованныйПараметр("/ThisDescriptionFutureVersion");
	Парсер.ДобавитьИменованныйПараметр("/UDestination");
	Парсер.ДобавитьИменованныйПараметр("/UParams");
	Парсер.ДобавитьИменованныйПараметр("/UHeader");
	Парсер.ДобавитьИменованныйПараметр("/UFooter");
	Парсер.ДобавитьИменованныйПараметр("/UBody");
	Парсер.ДобавитьИменованныйПараметр("/UFile");
	Парсер.ДобавитьИменованныйПараметр("/Workspace");
	Парсер.ДобавитьИменованныйПараметр("/VanessaSettings");
	Парсер.ДобавитьИменованныйПараметр("/VanessaEpf");
	Парсер.ДобавитьИменованныйПараметр("/Extension");
	Парсер.ДобавитьИменованныйПараметр("/SITE_ID_PROGRAM");
	Парсер.ДобавитьИменованныйПараметр("/SITE_ID_CATALOG");
	Парсер.ДобавитьИменованныйПараметр("/SITE_NEWS_IBLOCK_SECTION_ID");
	Парсер.ДобавитьИменованныйПараметр("/PREVIEW_PICTURE");
	Парсер.ДобавитьИменованныйПараметр("/FileName");
	Парсер.ДобавитьИменованныйПараметр("/FolderName");
	Парсер.ДобавитьИменованныйПараметр("/Port");
	Парсер.ДобавитьИменованныйПараметр("/DebugURL");
	Парсер.ДобавитьИменованныйПараметр("/FilesProject");
	Парсер.ДобавитьИменованныйПараметр("/ParamsVA");
	Парсер.ДобавитьИменованныйПараметр("/ReturnErrors");
	Парсер.ДобавитьИменованныйПараметр("/Asynch");
	Парсер.ДобавитьИменованныйПараметр("/Fall");
	Парсер.ДобавитьИменованныйПараметр("/KeyAPI");
	Парсер.ДобавитьИменованныйПараметр("/ID");
	Парсер.ДобавитьИменованныйПараметр("/IDSegment");
	
	Возврат Парсер.Разобрать(АргументыКоманднойСтроки);
	
КонецФункции

Функция Форматировать(Знач Уровень, Знач Сообщение) Экспорт

    Возврат СтрШаблон("%1: %2 - %3", ТекущаяДата(), УровниЛога.НаименованиеУровня(Уровень), Сообщение);

КонецФункции

Процедура ВыполнитьКоманду()
	
	ИмяКоманды 			= Параметры["ИмяКоманды"];
	ПутьКБазеСерверной 	= Параметры["/S"];
	ПутьКБазеФайловой 	= Параметры["/F"];
	
	ВРегИмяКоманды		= ВРег(ИмяКоманды);
	
	Если ВРегИмяКоманды = "/RESTOREIB" Тогда		
		Если ЗначениеЗаполнено(ПутьКБазеСерверной) Тогда
			УстановитьБлокировкуСеансов();
			ПрерватьСеансыПользователей();
			ЗагрузитьИБИзФайла();
			СнятьБлокировкуСеансов();
		Иначе
			ЗагрузитьИБИзФайла();		
		КонецЕсли;		
	
	ИначеЕсли ВРегИмяКоманды = "/DUMPIB" Тогда
		Если ЗначениеЗаполнено(ПутьКБазеСерверной) Тогда
			УстановитьБлокировкуСеансов();
			ПрерватьСеансыПользователей();
			ВыгрузитьИБВФайл();			
			СнятьБлокировкуСеансов();
			юсУдалитьФайлы();
		Иначе
			ВыгрузитьИБВФайл();
		КонецЕсли;			
	
	ИначеЕсли ВРегИмяКоманды = "/DUMPCONFIGTOFILES" Тогда
		ВыгрузитьКонфигурациюВКаталог();			
	
	ИначеЕсли ВРегИмяКоманды = "/LOCK" Тогда
		УстановитьБлокировкуСеансов();		
	
	ИначеЕсли ВРегИмяКоманды = "/UNLOCK" Тогда
		СнятьБлокировкуСеансов();		
	
	ИначеЕсли ВРегИмяКоманды = "/TERMINATE" Тогда
		ПрерватьСеансыПользователей();		
	
	ИначеЕсли ВРегИмяКоманды = "/CLEAROLDFILES" Тогда
		юсУдалитьФайлы();		
	
	ИначеЕсли ВРегИмяКоманды = "/TESTUPDATE" Тогда 
		СоздатьВременныеИБ();	

	ИначеЕсли ВРегИмяКоманды = "/COPYFTP" Тогда 
		КопироватьНаFTP();

	ИначеЕсли ВРегИмяКоманды = "/BUILDDISTRIBREPO" Тогда 
		СоздатьДистрибутивИзХранилища();

	ИначеЕсли ВРегИмяКоманды = "/SAVELASTCONFIGUPDATETEXT" Тогда 
		ПолучитьОписаниеОбновленияИзМакета();

	ИначеЕсли ВРегИмяКоманды = "/CONFIGURATIONREPOSITORYUPDATECFG" Тогда 
		ОбновитьКонфигурациюИзХранилища();
	
	ИначеЕсли ВРегИмяКоманды = "/LOADCONFIGFROMFILES" Тогда 
		ОбновитьКонфигурациюИзКаталога();
	
	ИначеЕсли ВРегИмяКоманды = "/LOADEXTENSIONFROMFILES" Тогда
		ЗагрузитьРасширениеИзФайлов();
	
	ИначеЕсли ВРегИмяКоманды = "/SAVEEXTENSIONINFILE" Тогда
		СохранитьРасширениеВФайл();
	
	ИначеЕсли ВРегИмяКоманды = "/GITLOAD" Тогда 
		GitПерейтиВВеткуИПолучить();

	ИначеЕсли ВРегИмяКоманды = ВРег("/EdtProjectExportToConfigFiles") Тогда 
		ЭкспортПроектаEDTВXML();
	
	ИначеЕсли ВРегИмяКоманды = ВРег("/CreateInfoBase") Тогда 
		СоздатьИнформационнуюБазу();

	ИначеЕсли ВРегИмяКоманды = "/BUILDDISTRIB" Тогда 
		СоздатьДистрибутив();
	
	ИначеЕсли ВРегИмяКоманды = ВРег("/Save1cv8_mft") Тогда 
		Создать_1cv8_mft();
	
	ИначеЕсли ВРегИмяКоманды = ВРег("/SaveInstall_edf") Тогда 
		Создать_Install_edf();

	ИначеЕсли ВРегИмяКоманды = ВРег("/SetURLS") Тогда 
		УстановитьURLы();	
	
	ИначеЕсли ВРегИмяКоманды = ВРег("/SendNews") Тогда 
		ОтправкаНовостейНаСайт();
	
	ИначеЕсли ВРегИмяКоманды = ВРег("/StartTest") Тогда 
		ЗапускТестовойСреды();

	ИначеЕсли ВРегИмяКоманды = ВРег("/TaskKill") Тогда 
		ЗавершитьПроцесс();

	ИначеЕсли ВРегИмяКоманды = ВРег("/Obfuscate") Тогда 
		ОбфусцироватьФайл();

	ИначеЕсли ВРегИмяКоманды = ВРег("/FindFilesAndCopy") Тогда 
		СкопироватьФайлыПоМаске();

	ИначеЕсли ВРегИмяКоманды = ВРег("/WriteFileAsErrorInConsole") Тогда 
		ВывестиСодержаниеФайлаВКонсольКакОшибки();
	
	ИначеЕсли ВРегИмяКоманды = ВРег("/CheckConfig") Тогда
		ПроверкаКонфигурации();

	ИначеЕсли ВРегИмяКоманды = ВРег("/UpdateIB") Тогда
		ВыполнитьОбновлениеИБ();
	
	ИначеЕсли ВРегИмяКоманды = ВРег("/MakeMailing") Тогда
		ПодготовитьТекстРассылки();

	ИначеЕсли ВРегИмяКоманды = ВРег("/MakeMailingMD") Тогда
		ПодготовитьТекстРассылкиMDФайла();

	ИначеЕсли ВРегИмяКоманды = ВРег("/GetImageForMailing") Тогда
		ПолучитьКартинкиДляРассылки();	
	
	ИначеЕсли ВРегИмяКоманды = ВРег("/DownLoadFTP") Тогда 
		СкачатьФайлыСFTP();	
	
	ИначеЕсли ВРегИмяКоманды = ВРег("/MakeUpdatesXmlZip") Тогда
		ПодготовитьФайлОписанияОбновления();

	ИначеЕсли ВРегИмяКоманды = ВРег("/CreateZip") Тогда
		СоздатьZipАрхив();

	ИначеЕсли ВРегИмяКоманды = ВРег("/BuildDistribEpfErf") Тогда
		СоздатьДистрибутивОтчетаИлиОбработки();

	ИначеЕсли ВРегИмяКоманды = ВРег("/ConvertChangeLog") Тогда 
		ПолучитьОписаниеОбновленияИзChangeLog();

	ИначеЕсли ВРегИмяКоманды = ВРег("/GetVideoPreviewFromMarkDown") Тогда
		ПолучитьПревьюВидеоИзФайлаMarkDown();

	ИначеЕсли ВРегИмяКоманды = ВРег("/CheckVanessaErrors") Тогда
		ПроверитьОшибкиТетсированияVanessaAutomation();

	ИначеЕсли ВРегИмяКоманды = ВРег("/RunVanessaAutomation") Тогда
		ЗапускVanessaAutomation();

	ИначеЕсли ВРегИмяКоманды = ВРег("/FileCheckSum") Тогда
		КонтрольнаяСуммаФайла();

	ИначеЕсли ВРегИмяКоманды = ВРег("/FolderCheckSum") Тогда
		КонтрольнаяСуммаПапки();

	ИначеЕсли ВРегИмяКоманды = ВРег("/ConfigVersionFromEdtSrc") Тогда
		ВерсияКонфигурацииEDT();

	ИначеЕсли ВРегИмяКоманды = ВРег("/StartDebugFile") Тогда
		ЗапуститьФайлОтладчика();
	
	ИначеЕсли ВРегИмяКоманды = ВРег("/StartCoverage41C") Тогда
		ВключитьАнализПокрытияКодаТестами();

	ИначеЕсли ВРегИмяКоманды = ВРег("/StopCoverage41C") Тогда
		ОтключитьАнализПокрытияКодаТестами();
	
	ИначеЕсли ВРегИмяКоманды = ВРег("/CreateSettingsFileVanessaAutomation") Тогда
		СформироватьФайлНастроекVanessaAutomation();

	ИначеЕсли ВРегИмяКоманды = ВРег("/MergeLogsVanessaAutomation") Тогда
		ОбъединитьЛогиВОдинФайл();
	
	ИначеЕсли ВРегИмяКоманды = ВРег("/MergeCoverage41CFiles") Тогда
		ОбъединитьCoverage();

	ИначеЕсли ВРегИмяКоманды = ВРег("/CreateMaileTemplate") Тогда
		СоздатьШаблонПочтовойРассылкиОбновления();

	ИначеЕсли ВРегИмяКоманды = ВРег("/SendMailOnApiSendSay") Тогда
		ОтправитьШаблонРассылкиВSendSay();

	КонецЕсли;
	
КонецПроцедуры

// Производит замену по регулярному выражению
//	Параметры:
//		ИсходнаяСтрока - Строка - исходная строка
//		РегулярноеВыражение - Строка - регулярное выражение
//		СтрокаЗамены - Строка - строка замены
// Возвращаемой значение:
//		Строка - строка с учетом замены.
// Пример:
//	ЗаменитьПоРегулярномуВыражению("**жирный**", "(\*\*)(.*)(\*\*)", "<b>$2</b>") вернет <b>жирный</b>
// Подробнее о работе в: https://snegopat.ru/scripts/doc/trunk/rex/readme.markdown
//
Функция ЗаменитьПоРегулярномуВыражению(ИсходнаяСтрока, РегулярноеВыражение, СтрокаЗамены)

	РегВыражение = Новый РегулярноеВыражение(РегулярноеВыражение);
	РегВыражение.ИгнорироватьРегистр = Истина;
	РегВыражение.Многострочный = Истина;
	Возврат РегВыражение.Заменить(ИсходнаяСтрока, СтрокаЗамены);

КонецФункции

// Производит поиск регулярного выражения в тексте и возвращает массив строк
//	Параметры:
//		ИсходнаяСтрока - Строка - исходная строка
//		РегулярноеВыражение - Строка - регулярное выражение
// Возвращаемой значение:
//		Массив - массив с учетом реглулярного выражения
// Пример:
//	НайтиПоРегулярномуВыражению("**жирный**", "\*\*(.*)\*\*") вернет массив из 1 элемента жирный
// Подробнее о работе в: https://snegopat.ru/scripts/doc/trunk/rex/readme.markdown
//
Функция НайтиПоРегулярномуВыражению(ИсходнаяСтрока, РегулярноеВыражение)

	РегВыражение = Новый РегулярноеВыражение(РегулярноеВыражение);
	РегВыражение.ИгнорироватьРегистр = Истина;
	РегВыражение.Многострочный = Истина;
	Возврат РегВыражение.Разделить(ИсходнаяСтрока);

КонецФункции

Процедура ИнициализацияСистемныхПеременных()

	СтрокаПодключения 		= "";
	ПутьКБазе				= "";	
	ИмяАдминистратораИБ 	= ?(Параметры["/N"] <> Неопределено, Параметры["/N"], "");
	ПарольАдминистратораИБ 	= ?(Параметры["/P"] <> Неопределено, Параметры["/P"], "");
	КодРазрешения			= ?(Параметры["/UC"] <> Неопределено, Параметры["/UC"], "");
	
	Если Параметры["/PlatformVersion"] <> Неопределено Тогда
		Конфигуратор.ИспользоватьВерсиюПлатформы(Параметры["/PlatformVersion"]);
	КонецЕсли;
	
	Если Параметры["/S"] <> Неопределено Тогда
		мПутьКБазе			= Параметры["/S"];
		ИмяСервера 			= Лев(мПутьКБазе, Найти(мПутьКБазе,"\") - 1);
		ИмяБазы				= Прав(мПутьКБазе, СтрДлина(мПутьКБазе) - Найти(мПутьКБазе,"\"));
		ПутьКБазе			= "/S""" + мПутьКБазе + """";				
		СтрокаПодключения	= "Srvr=""" + ИмяСервера + """;Ref=""" + ИмяБазы + """;";
		Лог.Информация("Начало работы с базой """ + ИмяБазы + """");
	Иначе
		ПутьКБазе			= "/F""" + Параметры["/F"] + """";
		СтрокаПодключения	= "File=""" + Параметры["/F"] + """;";		
		Если ПутьКБазе<> "/F""""" Тогда 
			Лог.Информация("Начало работы с базой """ + Параметры["/F"] + """");
		КонецЕсли;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяАдминистратораИБ) Тогда
		СтрокаПодключения = СтрокаПодключения + "Usr=""" + ИмяАдминистратораИБ + """;";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПарольАдминистратораИБ) Тогда
		СтрокаПодключения = СтрокаПодключения + "Pwd=""" + ПарольАдминистратораИБ + """;";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПутьКБазе) Тогда		
		Конфигуратор.УстановитьКонтекст(ПутьКБазе, ИмяАдминистратораИБ, ПарольАдминистратораИБ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КодРазрешения) Тогда 
		СтрокаПодключения = СтрокаПодключения + "UC=""" + КодРазрешения + """;";
		Конфигуратор.УстановитьКлючРазрешенияЗапуска(КодРазрешения);
	КонецЕсли;
	
	Попытка
		СтрокаПодключения = Сред(СтрокаПодключения, 1, СтрДлина(СтрокаПодключения) - 1);	
	Исключение
	КонецПопытки;
	
	Параметры.Вставить("ПутьКБазе", 		ПутьКБазе);	
	Параметры.Вставить("СтрокаПодключения", СтрокаПодключения);	
	Параметры.Вставить("ИмяСервера", 		ИмяСервера);
	Параметры.Вставить("ИмяБазы", 			ИмяБазы);
	
КонецПроцедуры

Функция ДополнитьСтрокуСлешем(Знач Стр)
	
	Если ПустаяСтрока(Стр) Тогда
		Возврат "\";
	КонецЕсли;
	
	Возврат Стр + ?(Прав(Стр, 1) = "\", "", "\");
	
КонецФункции

Функция УбратьВСтрокеСлешВКонце(Знач Стр)
	
	Если НЕ ПустаяСтрока(Стр) Тогда
		Если Прав(Стр, 1) = "\" ИЛИ Прав(Стр, 1) = "/" Тогда
			Возврат Лев(Стр, СтрДлина(Стр) - 1);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Стр;	
	
КонецФункции

Процедура УстановитьБлокировкуСеансов()
	
	Соединение 			= Неопределено;
	СтрокаПодключения 	= Параметры["СтрокаПодключения"];
	ВремяНачала			= Параметры["/LockBegin"];
	ВремяОкончания		= Параметры["/LockEnd"];
	КодРазрешения		= Параметры["/UC"];
	Сообщение			= Параметры["/UCMsg"];
	V8 					= Новый COMObject("V83.COMConnector");
	
	Попытка
		Соединение 				= V8.Connect(СтрокаПодключения);
		Блокировка 				= Соединение.NewObject("БлокировкаСеансов");
		Блокировка.Установлена	= Истина;

		Если ЗначениеЗаполнено(ВремяНачала) Тогда
			Блокировка.Начало 	= ВремяНачала;
		Иначе
			Блокировка.Начало 	= ТекущаяДата();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВремяОкончания) Тогда
			Блокировка.Конец 	= ВремяОкончания;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(КодРазрешения) Тогда 
			Блокировка.КодРазрешения= КодРазрешения;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Сообщение) Тогда	
			Блокировка.Сообщение= Сообщение;
		КонецЕсли;	
		
		Соединение.УстановитьБлокировкуСеансов(Блокировка);
		
		Лог.Информация("Блокировка сеансов установлена");
	Исключение
		Лог.Ошибка("При установке блокировки возникла ошибка: " + ОписаниеОшибки());
		КодВозврата = 2;
	КонецПопытки;
	
	Если Соединение <> Неопределено Тогда
		Попытка
			ОсвободитьОбъект(Соединение);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Если V8 <> Неопределено Тогда
		Попытка
			ОсвободитьОбъект(V8);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	ВыполнитьСборкуМусора();
	
КонецПроцедуры

Процедура ПрерватьСеансыПользователей()
	
	ИмяСервера					= Параметры["ИмяСервера"];	
	ИмяБазы						= Параметры["ИмяБазы"];
	ИмяАдминистратораИБ			= Параметры["/N"];
	ПарольАдминистратораИБ 		= Параметры["/P"];	
	ИмяАдминистратораКластера 	= Параметры["/CN"];
	ПарольАдминистратораКластера= Параметры["/CP"];
	ВремяПростоя				= Параметры["/UTime"];
	Соединение 					= Неопределено;
	V8 							= Новый COMObject("V83.COMConnector");	
	Попытка		
		Агент 	 = V8.ConnectAgent(ИмяСервера);
		Кластеры = Агент.GetClusters();
		Для Каждого Кластер из Кластеры Цикл
			
			Если ЗначениеЗаполнено(ИмяАдминистратораКластера) И ЗначениеЗаполнено(ПарольАдминистратораКластера) Тогда
				Агент.Authenticate(Кластер, ИмяАдминистратораКластера, ИмяАдминистратораКластера);
			ИначеЕсли ЗначениеЗаполнено(ИмяАдминистратораКластера) Тогда
				Агент.Authenticate(Кластер,ИмяАдминистратораКластера,"");
			Иначе 
				Агент.Authenticate(Кластер,"","");
			КонецЕсли;
			
			Процессы = Агент.GetWorkingProcesses(Кластер);
			
			Для Каждого Процесс из Процессы Цикл
				Порт 	= Процесс.MainPort;
				// теперь есть адрес и порт для подключения к рабочему процессу
				РабПроц = V8.ConnectWorkingProcess(ИмяСервера + ":" + СтрЗаменить(Порт, Символы.НПП, ""));
				РабПроц.AddAuthentication(ИмяАдминистратораИБ, ПарольАдминистратораИБ);
				ИнформационнаяБаза = "";
				Базы 	= Агент.GetInfoBases(Кластер);				
				Для Каждого База из Базы Цикл
					Если ВРег(База.Name) = ВРег(ИмяБазы) Тогда
						ИнформационнаяБаза = База;
						Прервать;
					КонецЕсли;
				КонецЦикла;				
				
				Если ИнформационнаяБаза = "" Тогда
					Лог.Ошибка("ИБ не найдена!");
					КодВозврата = 3;
					ЗавершитьРаботу(КодВозврата);
				КонецЕсли;				
				
				Сеансы = Агент.GetInfoBaseSessions(Кластер, ИнформационнаяБаза);
				Для Каждого Сеанс из Сеансы Цикл					
					Если нРег(Сеанс.AppID) = "comconsole" Тогда					
						Продолжить;
					КонецЕсли;
										
					Если ЗначениеЗаполнено(ВремяПростоя) Тогда						
						КонтрольнаяДата = ТекущаяДата() - Число(ВремяПростоя);
						Если Сеанс.LastActiveAt < КонтрольнаяДата Тогда
							Агент.TerminateSession(Кластер, Сеанс);
							Лог.Информация("Сеанс " + Сеанс.UserName + " " + Сеанс.AppID + " отключен");		
						КонецЕсли;
					Иначе
						Агент.TerminateSession(Кластер, Сеанс);
						Лог.Информация("Сеанс " + Сеанс.UserName +" " + Сеанс.AppID +" отключен");		
					КонецЕсли;					
				КонецЦикла;
				
				Шаблон 	 		= РабПроц.CreateInfoBaseInfo();
				Шаблон.Name 	= ИмяБазы;
				СоединенияБазы 	= РабПроц.GetInfoBaseConnections(Шаблон); 
								
				// Разорвать соединения клиентских приложений.
				Если Не ЗначениеЗаполнено(ВремяПростоя) Тогда
					Для Каждого мСоединение Из СоединенияБазы Цикл
						Если нРег(мСоединение.AppID) = "designer" Тогда 
							Продолжить;
						КонецЕсли;
						Попытка
							РабПроц.Disconnect(мСоединение);
							Лог.Информация("Соединение " + мСоединение.UserName + " " +мСоединение.AppID+ " отключено");
						Исключение
							Лог.Ошибка("Ошибка при отключении соединения: " + ОписаниеОшибки());
							КодВозврата = 4;
						КонецПопытки;					
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;		
	Исключение
		Лог.Ошибка("Не удалось установить соединение!" + ОписаниеОшибки());
		КодВозврата = 5;
	КонецПопытки;
	
	Если Соединение <> Неопределено Тогда 
		Попытка
			ОсвободитьОбъект(Соединение);
		Исключение
		КонецПопытки;
	КонецЕсли;	
	
	Если V8 <> Неопределено Тогда
		Попытка
			ОсвободитьОбъект(V8);
		Исключение
		КонецПопытки;	
	КонецЕсли;
	
	ВыполнитьСборкуМусора();
	Лог.Информация("Завершение сеансов выполнено");
	
КонецПроцедуры

Процедура ЗагрузитьИБИзФайла()		
	
	ПутьСохранения 		= Параметры["/UPath"];	
	ПараметрыЗапуска 	= Конфигуратор.ПолучитьПараметрыЗапуска();	
	ПараметрыЗапуска.Добавить("/RestoreIB " + ПутьСохранения);	
	Лог.Информация("Начало загрузки...");
	Попытка	
	    Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска);
		Лог.Информация("Загрузка завершена");
	Исключение												   
		Лог.Ошибка("Произошла ошибка при загрузке " + Конфигуратор.ВыводКоманды());
		КодВозврата = 6;
	КонецПопытки
	
КонецПроцедуры

Процедура ВыгрузитьИБВФайл()		
	
	ПутьСохранения 				= Параметры["/UPath"];	
	ФорматИмениРезервнойКопии 	= ?(Параметры["/Format"] <> Неопределено, Параметры["/Format"], "yyyyMMddHHmmss");
	ИмяБазы						= Параметры["ИмяБазы"];
	Префикс						= Параметры["/Pref"];

	Если ЗначениеЗаполнено(Префикс) Тогда
		ПолныйПутьСохранения 	= ДополнитьСтрокуСлешем(ПутьСохранения) + Префикс + Формат(ТекущаяДата(), "ДФ=" + ФорматИмениРезервнойКопии) + ".dt";
	Иначе
		ПолныйПутьСохранения 	= ДополнитьСтрокуСлешем(ПутьСохранения) + ИмяБазы + Формат(ТекущаяДата(), "ДФ=" + ФорматИмениРезервнойКопии) + ".dt";
	КонецЕсли;
			
	// Делаем копию
	ПараметрыЗапуска 			= Конфигуратор.ПолучитьПараметрыЗапуска();
	ПараметрыЗапуска.Добавить("/DumpIB""" + ПолныйПутьСохранения + """"); 	
	Лог.Информация("Начало выгрузки");
	Попытка
	    Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска);
		Лог.Информация("Выгрузка завершена");
	Исключение												   
		Лог.Ошибка("Произошла ошибка при выгрузке " + Конфигуратор.ВыводКоманды());		
		КодВозврата = 7;
	КонецПопытки;
		
КонецПроцедуры

Процедура ВыгрузитьКонфигурациюВКаталог()

//				- /F <путь> (тип базы - файловая)
//				- /S <адрес> (тип базы - серверная, <Имя компьютера, работающего сервером приложений>\<Ссылочное имя информационной базы, известное в рамках сервера 1С:Предприятия 8>)
//				- /N (логин администратора ИБ, если не задан, то без логина)
//				- /P (пароль администратора ИБ)
//				- /UPath <путь> (Путь выгрузки файлов)
//				- /Format формат выгрузки (Plain)

	ПутьСохранения 		= Параметры["/UPath"];	

	// Делаем копию
	ПараметрыЗапуска 	= Конфигуратор.ПолучитьПараметрыЗапуска();
	ПараметрыЗапуска.Добавить("/DumpConfigToFiles """ + ПутьСохранения + """");
	Если Параметры["/Format"] <> Неопределено Тогда
		ПараметрыЗапуска.Добавить("-Format " + Параметры["/Format"]);
	КонецЕсли;
	Лог.Информация("Начало выгрузки в файлы");
	Попытка
	    Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска);
		Лог.Информация("Выгрузка завершена");
	Исключение												   
		Лог.Ошибка("Произошла ошибка при выгрузке  в файлы " + Конфигуратор.ВыводКоманды());		
		КодВозврата = 8;
	КонецПопытки;	

КонецПроцедуры

Процедура СнятьБлокировкуСеансов()
	
	Соединение 			= Неопределено;
	СтрокаПодключения 	= Параметры["СтрокаПодключения"];
	V8 					= Новый COMObject("V83.COMConnector");	
	Попытка
		Соединение 	= V8.Connect(СтрокаПодключения);	
		ТекущийРежим= Соединение.ПолучитьБлокировкуСеансов();	
		Если ТекущийРежим.Установлена Тогда
			НовыйРежим 				= Соединение.NewObject("БлокировкаСеансов");
			НовыйРежим.Установлена 	= Ложь;
			Соединение.УстановитьБлокировкуСеансов(НовыйРежим);
		КонецЕсли;
		Лог.Информация("Блокировка сеансов отключена");
	Исключение
		Лог.Ошибка("Не удалось установить соединение!");
		КодВозврата = 9;
	КонецПопытки;					
	
	Если Соединение <> Неопределено Тогда 
		Попытка
			ОсвободитьОбъект(Соединение);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Если V8 <> Неопределено Тогда
		Попытка
			ОсвободитьОбъект(V8);
		Исключение
		КонецПопытки;	
	КонецЕсли;
	
	ВыполнитьСборкуМусора();
	
КонецПроцедуры

Процедура юсСообщить(ТипСообщения, ТекстСообщения)
	
	ИмяЛогФайла 	= Параметры["/LOG"];
	ТекстСообщения 	= "[" + ТекущаяДата() + "] " + "[" + ТипСообщения + "] " + ТекстСообщения;
	
	Если ЗначениеЗаполнено(ИмяЛогФайла) Тогда
		ВЛогФайл(ИмяЛогФайла, ТекстСообщения);
	Иначе
		Сообщить(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры	

Функция ВЛогфайл(ИмяФайла, ТекстСообщения)
	
	Если Найти(ИмяФайла, "\") = 0 Тогда
        ИмяФайла = КаталогПрограммы() + ИмяФайла;
        Сообщить("Лог:" + ИмяФайла);
    КонецЕсли;
	
	ТекстовыйДокумент 	= Новый ТекстовыйДокумент;
    Кодировка 			= "UTF-8" ;
    юсРазделительСтрок 	= Символы.ВК + Символы.ПС;
	
	МассивФайлов 		= НайтиФайлы(ИмяФайла);
	// если файл еще не создан добавим строку
    Если МассивФайлов.Количество() = 0 Тогда        
        ТекстовыйДокумент.ДобавитьСтроку(ТекстСообщения);    
    Иначе 
        // если файл с таким именем уже создан прочитаем его
        ТекстовыйДокумент.Прочитать(ИмяФайла, Кодировка);
		ТекстовыйДокумент.ДобавитьСтроку(ТекстСообщения);
    КонецЕсли;	
    // закрываем ТекстовыйДокумент файл
    ТекстовыйДокумент.Записать(ИмяФайла, Кодировка);
	
КонецФункции

Процедура юсУдалитьФайлы()
	
	ПутьСохранения 				= Параметры["/UPath"];	
	Префикс						= Параметры["/Pref"];
	КоличествоХранимыхАрхивов	= Число(Параметры["/UCount"]);
	МаскаФайла					= Параметры["/UMask"];
	
	Если КоличествоХранимыхАрхивов <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(МаскаФайла) Тогда
			МассивФайлов = НайтиФайлы(ПутьСохранения, МаскаФайла);
		ИначеЕсли ЗначениеЗаполнено(Префикс) Тогда
			МассивФайлов = НайтиФайлы(ПутьСохранения, Префикс + "*.dt");
		Иначе
			МассивФайлов = НайтиФайлы(ПутьСохранения, "*.dt");
		КонецЕсли;	
		
		Если МассивФайлов.Количество() > КоличествоХранимыхАрхивов Тогда
			ТЗ = Новый ТаблицаЗначений;
			ТЗ.Колонки.Добавить("Файл");
			ТЗ.Колонки.Добавить("ПоследняяДатаИзменения");
			Для Каждого Файл Из МассивФайлов Цикл
				СтрокаТЗ 						= ТЗ.Добавить();
				СтрокаТЗ.Файл 					= Файл.ПолноеИмя;
				СтрокаТЗ.ПоследняяДатаИзменения = Файл.ПолучитьВремяИзменения();				
			КонецЦикла;
			ТЗ.Сортировать("ПоследняяДатаИзменения Убыв");
			Пока ТЗ.Количество() > КоличествоХранимыхАрхивов Цикл
				Попытка
					мФайл	= ТЗ[ТЗ.Количество() - 1].Файл;
					УдалитьФайлы(мФайл);
					ТЗ.Удалить(ТЗ.Количество() - 1);
				Исключение
					Лог.Ошибка("Произошла ошибка при удалении файла " + мФайл + " " + ОписаниеОшибки());
					КодВозврата = 10;
					Возврат;
				КонецПопытки;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьВременныеИБ()
	
	Если ЗначениеЗаполнено(Параметры["/VerPL"]) Тогда
		мКонфигуратор 				= Новый УправлениеКонфигуратором();
		ПутьКПлатформе				= мКонфигуратор.ПолучитьПутьКВерсииПлатформы(Параметры["/VerPL"]);
	Иначе
		Лог.Ошибка("Не заполнен параметр ""/VerPL"" - версия платформы!");
		КодВозврата = 11;
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры["/NVerRab"]) Тогда
		НомерВерсииДляРаботы		= Параметры["/NVerRab"];
	Иначе
		Лог.Информация("Не заполнен параметр ""/NVerRab"" - номер версии для обновления, файл dt будет взят из каталога сборки!");		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры["/NVer"]) Тогда
		НомерВерсииДляТестирования	= Параметры["/NVer"];
	Иначе
		Лог.Ошибка("Не заполнен параметр ""/NVer"" - версия для тестирования!");
		КодВозврата = 12;
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(Параметры["/UPath"]) Тогда
		мКаталогСборки = Параметры["/UPath"];		
	Иначе
		Лог.Ошибка("Не заполнен параметр ""/UPath"" - каталог сборки!");
		КодВозврата = 13;
		Возврат;
	КонецЕсли;
	
	СтрокаПодключения		= Параметры["СтрокаПодключения"];
	ПутьКБазе				= Параметры["ПутьКБазе"];
	
	//1я часть тест cfu
	//ищем файл dt рабочей версии
	Если ЗначениеЗаполнено(НомерВерсииДляРаботы) Тогда
		МассивФайлов = НайтиФайлы(Строка(ДополнитьСтрокуСлешем(мКаталогСборки) + Строка(НомерВерсииДляРаботы)), "*.dt", Истина);
	Иначе
		МассивФайлов = НайтиФайлы(мКаталогСборки, "*.dt", Ложь);
	КонецЕсли;
	
	Если МассивФайлов.Количество()>0 Тогда		
		//определяем имя иб для списка баз
		Если ЗначениеЗаполнено(НомерВерсииДляТестирования) Тогда
			ИмяИБВСписке = "Отладка_v_" + Строка(НомерВерсииДляТестирования) + "_обновление_cfu";		
		КонецЕсли;
		
		//каталог для создания временной иб для загрузки из dt
		Если ЗначениеЗаполнено(НомерВерсииДляТестирования) Тогда 
			КаталогБазы = ДополнитьСтрокуСлешем(мКаталогСборки) + "TempIB\" + НомерВерсииДляТестирования + "_load_cfu";
			Файл = Новый Файл(КаталогБазы);
			Если Не Файл.Существует() Тогда
				СоздатьКаталог(КаталогБазы);
				Лог.Информация("Каталог """ + КаталогБазы + """" + " создан.");
			ИначеЕсли Файл.ЭтоКаталог() Тогда
				УдалитьФайлы(КаталогБазы, "*.*");
				Лог.Информация("Каталог с файлами """ + КаталогБазы + """" + " очищен.");		
			КонецЕсли;	
			СтрокаПодключения = "File=" + КаталогБазы + ";";
		КонецЕсли;	
		
		//создание пустой базы
		СтрокаЗапуска = " createinfobase " + СтрокаПодключения + " /AddInList " + ИмяИБВСписке;		
		Лог.Информация("Начало работы с базой """ + КаталогБазы + """");	
		ЗапуститьПриложение("""" + ПутьКПлатформе+ """" + СтрокаЗапуска, , Истина);		
		Лог.Информация("Временная база """ + КаталогБазы + """" + " создана.");
		
		//загрузка dt файла
		мКонфигуратор 	= Новый УправлениеКонфигуратором();
		ПутьКБазе 		= "/F""" + КаталогБазы + """";					
		мКонфигуратор.УстановитьКонтекст(ПутьКБазе,"","");		
		ПараметрыЗапуска= мКонфигуратор.ПолучитьПараметрыЗапуска();	
		ПараметрыЗапуска.Добавить("/RestoreIB " + МассивФайлов[0].ПолноеИмя);			
		Попытка	
			мКонфигуратор.ВыполнитьКоманду(ПараметрыЗапуска);
			Лог.Информация("Загрузка завершена");
		Исключение												   
			Лог.Ошибка("Произошла ошибка при зарузке: " + мКонфигуратор.ВыводКоманды());
			КодВозврата = 14;
		КонецПопытки;
		
		//поиск cfu
		МассивФайловcfu = НайтиФайлы(Строка(ДополнитьСтрокуСлешем(мКаталогСборки) + Строка(НомерВерсииДляТестирования)),"*.cfu",Истина);
		Если МассивФайловcfu.Количество()>0 Тогда
			Файлcfu = МассивФайловcfu[0];
			ФайлЛога= ДополнитьСтрокуСлешем(мКаталогСборки) + НомерВерсииДляТестирования + "_update_cfu.log";
			СтрокаЗапуска = " CONFIG /F""" + КаталогБазы + """ /N""Администратор"" /UpdateCfg " + """" + Файлcfu.ПолноеИмя + """" + " /UpdateDBCfg /OUT """ + ФайлЛога + """ -NoTruncate";			
			Лог.Информация("Запущено обновление ИБ """ + КаталогБазы + """");
			КодВозврата = "";		
			ЗапуститьПриложение("""" + ПутьКПлатформе+ """" + СтрокаЗапуска,, Истина, КодВозврата);		
			Лог.Информация("Обновление ИБ """ + КаталогБазы + """" + " завершено.");
			Если КодВозврата = 0 Тогда
				Лог.Информация("Обновление ИБ """ + КаталогБазы + """" + " завершено.");
			Иначе
				Лог.Ошибка("Обновление ИБ """ + КаталогБазы + """" + " завершено c ошибками, см. " + ФайлЛога);
				КодВозврата = 15;
				Возврат;
			КонецЕсли;		
		КонецЕсли;
		
		//принятие изменений
		Лог.Информация("Для ИБ""" + КаталогБазы + """" + " запущено принятие обновления.");
		ИмяCOMСоединителя = "V83.COMConnector";
		
		Попытка
			COMОбъект = Новый COMОбъект(ИмяCOMСоединителя);
		Исключение
			Лог.Ошибка("Не удалось подключиться через V83.COMConnector по причине: " + ОписаниеОшибки());
			КодВозврата = 16;
			Возврат;
		КонецПопытки;
		
		СтрокаСоединения = "File = """ + КаталогБазы + """; Usr = ""Администратор""";
		
		Попытка
        Соединение = COMОбъект.Connect(СтрокаСоединения);
		Исключение
			Лог.Ошибка("Не удалось подключиться через V83.COMConnector по причине: " + ОписаниеОшибки());
			КодВозврата = 17;
			Возврат;
		КонецПопытки;
		
		Попытка
			Соединение.ОбновлениеИнформационнойБазы.ВыполнитьОбновлениеИнформационнойБазы(Ложь);
			Лог.Информация("Принятие обновления для ИБ """ + КаталогБазы + """" + " завершено.");
		Исключение
			Лог.Ошибка("Не удалось принять обновление по причине: " + ОписаниеОшибки());
			КодВозврата = 18;
		КонецПопытки;
		
		Если Соединение <> Неопределено Тогда
			Попытка
				ОсвободитьОбъект(Соединение);
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		Если COMОбъект <> Неопределено Тогда
			Попытка
				ОсвободитьОбъект(COMОбъект);
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		ВыполнитьСборкуМусора();
	Иначе
		Лог.Ошибка("Файл выгрузки dt не найден. Создание временной базы отменено.");
		КодВозврата = 19;
	КонецЕсли;
	
	//2я часть тест шаблона 
	//поиск cf
	МассивФайловcf = НайтиФайлы(Строка(ДополнитьСтрокуСлешем(мКаталогСборки) + Строка(НомерВерсииДляТестирования)),"*.cf",Истина);	
	Если МассивФайловcf.Количество()>0 Тогда
		//определяем имя иб для списка баз
		Если ЗначениеЗаполнено(НомерВерсииДляТестирования) Тогда
			ИмяИБВСписке = "Отладка_v_" + Строка(НомерВерсииДляТестирования) + "_разворачивание_cf";		
		КонецЕсли;
		
		//каталог для создания временной иб для загрузки из dt
		Если ЗначениеЗаполнено(НомерВерсииДляТестирования) Тогда 
			КаталогБазы = ДополнитьСтрокуСлешем(мКаталогСборки) + "TempIB\" + НомерВерсииДляТестирования + "_load_cf";
			Файл = Новый Файл(КаталогБазы);
			Если Не Файл.Существует() Тогда
				СоздатьКаталог(КаталогБазы);
				Лог.Информация("Каталог """ + КаталогБазы + """" + " создан.");
			ИначеЕсли Файл.ЭтоКаталог() Тогда
				УдалитьФайлы(КаталогБазы, "*.*");
				Лог.Информация("Каталог с файлами """ + КаталогБазы + """" + " очищен.");		
			КонецЕсли;	
			СтрокаПодключения = "File=" + КаталогБазы + ";";
		КонецЕсли;
		
		//создание базы
		СтрокаЗапуска = " createinfobase " + СтрокаПодключения + "/UseTemplate """ + МассивФайловcf[0].ПолноеИмя + """" + " /AddInList " + ИмяИБВСписке;		
		Лог.Информация("Начало работы с базой """ + КаталогБазы + """");	
		ЗапуститьПриложение("""" + ПутьКПлатформе+ """" + СтрокаЗапуска, , Истина);		
		Лог.Информация("Временная база """ + КаталогБазы + """" + " создана.");
		
		//принятие изменений
		Лог.Информация("Для ИБ""" + КаталогБазы + """" + " запущено принятие обновления.");
		ИмяCOMСоединителя = "V83.COMConnector";
		
		Попытка
			COMОбъект = Новый COMОбъект(ИмяCOMСоединителя);
		Исключение
			Лог.Ошибка("Не удалось подключиться через V83.COMConnector по причине: " + ОписаниеОшибки());
			КодВозврата = 20;
			Возврат;
		КонецПопытки;
		
		СтрокаСоединения = "File = """ + КаталогБазы + """;";
		
		Попытка
			Соединение = COMОбъект.Connect(СтрокаСоединения);
		Исключение
			Лог.Ошибка("Не удалось подключиться через V83.COMConnector по причине: " + ОписаниеОшибки());
			КодВозврата = 21;
			Возврат;
		КонецПопытки;
		
		Попытка
			Соединение.ОбновлениеИнформационнойБазы.ВыполнитьОбновлениеИнформационнойБазы(Ложь);
			Соединение.УправлениеITОтделом8УФОбновлениеИнформационнойБазыБСП.ПервыйЗапуск();
		Исключение
			Лог.Ошибка("Не удалось принять обновление по причине: " + ОписаниеОшибки());
			КодВозврата = 22;
		КонецПопытки;
		
		Если Соединение <> Неопределено Тогда
			Попытка
				ОсвободитьОбъект(Соединение);
			Исключение
			КонецПопытки;
		КонецЕсли;

		Если COMОбъект <> Неопределено Тогда
			Попытка
				ОсвободитьОбъект(COMОбъект);
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		ВыполнитьСборкуМусора();
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает внешнее соединение с информационной базой по переданным параметрам подключения и возвращает указатель
// на это соединение.
// 
// Параметры:
//  ПараметрыПодключения - Структура - параметры для установки внешнего соединения с информационной базой.
//
//    * ВерсияПлатформы                              - Строка - Версия платформы: 82; 83;
//    * ВариантРаботыИнформационнойБазы             - Число  - Вариант работы информационной базы: 0 - файловый; 1 -
//                                                             клиент-серверный;
//    * КаталогИнформационнойБазы                   - Строка - Каталог информационной базы для файлового режима работы;
//    * ИмяСервера1СПредприятия                     - Строка - Имя сервера1С:Предприятия;
//    * ИмяИнформационнойБазыНаСервере1СПредприятия - Строка - Имя информационной базы на сервере1С:Предприятия;
//    * АутентификацияОперационнойСистемы           - Булево - Признак аутентификации операционной системы при создании
//                                                             внешнего подключения к информационной базе;
//    * ИмяПользователя                             - Строка - Имя пользователя информационной базы;
//    * ПарольПользователя                          - Строка - Пароль пользователя информационной базы.
// 
// Возвращаемое значение:
//  COMОбъект, Неопределено - указатель на COM-объект соединения или Неопределено в случае ошибки;
//
Функция УстановитьВнешнееСоединениеСБазой(Знач ПараметрыПодключения) 
    
    ИмяCOMСоединителя = "V" + ПараметрыПодключения.ВерсияПлатформы + ".COMConnector";
    Попытка
        COMОбъект = Новый COMОбъект(ИмяCOMСоединителя);
    Исключение
        Лог.Ошибка("Не удалось создать COM-объект по причине: " + ОписаниеОшибки());
		КодВозврата = 23;
        Возврат Неопределено;
    КонецПопытки; 
    
    ФайловыйВариантРаботы = ПараметрыПодключения.ВариантРаботыИнформационнойБазы = 0;
    
    // Проверка корректности указания параметров.
    ОшибкаПроверкиЗаполнения = Ложь;
    Если ФайловыйВариантРаботы Тогда
        Если ПустаяСтрока(ПараметрыПодключения.КаталогИнформационнойБазы) Тогда
            ТекстСообщения = "Не задано месторасположение каталога информационной базы.";
			КодВозврата = 24;
            ОшибкаПроверкиЗаполнения = Истина;
        КонецЕсли;
    Иначе
        Если ПустаяСтрока(ПараметрыПодключения.ИмяСервера1СПредприятия) Или ПустаяСтрока(ПараметрыПодключения.ИмяИнформационнойБазыНаСервере1СПредприятия) Тогда
            ТекстСообщения = "Не заданы обязательные параметры подключения: ""Имя сервера""; ""Имя информационной базы на сервере"".";
			КодВозврата = 25;
            ОшибкаПроверкиЗаполнения = Истина;
        КонецЕсли;
    КонецЕсли;
    
    Если ОшибкаПроверкиЗаполнения Тогда
        Лог.Ошибка(ТекстСообщения);
        Возврат Неопределено;
    КонецЕсли;
    
    // Формирование строки соединения.
    ШаблонСтрокиСоединения = "[СтрокаБазы][СтрокаАутентификации]";
    
    Если ФайловыйВариантРаботы Тогда
        СтрокаБазы = "File = ""&КаталогИнформационнойБазы""";
        СтрокаБазы = СтрЗаменить(СтрокаБазы, "&КаталогИнформационнойБазы", ПараметрыПодключения.КаталогИнформационнойБазы);
    Иначе
        СтрокаБазы = "Srvr = ""&ИмяСервера1СПредприятия""; Ref = ""&ИмяИнформационнойБазыНаСервере1СПредприятия""";
        СтрокаБазы = СтрЗаменить(СтрокаБазы, "&ИмяСервера1СПредприятия",                     ПараметрыПодключения.ИмяСервера1СПредприятия);
        СтрокаБазы = СтрЗаменить(СтрокаБазы, "&ИмяИнформационнойБазыНаСервере1СПредприятия", ПараметрыПодключения.ИмяИнформационнойБазыНаСервере1СПредприятия);
    КонецЕсли;
    
    Если ПараметрыПодключения.АутентификацияОперационнойСистемы Тогда
        СтрокаАутентификации = "";
    Иначе
        
        Если СтрНайти(ПараметрыПодключения.ИмяПользователя, """") Тогда
            ПараметрыПодключения.ИмяПользователя = СтрЗаменить(ПараметрыПодключения.ИмяПользователя, """", """""");
        КонецЕсли;
        
        Если СтрНайти(ПараметрыПодключения.ПарольПользователя, """") Тогда
            ПараметрыПодключения.ПарольПользователя = СтрЗаменить(ПараметрыПодключения.ПарольПользователя, """", """""");
        КонецЕсли;
        
        СтрокаАутентификации = "; Usr = ""&ИмяПользователя""; Pwd = ""&ПарольПользователя""";
        СтрокаАутентификации = СтрЗаменить(СтрокаАутентификации, "&ИмяПользователя",    ПараметрыПодключения.ИмяПользователя);
        СтрокаАутентификации = СтрЗаменить(СтрокаАутентификации, "&ПарольПользователя", ПараметрыПодключения.ПарольПользователя);
    КонецЕсли;
    
    СтрокаСоединения = СтрЗаменить(ШаблонСтрокиСоединения, "[СтрокаБазы]", СтрокаБазы);
    СтрокаСоединения = СтрЗаменить(СтрокаСоединения, "[СтрокаАутентификации]", СтрокаАутентификации);
    
    Попытка
        Соединение = COMОбъект.Connect(СтрокаСоединения);
    Исключение
        Лог.Ошибка("Не удалось подключиться к ИБ по причине: " + ОписаниеОшибки());
		КодВозврата = 27;
        Возврат Неопределено;
    КонецПопытки;
    
    Возврат Соединение;
    
КонецФункции

// Возвращает строку для подключения к внешней базе по переданным параметрам подключения. 
// Параметры:
//  ПараметрыПодключения - Структура - параметры для установки внешнего соединения с информационной базой (см. УстановитьВнешнееСоединениеСБазой()). 
// Возвращаемое значение:
//  Строка, Неопределено - строка подключения или Неопределено в случае ошибки;
//
Функция ПолучитьСтрокуСоединения(знач ПараметрыПодключения)  
    
    ФайловыйВариантРаботы = ПараметрыПодключения.ВариантРаботыИнформационнойБазы = 0;
    
    // Формирование строки соединения.
    СтрокаСоединения = "[СтрокаБазы][СтрокаАутентификации]";
    
    Если ФайловыйВариантРаботы Тогда
        СтрокаБазы = " /F""&КаталогИнформационнойБазы""";
        СтрокаБазы = СтрЗаменить(СтрокаБазы, "&КаталогИнформационнойБазы", ПараметрыПодключения.КаталогИнформационнойБазы);
    Иначе
        СтрокаБазы = " /S""&ИмяСервера1СПредприятия/&ИмяИнформационнойБазыНаСервере1СПредприятия""";
        СтрокаБазы = СтрЗаменить(СтрокаБазы, "&ИмяСервера1СПредприятия",                     ПараметрыПодключения.ИмяСервера1СПредприятия);
        СтрокаБазы = СтрЗаменить(СтрокаБазы, "&ИмяИнформационнойБазыНаСервере1СПредприятия", ПараметрыПодключения.ИмяИнформационнойБазыНаСервере1СПредприятия);
    КонецЕсли;
    
    Если ПараметрыПодключения.АутентификацияОперационнойСистемы Тогда
        СтрокаАутентификации = "";
    Иначе
        
        Если СтрНайти(ПараметрыПодключения.ИмяПользователя, """") Тогда
            ПараметрыПодключения.ИмяПользователя = СтрЗаменить(ПараметрыПодключения.ИмяПользователя, """", """""");
        КонецЕсли;
        
        Если СтрНайти(ПараметрыПодключения.ПарольПользователя, """") Тогда
            ПараметрыПодключения.ПарольПользователя = СтрЗаменить(ПараметрыПодключения.ПарольПользователя, """", """""");
        КонецЕсли;
        
        СтрокаАутентификации = " /N""&ИмяПользователя"" /P""&ПарольПользователя""";
        СтрокаАутентификации = СтрЗаменить(СтрокаАутентификации, "&ИмяПользователя",    ПараметрыПодключения.ИмяПользователя);
        СтрокаАутентификации = СтрЗаменить(СтрокаАутентификации, "&ПарольПользователя", ПараметрыПодключения.ПарольПользователя);
    КонецЕсли;
    
    СтрокаСоединения = СтрЗаменить(СтрокаСоединения, "[СтрокаБазы]", СтрокаБазы);
    СтрокаСоединения = СтрЗаменить(СтрокаСоединения, "[СтрокаАутентификации]", СтрокаАутентификации);
    
    Возврат СтрокаСоединения;
    
КонецФункции

// oscript $(FULL_CURRENT_PATH) /CopyFTP /UPath d:\_Проекты\Uni_Script\Примеры\ /File *.zip /UServer bitrix122.timeweb.ru /N diversus /P *** /UPathFTP /softonit.ru/public_html/test/
Процедура КопироватьНаFTP()	
	
	Лог.Информация("Начало передачи файлов каталога по FTP");
	
	// Проверка параметров
	Если ЗначениеЗаполнено(Параметры["/UPath"]) Тогда
		мКаталог = Параметры["/UPath"];		
	Иначе
		Лог.Ошибка("Не заполнен параметр ""/UPath"" - каталог к файлам для копирования по FTP!");
		КодВозврата = 28;
		Возврат;
	КонецЕсли;
	мКаталог = ДополнитьСтрокуСлешем(мКаталог);

	// Проверка параметров
	
	Если ЗначениеЗаполнено(Параметры["/File"]) Тогда
		мМаска = Параметры["/File"];		
	Иначе
		мМаска = "*.*";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры["/N"]) Тогда
		мИмяПользователя = Параметры["/N"];		
	Иначе
		Лог.Ошибка("Не заполнен параметр ""/N"" - имя пользователя для копирования по FTP!");
		КодВозврата = 30;
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры["/P"]) Тогда
		мПароль = Параметры["/P"];		
	Иначе
		Лог.Ошибка("Не заполнен параметр ""/P"" - пароль для копирования по FTP!");
		КодВозврата = 31;
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(Параметры["/UServer"]) Тогда
		мСервер = Параметры["/UServer"];		
	Иначе
		Лог.Ошибка("Не заполнен параметр ""/P"" - пароль для копирования по FTP!");
		КодВозврата = 32;
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(Параметры["/UPathFTP"]) Тогда
		мПутьНаСервере = Параметры["/UPathFTP"];		
	Иначе
		Лог.Ошибка("Не заполнен параметр ""/UPathFTP"" - путь на сервере FTP куда необходимо скопировать файл!");
		КодВозврата = 33;
		Возврат;
	КонецЕсли;
	
	Попытка
		FTPСоединение = Новый FtpСоединение(мСервер, 21, мИмяПользователя, мПароль,, Истина);
		FTPСоединение.УстановитьТекущийКаталог(мПутьНаСервере);
		Лог.Информация("Текущий каталог на сервере <" + мПутьНаСервере + ">");
	Исключение
		Лог.Ошибка("Ошибка подключения к серверу FTP: " + ОписаниеОшибки());
		КодВозврата = 34;
		Возврат;
	КонецПопытки;

	Файлы = НайтиФайлы(мКаталог, мМаска, Истина);
	Для Каждого мИмяФайла Из Файлы Цикл
	
		Лог.Информация("Передача файла <" + мИмяФайла.ПолноеИмя + "> => <" + мИмяФайла.Имя + "> по FTP");
		Попытка
			FTPСоединение.Записать(мИмяФайла.ПолноеИмя, мИмяФайла.Имя);
			Лог.Информация("Завершение передачи файла <" + мИмяФайла.ПолноеИмя + "> по FTP");
		Исключение
			Лог.Ошибка("Ошибка передачи файла по FTP: " + ОписаниеОшибки());
			КодВозврата = 34;
		КонецПопытки;
		
	КонецЦикла;
	
	Лог.Информация("Завершение передачи файлов каталога по FTP");
	
КонецПроцедуры

// oscript "c:\work\uni\uni_script.os" /DownloadFTP /UPath c:\work\ftp\ /File updates.zip /UServer *.*.*.* /N *** /P *** /UPathFTP "/"
Процедура СкачатьФайлыСFTP()	
	
	Лог.Информация("Начало загрузки файлов с FTP");
	
	// Проверка параметров
	Если ЗначениеЗаполнено(Параметры["/UPath"]) Тогда
		мКаталог = Параметры["/UPath"];		
	Иначе
		Лог.Ошибка("Не заполнен параметр ""/UPath"" - каталог для файлов, загружаемых с FTP!");
		КодВозврата = 28;
		Возврат;
	КонецЕсли;
	мКаталог = ДополнитьСтрокуСлешем(мКаталог);

	// Проверка параметров	
	Если ЗначениеЗаполнено(Параметры["/File"]) Тогда
		мМаска = Параметры["/File"];		
	Иначе
		мМаска = "*.*";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры["/N"]) Тогда
		мИмяПользователя = Параметры["/N"];		
	Иначе
		Лог.Ошибка("Не заполнен параметр ""/N"" - имя пользователя для подключения по FTP!");
		КодВозврата = 30;
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры["/P"]) Тогда
		мПароль = Параметры["/P"];		
	Иначе
		Лог.Ошибка("Не заполнен параметр ""/P"" - пароль для подключения по FTP!");
		КодВозврата = 31;
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(Параметры["/UServer"]) Тогда
		мСервер = Параметры["/UServer"];		
	Иначе
		Лог.Ошибка("Не заполнен параметр ""/UServer"" - адрес для подключения по FTP!");
		КодВозврата = 32;
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(Параметры["/UPathFTP"]) Тогда
		мПутьНаСервере = Параметры["/UPathFTP"];		
	Иначе		
		Лог.Ошибка("Не заполнен параметр ""/UPathFTP"" - путь на сервере FTP откуда необходимо скачать файлы!");
		КодВозврата = 33;
		Возврат;
	КонецЕсли;
	
	Попытка
		FTPСоединение = Новый FtpСоединение(мСервер, 21, мИмяПользователя, мПароль,, Истина);
		FTPСоединение.УстановитьТекущийКаталог(мПутьНаСервере);			
		Лог.Информация("Текущий каталог на сервере <" + мПутьНаСервере + ">");		
	Исключение
		Лог.Ошибка("Ошибка подключения к серверу FTP: " + ОписаниеОшибки());
		КодВозврата = 34;
		Возврат;
	КонецПопытки;

	МассивФайлов = FtpСоединение.НайтиФайлы(мПутьНаСервере, мМаска, Ложь);
	Для Каждого Элем Из МассивФайлов Цикл				
		НовыйФайл = Новый Файл(мКаталог + Элем.Имя);
		FtpСоединение.Получить(Элем.ПолноеИмя, НовыйФайл.ПолноеИмя);		
		Лог.Информация("Получен файл <" + НовыйФайл.ПолноеИмя + ">");		
	КонецЦикла;

	Лог.Информация("Завершение загрузки файлов с FTP");
	
КонецПроцедуры

// Разбивает строку на несколько строк по разделителю. Разделитель может иметь любую длину.
Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, СокращатьНепечатаемыеСимволы = Ложь) Экспорт
	
	Результат = Новый Массив;
	
	// для обеспечения обратной совместимости
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Строка));
		Иначе
			Результат.Добавить(Строка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получает информацию о конфигурации (версия, имя, синоним)
Функция ИнформацияОКонфигурации()
	
	ИмяCOMСоединителя = "V83.ComConnector";
	Попытка
		COMОбъект = Новый COMОбъект(ИмяCOMСоединителя);
	Исключение
		Лог.Ошибка("Не удалось подключиться через " + ИмяCOMСоединителя + " по причине: " + ОписаниеОшибки());
		КодВозврата = 36;
		Возврат Неопределено;
	КонецПопытки;	
	
	Лог.Информация("Получаем информацию о конфигурации");
	
	Попытка
		Соединение 				= COMОбъект.Connect(Параметры["СтрокаПодключения"]);
		ВерсияКонфигурации 		= Соединение.Метаданные().Версия;
		ИмяКонфигурации 		= Соединение.Метаданные().Имя;
		СинонимКонфигурации 	= Соединение.Метаданные().Синоним;
		Поставщик 				= Соединение.Метаданные().Поставщик;		
		Лог.Информация("Информация получена");
	Исключение
		Лог.Ошибка("Не удалось получить данные конфигурации через " + ИмяCOMСоединителя + " по причине: " + ОписаниеОшибки());
		КодВозврата = 37;
		Возврат Неопределено;
	КонецПопытки;
	
	Если ПустаяСтрока(ВерсияКонфигурации) Тогда
		Лог.Ошибка("Текущая версия конфигурации не получена. Нельзя продолжить.");
		КодВозврата = 38;
		Возврат Неопределено;		
	КонецЕсли;

	// Очищаем соединения
	Если Соединение <> Неопределено Тогда
		Попытка
			ОсвободитьОбъект(Соединение);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Если COMОбъект <> Неопределено Тогда
		Попытка
			ОсвободитьОбъект(COMОбъект);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	ВыполнитьСборкуМусора();	
	
	Возврат Новый Структура("ВерсияКонфигурации, ИмяКонфигурации, СинонимКонфигурации, Поставщик", ВерсияКонфигурации, ИмяКонфигурации, СинонимКонфигурации, Поставщик)
	
КонецФункции

Функция ВыполнитьПрограммноеОбновлениеКонфигурации()
	
	// ШАГ 3. Подключаемся по COM
	ИмяCOMСоединителя = "V83.ComConnector";
	Попытка
		COMОбъект = Новый COMОбъект(ИмяCOMСоединителя);
	Исключение
		Лог.Ошибка("Не удалось подключиться через " + ИмяCOMСоединителя + " по причине: " + ОписаниеОшибки());
		КодВозврата = 40;
		Возврат Неопределено;
	КонецПопытки;	
			
	Попытка
		Соединение 				= COMОбъект.Connect(Параметры["СтрокаПодключения"]);
		мВерсияКонфигурации 	= Соединение.Метаданные().Версия;
		мИмяКонфигурации 		= Соединение.Метаданные().Имя;
		мСинонимКонфигурации 	= Соединение.Метаданные().Синоним;			
		Лог.Информация("Текущая версия конфигурации: " + мВерсияКонфигурации);
	Исключение
		Лог.Ошибка("Не удалось получить данные конфигурации через " + ИмяCOMСоединителя + " по причине: " + ОписаниеОшибки());
		КодВозврата = 41;
		Возврат Неопределено;
	КонецПопытки;
	
	Если ПустаяСтрока(мВерсияКонфигурации) Тогда
		Лог.Ошибка("Ошибка при получении версии конфигурации.");
		КодВозврата = 42;
		Возврат Неопределено;		
	КонецЕсли;
	
	// ШАГ 3. Запуск конфигурации в режиме предприятия с проверкой легальности
	Если ЗначениеЗаполнено(Параметры["/Legal"]) Тогда
		
		Лог.Информация("Подтверждение легальности получения обновлений.");		
		
		Попытка
			Соединение.ОбновлениеИнформационнойБазыСлужебный.ЗаписатьПодтверждениеЛегальностиПолученияОбновлений();
			Лог.Информация("Начало обновления информационной базы.");
			Соединение.ОбновлениеИнформационнойБазы.ВыполнитьОбновлениеИнформационнойБазы(Ложь);			
			Лог.Информация("Окончание обновления информационной базы.");
		Исключение
			Лог.Ошибка("Не удалось выполнить обновление информационной базы по причине: " + ОписаниеОшибки());
			КодВозврата = 43;
		КонецПопытки;
		
	КонецЕсли;

	// Очищаем соединения
	Если Соединение <> Неопределено Тогда
		Попытка
			ОсвободитьОбъект(Соединение);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Если COMОбъект <> Неопределено Тогда
		Попытка
			ОсвободитьОбъект(COMОбъект);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	ВыполнитьСборкуМусора();	
	
	Возврат Новый Структура("мВерсияКонфигурации, мИмяКонфигурации, мСинонимКонфигурации", мВерсияКонфигурации, мИмяКонфигурации, мСинонимКонфигурации)
	
КонецФункции

// oscript $(FULL_CURRENT_PATH) /BuildDistribRepo /F "D:\_Проекты\Управление IT-отделом 8 УФ\Пустая конфигурация для обновления" /N "Администратор" /P "" /ConfigurationRepositoryF "D:\Хранилище\Управление IT-отделом 8" /ConfigurationRepositoryN "Обновления" /Legal "Yes" /UPath "d:\_Проекты\Управление IT-отделом 8 УФ\Полные комплекты и обновления" /NVer "3.0.27.6" /NeedVerPL "8.3.6"
Процедура СоздатьДистрибутивИзХранилища()	
	
	// Шаг 0. Проверка заполненных параметров
	мКаталогСборки = Параметры["/UPath"];
	Если НЕ ЗначениеЗаполнено(Параметры["/ConfigurationRepositoryF"]) Тогда
		Лог.Ошибка("Не заполнен параметр ""/ConfigurationRepositoryF"" - путь к хранилищу!");
		КодВозврата = 44;
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Параметры["/ConfigurationRepositoryN"]) Тогда
		Лог.Ошибка("Не заполнен параметр ""/ConfigurationRepositoryN"" - пользователь хранилища!");
		КодВозврата = 45;
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(мКаталогСборки) Тогда
		Лог.Ошибка("Не заполнен параметр ""/UPath"" - каталог сборки (где будет создан дистрибутив)!");
		КодВозврата = 46;
		Возврат;
	Иначе
		Файл = Новый Файл(мКаталогСборки);
		Если Не Файл.Существует() Тогда		
			Лог.Ошибка("Каталог """ + мКаталогСборки + """" + " не существует для создания дистрибутива.");
			КодВозврата = 47;
			Возврат;
		КонецЕсли;	
	КонецЕсли;
	мКаталогСборки = ДополнитьСтрокуСлешем(мКаталогСборки);
	
	// Шаг 1. Загружаем все изменения из хранилища
	НомерШага = 1;
	ПараметрыЗапуска1 			= Конфигуратор.ПолучитьПараметрыЗапуска();
	ПараметрыЗапуска1.Добавить("/ConfigurationRepositoryUpdateCfg -revised -force");
	ПараметрыЗапуска1.Добавить("/ConfigurationRepositoryF """ + Параметры["/ConfigurationRepositoryF"] + """");	
	ПараметрыЗапуска1.Добавить("/ConfigurationRepositoryN """ + Параметры["/ConfigurationRepositoryN"] + """");
	Если ЗначениеЗаполнено(Параметры["/ConfigurationRepositoryP"]) Тогда
		ПараметрыЗапуска1.Добавить("/ConfigurationRepositoryP """ + Параметры["/ConfigurationRepositoryP"] + """");
	КонецЕсли;
		
	Лог.Информация("ШАГ " + Строка(НомерШага)); 
	Лог.Информация("Получаем конфигурацию из хранилища");
	Попытка
	    Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска1);
		Лог.Информация("Получение завершено");
	Исключение												   
		Лог.Ошибка("Произошла ошибка при получении конфигурации из хранилища " + Конфигуратор.ВыводКоманды());		
		КодВозврата = 48;
		Возврат;
	КонецПопытки;
	НомерШага = НомерШага + 1;
	
	// Шаг 2. Обновляем конфигурацию
	ПараметрыЗапуска2 			= Конфигуратор.ПолучитьПараметрыЗапуска();
	ПараметрыЗапуска2.Добавить("/UpdateDBCfg");
	
	Лог.Информация("ШАГ " + Строка(НомерШага));
	Лог.Информация("Обновление конфигурации базы данных");
	Попытка
	    Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска2);
		Лог.Информация("Обновление конфигурации завершено");
	Исключение												   
		Лог.Ошибка("Произошла ошибка при обновлении конфигурации базы данных " + Конфигуратор.ВыводКоманды());
		КодВозврата = 49;
		Возврат;
	КонецПопытки;
	НомерШага = НомерШага + 1;

	// Обновляем при необходимости
	Результат = ВыполнитьПрограммноеОбновлениеКонфигурации();
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	мВерсияКонфигурации 	= Результат.мВерсияКонфигурации;
	мИмяКонфигурации 		= Результат.мИмяКонфигурации;
	мСинонимКонфигурации 	= Результат.мСинонимКонфигурации;	
	ВыполнитьСборкуМусора();
	
	// ШАГ 4. Создаем папки и будущую навигацию
	Лог.Информация("ШАГ " + Строка(НомерШага));
	Лог.Информация("Создание каталогов и заполнение вспомогательных данных.");
	мВерсииОбновлений = Параметры["/NVer"];
	мМассивВерсий = РазложитьСтрокуВМассивПодстрок(мВерсииОбновлений);
	
	мКаталогВерсии 						= ДополнитьСтрокуСлешем(мКаталогСборки + мВерсияКонфигурации);
	мКаталогВерсииПолный 				= ДополнитьСтрокуСлешем(мКаталогВерсии + "Полный");
	мКаталогВерсииОбновление 			= ДополнитьСтрокуСлешем(мКаталогВерсии + "Обновление");
	мКаталогВерсииДополнительныеФайлы 	= ДополнитьСтрокуСлешем(мКаталогВерсии + "Дополнительные файлы");
	
	Файл = Новый Файл(мКаталогСборки);
	// Удаляем все файлы в папке сборки, если она есть
	Если Файл.Существует() Тогда
		Попытка
			УдалитьФайлы(мКаталогВерсии);
		Исключение
			Лог.Ошибка("Не удалось удалить каталог со старой версией, для новой сборки: " + ОписаниеОшибки());
			КодВозврата = 50;
			Возврат;
		КонецПопытки;
	КонецЕсли;

	// Создаем каталоги
	СоздатьКаталог(мКаталогВерсии);
	СоздатьКаталог(мКаталогВерсииПолный);	
	СоздатьКаталог(мКаталогВерсииДополнительныеФайлы);
	
	// Нужно делать и обновление
	мСтрокаСВерсиями = "";
	Если мМассивВерсий.Количество() > 0 Тогда
		СоздатьКаталог(мКаталогВерсииОбновление);
		// Создаем UpdInfo.txt
		ТД = Новый ТекстовыйДокумент;
		ТекстВерсий = "Version=" + мВерсияКонфигурации + Символы.ПС + "FromVersions=;";
		Для Каждого мВерсия Из мМассивВерсий Цикл
			ТекстВерсий = ТекстВерсий + мВерсия + ";";
			Если НЕ ПустаяСтрока(мСтрокаСВерсиями) Тогда
				мСтрокаСВерсиями = мСтрокаСВерсиями + ", ";
			КонецЕсли;
			мСтрокаСВерсиями = мСтрокаСВерсиями + мВерсия;
		КонецЦикла;
		ТекстВерсий = ТекстВерсий + Символы.ПС + "UpdateDate=" + Формат(ТекущаяДата(), "ДФ=dd.MM.yyyy");
		ТД.УстановитьТекст(ТекстВерсий);
		ТД.Записать(мКаталогВерсииДополнительныеФайлы + "UpdInfo.txt");
	КонецЕсли;
	
	// Создаем ReadMe.txt
	ТД = Новый ТекстовыйДокумент;
	Текст = "Конфигурация """ + мСинонимКонфигурации + """" + Символы.ПС + 
		"Версия " + мВерсияКонфигурации + Символы.ПС +
		"=================================================================" + Символы.ПС + Символы.ПС +		
		"Внимание!"+ Символы.ПС +
		"Текущая версия конфигурации """ + мСинонимКонфигурации + """ предназначена"+ Символы.ПС +
		"для использования с версией системы 1С:Предприятие 8.3 не ниже " + Параметры["/NeedVerPL"];
	ТД.УстановитьТекст(Текст);
	ТД.Записать(мКаталогВерсииДополнительныеФайлы + "ReadMe.txt");
	
	ПолучитьОписаниеОбновленияИзМакета(мКаталогСборки + "news.html");
	ВыполнитьСборкуМусора();
	
	// Создаем 1cv8upd.htm
	ТД = Новый ТекстовыйДокумент;
	мТекстНовостей = "";
	Файл = Новый Файл(мКаталогСборки);
	Если Файл.Существует() Тогда			
		ТД.Прочитать(мКаталогСборки + "news.html");
		мТекстНовостей = ТД.ПолучитьТекст();
	КонецЕсли;	
	Текст = "<HTML><HEAD>
			|<META http-equiv=Content-Type content=""text/html; charset=utf-8""><LINK href=""__STYLE__"" type=text/css rel=stylesheet><BASE href=v8config://1F802B99-D580-4E0F-93A3-F3F36B54052D/mdobject/id85895E9C-8000-4F0E-8DFD-B67B5FE6CC6C/8EB4FAD1-1FA6-403E-970F-2C12DBB43E23>
			|<META content=""MSHTML 6.00.2900.5969"" name=GENERATOR></HEAD>
			|<style type=""text/css"">
			|.updnew li:before{color:#090;content:""[+] "";font-family:""Courier New"",Courier,monospace;font-weight:bold;font-style:normal;list-style:none;}
			|.updedt li:before{color:#005EF9;content:""[*] "";font-family:""Courier New"",Courier,monospace;font-weight:bold;font-style:normal;list-style:none;}
			|.upderr li:before{color:#FF0000;content:""[-] "";font-family:""Courier New"",Courier,monospace;font-weight:bold;font-style:normal;list-style:none;}
			|.updnws li:before{color:#810A0A;content:""[#] "";font-family:""Courier New"",Courier,monospace;font-weight:bold;font-style:normal;list-style:none;}
			|</style>
			|<BODY>
			|<TABLE style=""BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"" cellSpacing=0 cellPadding=8 width=""100%"" bgColor=#ffffd6 border=0>
			|<TBODY>
			|<TR>
			|<TD>
			|<H2><FONT face=Tahoma color=#c10000>Конфигурация<BR>" + мСинонимКонфигурации + "</FONT></FONT></H2></TD></TR></TBODY></TABLE>
			|<H3 style=""BORDER-BOTTOM: #c10000 2px solid""><FONT face=Arial color=#c10000 size=5><EM>Версия&nbsp;" + мВерсияКонфигурации + "</EM></FONT></H3>
			|<H4><FONT face=Verdana color=#823602>Порядок обновления всех конфигураций</FONT></H4>
			|<OL>
			|<LI>Запустите систему 1С:Предприятие в режиме ""Конфигуратор"".
			|<LI><B>Обязательно сделайте архивную копию вашей информационной базы!</B> Для этого надо в меню Администрирование выбрать пункт ""Выгрузить информационную базу"" и ввести имя файла выгрузки. Этот файл надо сохранить в надёжном месте.
			|<LI>В режиме ""Конфигуратор"" откройте конфигурацию, для этого в меню ""Конфигурация"" выберите пункт ""Открыть конфигурацию"".
			|<LI>Вызовите режим ""Обновление конфигураций"", для этого в меню ""Конфигурация"", подменю ""Поддержка"", выберите пункт ""Обновить конфигурацию"".
			|<LI>В диалоге выбора обновления в качестве источника обновления укажите ""Доступные обновления"", после чего выберите нужное обновление в соответствующем списке.
			|<LI>Если в списке обновлений необходимое обновление отсутствует, то в диалоге выбора обновления в качестве источника обновления укажите ""Файл обновления"", после чего выберите нужный файл обновления (по умолчанию 1cv8.cfu).
			|<LI>В окне ""Обновление конфигураций"" нажмите кнопку ""OK"" для продолжения обновления конфигурации.
			|<LI>На вопрос об обновлении конфигурации базы данных ответьте ""ДА"".
			|<LI>После завершения <B>обязательно</B> запустите программу в режиме ""Предприятие"" - для совершения конвертации. Некоторые пользователи не выходя из конфигуратора последовательно обновляют версии - это недопустимо и повлечет за собой невозможность дальнейшей работы. После каждого обновления надо хотя бы 1 раз запускать 1С в режиме 1С:Предприятие.</LI></OL>
			|<H4><FONT face=Verdana color=#823602>Порядок обновления конфигурации версий " + мСтрокаСВерсиями + " на версию " + мВерсияКонфигурации + "</FONT></H4>
			|<P>Для обновления версии конфигурации следует использовать режим ""Обновление конфигураций"". Файл обновлений 1Cv8.cfu находится в каталоге шаблонов (по умолчанию - подкаталог tmplts\ каталога установки 1С:Предприятия 8), в подкаталоге SoftOnIT\it3\" + СтрЗаменить(мВерсияКонфигурации, ".", "_") + "\</P>
			|</SPAN><hr><font color=""#ff0000"">Внимание!<br>Текущая версия конфигурации """ + мСинонимКонфигурации + """ предназначена для использования с версией системы 1С:Предприятие 8.3 не ниже " + Параметры["/NeedVerPL"] + ".</font><hr>" + 
			мТекстНовостей + "
			|</BODY></HTML>";
	ТД.УстановитьТекст(Текст);
	ТД.Записать(мКаталогВерсииДополнительныеФайлы + "1cv8upd.htm");		
	
	НомерШага = НомерШага + 1;
	
	ВыполнитьСборкуМусора();
	
	// ШАГ 5. Создаем файл поставки
	ПараметрыЗапуска3 			= Конфигуратор.ПолучитьПараметрыЗапуска();
	ПараметрыЗапуска3.Добавить("/CreateDistributionFiles");
	// Создаем полный дистрибутив
	ПараметрыЗапуска3.Добавить("-cffile """ + мКаталогВерсии + "1Cv8.cf" + """");
	Если мМассивВерсий.Количество() > 0 Тогда
		// Добавляем обновления для каждой из версии
		ПараметрыЗапуска3.Добавить("-cfufile """ + мКаталогВерсии + "1Cv8.cfu" + """");
		Для Каждого мВерсия Из мМассивВерсий Цикл
			ПараметрыЗапуска3.Добавить("-v" + мВерсия);
		КонецЦикла;
	КонецЕсли;

	Лог.Информация("ШАГ " + Строка(НомерШага));
	Лог.Информация("Создание файла поставки");
	Попытка
		Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска3);
		Лог.Информация("Создание файла поставки завершено");
	Исключение												   
		Лог.Ошибка("Произошла ошибка при создании файла поставки " + Конфигуратор.ВыводКоманды());
		КодВозврата = 51;
		Возврат;
	КонецПопытки;
	НомерШага = НомерШага + 1;
	
	// ШАГ 6. Создание дистрибутива
	ПараметрыЗапуска4 			= Конфигуратор.ПолучитьПараметрыЗапуска();
	ПараметрыЗапуска4.Добавить("/CreateDistributive """ + мКаталогВерсииПолный + """");
	ПараметрыЗапуска4.Добавить("-File """ + мКаталогСборки + "install.edf" + """");
	ПараметрыЗапуска4.Добавить("-MakeSetup");	
	
	Лог.Информация("ШАГ " + Строка(НомерШага));
	Лог.Информация("Создание дистрибутива");
	Попытка
		Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска4);
		Лог.Информация("Создание дистрибутива завершено");
		
		// Делаем архив
		ЗаписьZIP =  Новый ЗаписьZipФайла(мКаталогВерсииПолный + "full.zip");     
		ЗаписьZIP.Добавить(мКаталогВерсииПолный + "*.*",
			РежимСохраненияПутейZIP.СохранятьОтносительныеПути,
			РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);		
		ЗаписьZIP.Записать();
		Лог.Информация("Создание архива дистрибутива завершено");
		
	Исключение												   
		Лог.Ошибка("Произошла ошибка при создании дистрибутива " + Конфигуратор.ВыводКоманды());
		КодВозврата = 52;
		Возврат;
	КонецПопытки;
	НомерШага = НомерШага + 1;
	
	// ШАГ 7. Создание обновления
	Если мМассивВерсий.Количество() > 0 Тогда
		ПараметрыЗапуска5 			= Конфигуратор.ПолучитьПараметрыЗапуска();
		ПараметрыЗапуска5.Добавить("/CreateDistributive """ + мКаталогВерсииОбновление + """");
		ПараметрыЗапуска5.Добавить("-File """ + мКаталогСборки + "install.edf" + """");
		ПараметрыЗапуска5.Добавить("-Option Обновление");
		ПараметрыЗапуска5.Добавить("-MakeSetup");

		Лог.Информация("ШАГ " + Строка(НомерШага));
		Лог.Информация("Создание обновления дистрибутива");
		Попытка
			Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска5);
			Лог.Информация("Создание обновления дистрибутива завершено");
			
			// Делаем архив
			ЗаписьZIP =  Новый ЗаписьZipФайла(мКаталогВерсииОбновление + мВерсияКонфигурации + ".zip");     
			ЗаписьZIP.Добавить(мКаталогВерсииОбновление + "*.*",
				РежимСохраненияПутейZIP.СохранятьОтносительныеПути,
				РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
			ЗаписьZIP.Записать();
			Лог.Информация("Создание архива обновления дистрибутива завершено");			
		Исключение												   
			Лог.Ошибка("Произошла ошибка при создании обновления дистрибутива " + Конфигуратор.ВыводКоманды());
			КодВозврата = 53;
			Возврат;
		КонецПопытки;
		НомерШага = НомерШага + 1;
			
	КонецЕсли;
	
	Лог.Информация("Успешное завершение сборки.");
	
КонецПроцедуры

// ПутьКФайлу - Строка - путь к файлу или каталогу, существование которого 
// нужно проверить. 
// 
// Возвращаемое значение: 
// Булево - признак существования файла или каталога. 
// 
Функция ФайлСуществует(Знач ПутьКФайлу) Экспорт 
	Файл = Новый Файл(ПутьКФайлу); 
	Возврат Файл.Существует(); 
КонецФункции

// oscript $(FULL_CURRENT_PATH) /SaveLastConfigUpdateText /F "D:\_Проекты\Управление IT-отделом 8 УФ\Пустая конфигурация для обновления" /N "Администратор" /P "" /UPath "d:\_Проекты\Управление IT-отделом 8 УФ\Полные комплекты и обновления\news.html" /Maket "ОписаниеИзмененийСистемы"
Процедура ПолучитьОписаниеОбновленияИзМакета(ФайлHTML = Неопределено)
		
	Лог.Информация("Получение описания обновления из макета конфигурации");
	
	мФайлHTML = "";
	Если ФайлHTML = Неопределено Тогда	
		Если НЕ ЗначениеЗаполнено(Параметры["/UPath"]) Тогда
			Лог.Ошибка("Не заполнен параметр ""/UPath"" - путь к HTML документу с описанием изменений!");
			КодВозврата = 54;
			Возврат;
		КонецЕсли;
		мФайлHTML = Параметры["/UPath"];		
	Иначе
		мФайлHTML = ФайлHTML;		
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Параметры["/Settings"]) Тогда
		Лог.Ошибка("Не заполнен параметр ""/Settings"" - файл с настройками экспорта!");
		КодВозврата = 54;
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Параметры["/Section"]) Тогда
		Лог.Ошибка("Не заполнен параметр ""/Section"" - секция в файле с настройками экспорта!");
		КодВозврата = 54;
		Возврат;
	КонецЕсли;	
	
	Settings		 	= Параметры["/Settings"];
	Section			 	= Параметры["/Section"];
	Настройки 			= ПрочитатьСекциюINIФайла(Settings, Section);
	SectionURL		 	= Параметры["/SectionURL"];
	НастройкиURL		= ПрочитатьСекциюINIФайла(Settings, SectionURL);

	// Проверка существования каталога куда сохраняем и если его нет, то сохраняем.
	Файл = Новый Файл(мФайлHTML);
	Если НЕ ФайлСуществует(Файл.Путь) Тогда
		СоздатьКаталог(Файл.Путь)
	КонецЕсли;	
	
	Если Настройки.Получить("MAKET") = Неопределено Тогда
		ИмяМакета = "ОписаниеИзмененийСистемы";
	Иначе
		ИмяМакета = Настройки.Получить("MAKET");
	КонецЕсли;
	
	ИмяCOMСоединителя = "V83.ComConnector";
	Попытка
		COMОбъект = Новый COMОбъект(ИмяCOMСоединителя);
	Исключение
		Лог.Ошибка("Не удалось подключиться через " + ИмяCOMСоединителя + " по причине: " + ОписаниеОшибки());
		КодВозврата = 55;
		Возврат;
	КонецПопытки;	
			
	Попытка
		Соединение 				= COMОбъект.Connect(Параметры["СтрокаПодключения"]);
		мВерсияКонфигурации 	= Соединение.Метаданные().Версия;
		
		// Получаем текстовый файл описания
		Макет = Соединение.ПолучитьОбщийМакет(ИмяМакета);
		
		Обновление = Новый ТаблицаЗначений;
		Обновление.Колонки.Добавить("Раздел");
		Обновление.Колонки.Добавить("Текст");
		Обновление.Колонки.Добавить("ТекстHTML");
		Обновление.Колонки.Добавить("ЦветТекста");
		
		ТД = Новый ТекстовыйДокумент;
		Текст = "";
		ТекстHTML = "";
		Области = Макет.ПолучитьОбласть("Версия" + СтрЗаменить(мВерсияКонфигурации, ".", "_"));
		Раздел = "Новый функционал";
		Для а = 1 по Области.ВысотаТаблицы Цикл
		
			Текст 		= Области.Область(а, 2, а, 2).Текст;
			ЦветТекста 	= Области.Область(а, 2, а, 2).ЦветТекста;
			Если ПустаяСтрока(Текст) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Текст = "Новый функционал" 
				ИЛИ Текст = "Изменения" 
				ИЛИ Текст = "Исправление ошибок" 
				ИЛИ Текст = "Внимание!" 
				ИЛИ Текст = "Новости"
				ИЛИ Текст = "Замечания к обновлению" Тогда
				Раздел = Текст;
				Продолжить;
			КонецЕсли;
				
			// Удаляем теги
			ТекстHTML = СтрЗаменить(Текст, "&", "&amp;");
			ТекстHTML = СтрЗаменить(ТекстHTML, "<", "&lt;");
			ТекстHTML = СтрЗаменить(ТекстHTML, ">", "&gt;");
			ТекстHTML = СтрЗаменить(ТекстHTML, Символы.ПС, "<br />");
			
			Текст = СтрЗаменить(Текст, Символы.ПС, " ");
			Пока Найти(Текст, "  ") > 0 Цикл
				Текст = СтрЗаменить(Текст, "  ", " ");
			КонецЦикла;			
			Текст = СокрЛП(Текст);
			
			// Это гиперссылка
			Если Области.Область(а, 2, а, 2).Гиперссылка = Истина Тогда
				НайденныйURL = НастройкиURL.Получить(Области.Область(а, 2, а, 2).Имя);
				Если НайденныйURL = Неопределено Тогда
					НайденныйURL = Области.Область(а, 2, а, 2).Имя;
					Лог.Ошибка("В файле настроек сборки в секции <" + SectionURL + "> не указана гиперссылка для области <" + НайденныйURL + ">");
					КодВозврата = 56;
				КонецЕсли;
				ТекстHTML = "<a href=""" + НайденныйURL + """ target=""_blank"">" + ТекстHTML + "</a>";
				Текст = "[url=" + НайденныйURL + "]" + Текст + "[/url]";
			КонецЕсли;
			
			Если Области.Область(а, 2, а, 2).Отступ = 0 ИЛИ Обновление.Количество() = 0 Тогда
				Стр 			= Обновление.Добавить();
				Стр.Раздел 		= Раздел;			
				Стр.ТекстHTML 	= ТекстHTML;
				Стр.Текст	  	= Текст;
			Иначе
				Стр 			= Обновление.Получить(Обновление.Количество() - 1);
				Стр.ТекстHTML 	= Стр.ТекстHTML + "<br />" + Символы.ПС;
				Стр.Текст	  	= Стр.Текст + Символы.ПС;
				Для ИндексОтступов = 1 По Области.Область(а, 2, а, 2).Отступ Цикл
					Стр.ТекстHTML 	= Стр.ТекстHTML + "&nbsp;";
					Стр.Текст	  	= Стр.Текст + " ";
				КонецЦикла;
				Стр.ТекстHTML 	= Стр.ТекстHTML + ТекстHTML;
				Стр.Текст	  	= Стр.Текст + Текст;
			КонецЕсли;
			Стр.ЦветТекста 		= ЦветТекста;

		КонецЦикла;
		
		Раздел = "";
		ТекстHTML = "";
		Для Каждого Строки Из Обновление Цикл
			Если Раздел <> Строки.Раздел Тогда
				Если НЕ ПустаяСтрока(ТекстHTML) тогда
					ТекстHTML = ТекстHTML + "</ul>" + Символы.ПС;
				КонецЕсли;
				ТекстHTML = ТекстHTML + "<h2>" + Строки.Раздел + "</h2>" + Символы.ПС;
				Раздел = Строки.Раздел;
				КлассCSS = "";
				Если Раздел = "Новый функционал" Тогда
					КлассCSS = "updnew";
				ИначеЕсли Раздел = "Изменения" Тогда
					КлассCSS = "updedt";
				ИначеЕсли Раздел = "Исправление ошибок" Тогда
					КлассCSS = "upderr";
				ИначеЕсли Раздел = "Внимание!" ИЛИ Раздел = "Новости" Тогда
					КлассCSS = "updnws";
				ИначеЕсли Раздел = "Замечания к обновлению" Тогда
					КлассCSS = "upderr";
				КонецЕсли;
				ТекстHTML = ТекстHTML + "<ul class=""" + КлассCSS + """>" + Символы.ПС;
			КонецЕсли;
			Префикс 		= "";
			Постфикс 		= "";
			Если Строки.ЦветТекста.Зеленый <> -1 
				И Строки.ЦветТекста.Красный <> -1 
				И Строки.ЦветТекста.Синий <> -1 
				И Найти(Строки.ТекстHTML, "<a href=") = 0 Тогда
				Префикс 	= Префикс  + "<span style=""color:rgb(" 
					+ Строка(Строки.ЦветТекста.Красный) + "," 
					+ Строка(Строки.ЦветТекста.Зеленый) + "," 
					+ Строка(Строки.ЦветТекста.Синий) + ");"">";
				Постфикс 	= Постфикс + "</span>";
			КонецЕсли;
			
			ТекстHTML = ТекстHTML + "<li>" + Префикс + Строки.ТекстHTML + Постфикс + "</li>" + Символы.ПС;
		КонецЦикла;
		ТекстHTML = ТекстHTML + "</ul>" + Символы.ПС;
		
		Раздел = "";
		Текст = "";
		КлассCSS = "";
		Для Каждого Строки Из Обновление Цикл
			Если Раздел <> Строки.Раздел Тогда
				Раздел = Строки.Раздел;
				КлассCSS = "";
				Если Раздел = "Новый функционал" Тогда
					КлассCSS = "[+] ";
				ИначеЕсли Раздел = "Изменения" Тогда
					КлассCSS = "[*] ";
				ИначеЕсли Раздел = "Исправление ошибок" Тогда
					КлассCSS = "[-] ";
				ИначеЕсли Раздел = "Внимание!" ИЛИ Раздел = "Новости" Тогда
					КлассCSS = "[#] ";
				КонецЕсли;
			КонецЕсли;

			Префикс 		= "";
			Постфикс 		= "";
			Если Строки.ЦветТекста.Зеленый <> -1 И Строки.ЦветТекста.Красный <> -1 
				И Строки.ЦветТекста.Синий <> -1 И Найти(Строки.Текст, "[url=") = 0  Тогда
				Префикс 	= Префикс  + "[color=rgb(" + Строка(Строки.ЦветТекста.Красный) + "," 
					+ Строка(Строки.ЦветТекста.Зеленый) + "," + Строка(Строки.ЦветТекста.Синий) + ")]";
				Постфикс 	= Постфикс + "[/color]";
			КонецЕсли;			
			
			Текст = Текст + КлассCSS + Префикс + Строки.Текст + Постфикс + Символы.ПС;
		КонецЦикла;

		ТД = Новый ТекстовыйДокумент;
		
		Если Найти(НРег(мФайлHTML), ".html") > 0 ИЛИ Найти(НРег(мФайлHTML), ".htm") > 0 Тогда
			ТекстНеОбработанный = ТекстHTML;
		Иначе
			ТекстНеОбработанный = Текст;
		КонецЕсли;
	
		ТД.УстановитьТекст(ТекстНеОбработанный);		
		ТД.Записать(мФайлHTML);
		
		Лог.Информация("Успешное завершение формирования текста рассылки.");
		
	Исключение
		Лог.Ошибка("Не удалось получить текст последнего текущего обновления конфигурации через " 
			+ ИмяCOMСоединителя + " по причине: " + ОписаниеОшибки());
		КодВозврата = 56;
		Возврат;
	КонецПопытки;

	// Очищаем соединения
	Если Соединение <> Неопределено Тогда
		Попытка
			ОсвободитьОбъект(Соединение);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Если COMОбъект <> Неопределено Тогда
		Попытка
			ОсвободитьОбъект(COMОбъект);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	ВыполнитьСборкуМусора();

КонецПроцедуры

// oscript "c:\work\uni\uni_script.os" /GetImageForMailing /F "c:\Base1C\IT_Общая\it_3.1.8.3" /N "Администратор" /P "" /UPath "c:\work\news1" /Maket "ОписаниеИзмененийСистемы" /Settings "c:\work\uni\settings.ini" /Section "SETTINGS" /SectionURL "URL"
Процедура ПолучитьКартинкиДляРассылки()

	Лог.Информация("Получение изображения для рассылки");

	Если НЕ ЗначениеЗаполнено(Параметры["/UPath"]) Тогда
		Лог.Ошибка("Не заполнен параметр ""/UPath"" - путь к HTML документу с описанием изменений!");
		КодВозврата = 54;
		Возврат;
	КонецЕсли;
	КаталогВыгрузки = Параметры["/UPath"];	

	Если НЕ ЗначениеЗаполнено(Параметры["/Settings"]) Тогда
		Лог.Ошибка("Не заполнен параметр ""/Settings"" - файл с настройками экспорта!");
		КодВозврата = 54;
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Параметры["/Section"]) Тогда
		Лог.Ошибка("Не заполнен параметр ""/Section"" - секция в файле с настройками экспорта!");
		КодВозврата = 54;
		Возврат;
	КонецЕсли;	
	
	Settings		 			= Параметры["/Settings"];
	Section			 			= Параметры["/Section"];
	Настройки 					= ПрочитатьСекциюINIФайла(Settings, Section);
	SectionURL		 			= Параметры["/SectionURL"];
	НастройкиURL				= ПрочитатьСекциюINIФайла(Settings, SectionURL);
	ПревьюФорматФайла			= Настройки.Получить("FORMATJPG");	

	Файл = Новый Файл(КаталогВыгрузки);
	Если НЕ Файл.Существует() Тогда
		СоздатьКаталог(КаталогВыгрузки);
	КонецЕсли;	
	
	Если Настройки.Получить("MAKET") = Неопределено Тогда
		ИмяМакета = "ОписаниеИзмененийСистемы";
	Иначе
		ИмяМакета = Настройки.Получить("MAKET");
	КонецЕсли;
	
	ИмяCOMСоединителя = "V83.ComConnector";
	Попытка
		COMОбъект = Новый COMОбъект(ИмяCOMСоединителя);
	Исключение
		Лог.Ошибка("Не удалось подключиться через " + ИмяCOMСоединителя + " по причине: " + ОписаниеОшибки());
		КодВозврата = 55;
		Возврат;
	КонецПопытки;

	Попытка
		Соединение 				= COMОбъект.Connect(Параметры["СтрокаПодключения"]);
		мВерсияКонфигурации 	= Соединение.Метаданные().Версия;
		
		
		// Получаем текстовый файл описания
		Макет = Соединение.ПолучитьОбщийМакет(ИмяМакета);
		
		Обновление = Новый ТаблицаЗначений;
		Обновление.Колонки.Добавить("Раздел");		
		Обновление.Колонки.Добавить("ТекстHTML");		
		
		ТД 			= Новый ТекстовыйДокумент;
		Текст 		= "";
		ТекстHTML 	= "";
		Области 	= Макет.ПолучитьОбласть("Версия" + СтрЗаменить(мВерсияКонфигурации, ".", "_"));
		Раздел 		= "Новый функционал";
		Для а = 1 по Области.ВысотаТаблицы Цикл
		
			Текст 	= Области.Область(а, 2, а, 2).Текст;			
			Если ПустаяСтрока(Текст) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Текст = "Новый функционал" 
				ИЛИ Текст = "Изменения" 
				ИЛИ Текст = "Исправление ошибок" 
				ИЛИ Текст = "Внимание!" 
				ИЛИ Текст = "Новости"
				ИЛИ Текст = "Замечания к обновлению" Тогда
				Раздел = Текст;
				Продолжить;
			КонецЕсли;
				
			// Удаляем теги
			ТекстHTML = СтрЗаменить(Текст,		"&", 		"&amp;");
			ТекстHTML = СтрЗаменить(ТекстHTML, 	"<", 		"&lt;");
			ТекстHTML = СтрЗаменить(ТекстHTML, 	">", 		"&gt;");
			ТекстHTML = СтрЗаменить(ТекстHTML, 	Символы.ПС, "<br />");
			
			Текст = СтрЗаменить(Текст, Символы.ПС, " ");
			Пока Найти(Текст, "  ") > 0 Цикл
				Текст = СтрЗаменить(Текст, "  ", " ");
			КонецЦикла;			
			Текст = СокрЛП(Текст);
			
			// Это гиперссылка
			Если Области.Область(а, 2, а, 2).Гиперссылка = Истина Тогда
				ИмяОбласти 		= Области.Область(а, 2, а, 2).Имя;				
				НайденныйURL 	= НастройкиURL.Получить(ИмяОбласти);				
				Если НайденныйURL = Неопределено Тогда
					НайденныйURL = Области.Область(а, 2, а, 2).Имя;
					Лог.Ошибка("В файле настроек сборки в секции <" + SectionURL + "> не указана гиперссылка для области <" + НайденныйURL + ">");
					КодВозврата = 57;
				КонецЕсли;			
								
				Если СтрНайти(НРег(НайденныйURL), "youtu") > 0 Тогда
					ПоследнийСлеш	= СтрНайти(НайденныйURL, "/", НаправлениеПоиска.СКонца);
					ИДВидео 		= Строка(Сред(НайденныйURL, ПоследнийСлеш +1));
					Если Не ПустаяСтрока(ИДВидео) Тогда
						АдресФайла		  = "http://img.youtube.com/vi/" + ИДВидео + "/" + ПревьюФорматФайла;
						ПутьДляСохранения = КаталогВыгрузки + "\" + ИДВидео + ".jpg";						
						НастройкаСохранения	= Новый Соответствие;
						НастройкаСохранения.Вставить("МестоХранения", "Сервер");
						НастройкаСохранения.Вставить("Путь", ПутьДляСохранения);
						НастройкиСоединения = Новый Соответствие;
						НастройкиСоединения.Вставить("Таймаут", 30);
						НастройкиСоединения.Вставить("Порт", 80);
						Результат = ПолучитьФайлИзИнтернет(АдресФайла, НастройкаСохранения, НастройкиСоединения);
						Если Результат.Статус Тогда
							Лог.Информация("Получено изображение: " + ИДВидео + ".jpg");	
						Иначе	
							Лог.Ошибка(Результат.СообщениеОбОшибке);	
						КонецЕсли;							
					КонецЕсли;

				КонецЕсли;
			КонецЕсли;			

		КонецЦикла;

	Исключение
		Лог.Ошибка("Не удалось получить текст последнего текущего обновления конфигурации через " 
			+ ИмяCOMСоединителя + " по причине: " + ОписаниеОшибки());
		КодВозврата = 56;
		Возврат;
	КонецПопытки;

	// Очищаем соединения
	Если Соединение <> Неопределено Тогда
		Попытка
			ОсвободитьОбъект(Соединение);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Если COMОбъект <> Неопределено Тогда
		Попытка
			ОсвободитьОбъект(COMОбъект);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	ВыполнитьСборкуМусора();

КонецПроцедуры

//oscript "c:\work\uni\uni_script.os" /MakeMailing /F "c:\Base1C\IT_Общая\it_3.1.8.6_demo" /N "Администратор" /P "" /UPath "c:\work\news1\mailing.html" /Maket "ОписаниеИзмененийСистемы" /Settings "c:\work\uni\settings.ini" /Section "SETTINGS" /SectionURL "URL"
Процедура ПодготовитьТекстРассылки()
	
	Лог.Информация("Подготовка текста для рассылки");
	
	Если НЕ ЗначениеЗаполнено(Параметры["/UPath"]) Тогда
		Лог.Ошибка("Не заполнен параметр ""/UPath"" - путь к HTML документу с описанием изменений!");
		КодВозврата = 54;
		Возврат;
	КонецЕсли;
	ФайлHTML = Параметры["/UPath"];	

	Если НЕ ЗначениеЗаполнено(Параметры["/Settings"]) Тогда
		Лог.Ошибка("Не заполнен параметр ""/Settings"" - файл с настройками экспорта!");
		КодВозврата = 54;
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Параметры["/Section"]) Тогда
		Лог.Ошибка("Не заполнен параметр ""/Section"" - секция в файле с настройками экспорта!");
		КодВозврата = 54;
		Возврат;
	КонецЕсли;	
	
	Settings		 			= Параметры["/Settings"];
	Section			 			= Параметры["/Section"];
	Настройки 					= ПрочитатьСекциюINIФайла(Settings, Section);
	SectionURL		 			= Параметры["/SectionURL"];
	НастройкиURL				= ПрочитатьСекциюINIФайла(Settings, SectionURL);
	ВерсияИзНастроек			= Настройки.Получить("VERSION");
	СписокВерсийДляОбновления	= Настройки.Получить("VERSION_UPDATES");
	ВерсияСервераЛицензирования = Настройки.Получить("VERSION_LICENSE_SERVER");
	ИмяПрограммы 			 	= Настройки.Получить("PROGRAM");
	ИдентефикаторПрограммы		= Настройки.Получить("SITE_ID_PROGRAM");
	ПревьюШирина				= Настройки.Получить("FORMATJPG_WIDTH");
	ПревьюВысота				= Настройки.Получить("FORMATJPG_HEIGHT");
	Если ПревьюШирина = Неопределено Тогда
		ПревьюШирина 			= "640";
		ПревьюВысота 			= "480";
	КонецЕсли;

	// Проверка существования каталога куда сохраняем и если его нет, то создаем.
	Файл = Новый Файл(ФайлHTML);
	Если НЕ ФайлСуществует(Файл.Путь) Тогда
		СоздатьКаталог(Файл.Путь)
	КонецЕсли;	
	
	Если Настройки.Получить("MAKET") = Неопределено Тогда
		ИмяМакета = "ОписаниеИзмененийСистемы";
	Иначе
		ИмяМакета = Настройки.Получить("MAKET");
	КонецЕсли;
	
	ИмяCOMСоединителя = "V83.ComConnector";
	Попытка
		COMОбъект = Новый COMОбъект(ИмяCOMСоединителя);
	Исключение
		Лог.Ошибка("Не удалось подключиться через " + ИмяCOMСоединителя + " по причине: " + ОписаниеОшибки());
		КодВозврата = 55;
		Возврат;
	КонецПопытки;

	Попытка
		Соединение 				= COMОбъект.Connect(Параметры["СтрокаПодключения"]);
		мВерсияКонфигурации 	= Соединение.Метаданные().Версия;
		
		// Получаем текстовый файл описания
		Макет = Соединение.ПолучитьОбщийМакет(ИмяМакета);
		
		Обновление = Новый ТаблицаЗначений;
		Обновление.Колонки.Добавить("Раздел");		
		Обновление.Колонки.Добавить("ТекстHTML");	
		
		ТД 			= Новый ТекстовыйДокумент;
		Текст 		= "";
		ТекстHTML 	= "";
		Области 	= Макет.ПолучитьОбласть("Версия" + СтрЗаменить(мВерсияКонфигурации, ".", "_"));
		Раздел 		= "Новый функционал";
		Для а = 1 по Области.ВысотаТаблицы Цикл
		
			Текст 	= Области.Область(а, 2, а, 2).Текст;			
			Если ПустаяСтрока(Текст) Тогда
				Продолжить;
			КонецЕсли;
			
			Если Текст = "Новый функционал" 
				ИЛИ Текст = "Изменения" 
				ИЛИ Текст = "Исправление ошибок" 
				ИЛИ Текст = "Внимание!" 
				ИЛИ Текст = "Новости"
				ИЛИ Текст = "Замечания к обновлению" Тогда
				Раздел = Текст;
				Продолжить;
			КонецЕсли;
				
			// Удаляем теги
			ТекстHTML = СтрЗаменить(Текст, 		"&", 		"&amp;");
			ТекстHTML = СтрЗаменить(ТекстHTML, 	"<", 		"&lt;");
			ТекстHTML = СтрЗаменить(ТекстHTML, 	">", 		"&gt;");
			ТекстHTML = СтрЗаменить(ТекстHTML, 	Символы.ПС, "<br />");
			
			Текст = СтрЗаменить(Текст, Символы.ПС, " ");
			Пока Найти(Текст, "  ") > 0 Цикл
				Текст = СтрЗаменить(Текст, "  ", " ");
			КонецЦикла;			
			Текст = СокрЛП(Текст);			

			// Это гиперссылка
			Если Области.Область(а, 2, а, 2).Гиперссылка = Истина Тогда
				ИмяОбласти 		= Области.Область(а, 2, а, 2).Имя;				
				НайденныйURL 	= НастройкиURL.Получить(ИмяОбласти);				
				Если НайденныйURL = Неопределено Тогда
					НайденныйURL = Области.Область(а, 2, а, 2).Имя;
					Лог.Ошибка("В файле настроек сборки в секции <" + SectionURL + "> не указана гиперссылка для области <" + НайденныйURL + ">");
					КодВозврата = 58;
				КонецЕсли;
				ТекстHTML 		= "<a href=""" + НайденныйURL + """ target=""_blank"">" + ТекстHTML + "</a>";
								
				Если СтрНайти(НРег(НайденныйURL), "youtu") > 0 Тогда
					ПоследнийСлеш	= СтрНайти(НайденныйURL, "/", НаправлениеПоиска.СКонца);
					ИДВидео 		= Сред(НайденныйURL, ПоследнийСлеш +1);
					Если Не ПустаяСтрока(ИДВидео) Тогда
						ТекстHTML 	= ТекстHTML + "<br>" + Символы.ПС;
						ТекстHTML 	= ТекстHTML + "<a href=""" + НайденныйURL + """ target=""_blank""><img src=""https://softonit.ru/upload/news/" + Строка(ИДВидео)
						 + ".jpg"" title=""Видео урок"" alt=""Видео урок"" width=""" + Строка(ПревьюШирина) + """ height=""" + Строка(ПревьюВысота) + """ /></a><br>";
					КонецЕсли;	
				КонецЕсли;
			КонецЕсли;
			
			Если Области.Область(а, 2, а, 2).Отступ = 0 ИЛИ Обновление.Количество() = 0 Тогда
				Стр 			= Обновление.Добавить();
				Стр.Раздел 		= Раздел;			
				Стр.ТекстHTML 	= ТекстHTML;				
			Иначе
				Стр 			= Обновление.Получить(Обновление.Количество() - 1);
				Стр.ТекстHTML 	= Стр.ТекстHTML + "<br />" + Символы.ПС;				
				Для ИндексОтступов = 1 По Области.Область(а, 2, а, 2).Отступ Цикл
					Стр.ТекстHTML 	= Стр.ТекстHTML + "&nbsp;";					
				КонецЦикла;
				Стр.ТекстHTML 	= Стр.ТекстHTML + ТекстHTML;				
			КонецЕсли;			

		КонецЦикла;
		
		Раздел 			= "";
		ТекстHTML 		= "";
		
		// Подготовка шапки.
		ШапкаРассылки	= "<!-- Шапка -->
						| <h1 style=""text-align: center;"">Пришло время для установки обновлений!</h1>
		 				| <br>
						| <p style=""margin:10px 0;padding:0;color:#202020;font-family:Helvetica;font-size:16px;line-height:150%;text-align:left"">
			 			| Сегодня вышло очередное обновление нашего решения """ + ИмяПрограммы + """ версии ";
		
		МассивВерсийИзНастроек = РазложитьСтрокуВМассивПодстрок(ВерсияИзНастроек);
				 
		СчетчикСтрок = 0;
		Для Каждого СтрокаВерсия Из МассивВерсийИзНастроек Цикл
			//<b><a href="https://softonit.ru/blog/news/updateit/updit-3-1-15-6/" target="_blank">3.1.8.4</a></b> и
			СчетчикСтрок  = СчетчикСтрок + 1;
			ШапкаРассылки = ШапкаРассылки + "<b><a href=""https://softonit.ru/blog/news/updateit/upd" + ИдентефикаторПрограммы +"-" + СтрЗаменить(СтрокаВерсия, ".", "-") + "/"" target=""_blank"">" + Строка(СтрокаВерсия) + "</a></b>";
			Если СчетчикСтрок > 1 Тогда
				ШапкаРассылки = ШапкаРассылки + " и ";
			КонецЕсли;			
		КонецЦикла;					 
		ШапкаРассылки 	= ШапкаРассылки + "<br></p>" + Символы.ПС;

		Для Каждого Строки Из Обновление Цикл
			Если Раздел <> Строки.Раздел Тогда
				Если НЕ ПустаяСтрока(ТекстHTML) тогда
					ТекстHTML = ТекстHTML + "</ul>" + Символы.ПС;
				КонецЕсли;
				ТекстHTML 	= ТекстHTML + "<h2>" + Строки.Раздел + "</h2>" + Символы.ПС;
				Раздел 		= Строки.Раздел;
				КлассCSS 	= "";
				Если Раздел = "Новый функционал" Тогда
					КлассCSS = "updnew";
				ИначеЕсли Раздел = "Изменения" Тогда
					КлассCSS = "updedt";
				ИначеЕсли Раздел = "Исправление ошибок" Тогда
					КлассCSS = "upderr";
				ИначеЕсли Раздел = "Внимание!" ИЛИ Раздел = "Новости" Тогда
					КлассCSS = "updnws";
				ИначеЕсли Раздел = "Замечания к обновлению" Тогда
					КлассCSS = "upderr";
				КонецЕсли;
				ТекстHTML = ТекстHTML + "<ul class=""" + КлассCSS + """>" + Символы.ПС;
			КонецЕсли;		
			
			ТекстHTML = ТекстHTML + "<li>" + Строки.ТекстHTML + "</li>" + Символы.ПС;
		КонецЦикла;
		ТекстHTML = ТекстHTML + "</ul>" + Символы.ПС;
			
		ТекстHTML = ШапкаРассылки + ТекстHTML;

		// Подвал рассылки.
		ПодвалРассылки = "<!-- Подвал -->" + Символы.ПС + "<p>" + Символы.ПС;
		МассивВерсийДляОбновления = РазложитьСтрокуВМассивПодстрок(СписокВерсийДляОбновления);
		Если МассивВерсийДляОбновления.Количество() > 0 Тогда
			ПодвалРассылки = ПодвалРассылки + "Обновление устанавливается на версии: ";
			Для Каждого СтрокаВерсия Из МассивВерсийДляОбновления Цикл				
				ПодвалРассылки = ПодвалРассылки + "<b><a href=""https://softonit.ru/blog/news/updateit/upd" + ИдентефикаторПрограммы +"-" + СокрЛП(СтрЗаменить(СтрокаВерсия, ".", "-"))
					+ "/"" target=""_blank"">" + СокрЛП(Строка(СтрокаВерсия)) + "</a></b>, " + Символы.ПС;
			КонецЦикла;
			ПодвалРассылки = Сред(ПодвалРассылки, 1, СтрДлина(ПодвалРассылки) - 3); // последний пробел и запятая						
		КонецЕсли;	
		ТекстHTML = ТекстHTML + ПодвалРассылки + Символы.ПС + "<br>" + Символы.ПС;

		// Версия сервера лицензирования.	
		Если ИдентефикаторПрограммы = "it" Тогда	
			ТекстHTML = ТекстHTML + "Версия сервера лицензирования: <b>" + Строка(ВерсияСервераЛицензирования) + "</b><br>" + Символы.ПС;
		КонецЕсли;

		// Подпись.
		ТекстHTML = ТекстHTML + "Скачать обновления вы можете на нашем <a href=""https://softonit.ru/personal/lk/"" target=""_blank"">сайте</a>
			| предварительно авторизовавшись, используя Ваш логин и пароль, далее зайти в меню ""Техподдержка &gt; Личный кабинет"" и скачать необходимые обновления.
			| Если на данной странице Вы не видите обновлений, хотя Вы являетесь обладателем действующей подписки, напишите 
			| <a href=""https://softonit.ru/personal/tickets/"" target=""_blank"">обращение</a> на нашем сайте, и мы включим Вам возможность скачивать обновления.<br>
			| Так же, если срок действия предоставления поддержки и обновлений истек, Вы можете его продлить в <a href=""https://softonit.ru/personal/lk/"" target=""_blank"">личном кабинете</a>.<br>
			| Вы нашли ошибку, или у Вас есть пожелание/предложения по программе? Разместите тиккет в нашей <a href=""https://softonit.ru/personal/tickets/"" target=""_blank"">тиккет-системе</a>&nbsp;
			| и мы обязательно Вам поможем!<br>
			| <br>
			| Спасибо, что остаетесь с нами!<br>
			| <br>
			| С уважением, служба поддержки <a href=""https://softonit.ru"">https://softonit.ru</a>
			| </p>";
		
		// Вывод в файл.
		ТД = Новый ТекстовыйДокумент;	
		ТД.УстановитьТекст(ТекстHTML);		
		ТД.Записать(ФайлHTML);
		
		Лог.Информация("Файл макета html (.\build\news\mailing.html) для рассылки создан.");
		
	Исключение
		Лог.Ошибка("Не удалось получить текст последнего текущего обновления конфигурации через " 
			+ ИмяCOMСоединителя + " по причине: " + ОписаниеОшибки());
		КодВозврата = 56;
		Возврат;
	КонецПопытки;

	// Очищаем соединения
	Если Соединение <> Неопределено Тогда
		Попытка
			ОсвободитьОбъект(Соединение);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Если COMОбъект <> Неопределено Тогда
		Попытка
			ОсвободитьОбъект(COMОбъект);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	ВыполнитьСборкуМусора();

КонецПроцедуры

Процедура ПодготовитьФайлОписанияОбновления()
	
	// Скачиваем файл в указанную папку.
	СкачатьФайлыСFTP();

	КаталогСФайлом	= Параметры["/UPath"];
	КаталогСФайлом	= ДополнитьСтрокуСлешем(КаталогСФайлом);
	ИмяФайла		= Параметры["/File"];	
	ПутьКФайлуZip	= КаталогСФайлом + ИмяФайла;	
	Лог.Информация("Распаковываем updates.zip в " + КаталогСФайлом);
	Архив = Новый ЧтениеZipФайла(ПутьКФайлуZip);
	Архив.ИзвлечьВсе(КаталогСФайлом, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
	Архив.Закрыть();
	Лог.Информация("Добавляем информацию о новой версии");

	Если НЕ ЗначениеЗаполнено(Параметры["/Settings"]) Тогда
		Лог.Ошибка("Не заполнен параметр ""/Settings"" - файл с настройками экспорта!");
		КодВозврата = 54;
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Параметры["/Section"]) Тогда
		Лог.Ошибка("Не заполнен параметр ""/Section"" - секция в файле с настройками экспорта!");
		КодВозврата = 54;
		Возврат;
	КонецЕсли;

	Settings		 	= Параметры["/Settings"];
	Section			 	= Параметры["/Section"];
	Настройки 			= ПрочитатьСекциюINIФайла(Settings, Section);
	SITE_ID_PROGRAM		= Параметры["/SITE_ID_PROGRAM"];
	Если НЕ ЗначениеЗаполнено(SITE_ID_PROGRAM) Тогда
		SITE_ID_PROGRAM	= Настройки.Получить("SITE_ID_PROGRAM"); // it
	КонецЕсли;
	VERSION 			= Настройки.Получить("VERSION");			// 3.1.9.1
	VERSION_UPDATES		= Настройки.Получить("VERSION_UPDATES");	// 3.1.8.6
	DATEVERSION			= Настройки.Получить("DATEVERSION");		// 04.03.2021
	ПутьКАрхивуОбновления = Параметры["/Catalog"];

	Если ЗначениеЗаполнено(ПутьКАрхивуОбновления) Тогда
		ПутьКАрхивуОбновления = ДополнитьСтрокуСлешем(ПутьКАрхивуОбновления);
		НайденныеФайлы = НайтиФайлы(ПутьКАрхивуОбновления, SITE_ID_PROGRAM + "_" + СтрЗаменить(VERSION, ".", "_") + "_upd.zip", Истина);
		Если НайденныеФайлы.Количество() = 0 Тогда
			НайденныеФайлы = НайтиФайлы(ПутьКАрхивуОбновления, SITE_ID_PROGRAM + "*" + "_upd.zip", Истина);
		КонецЕсли;
		Для Каждого Файл из НайденныеФайлы Цикл
			Если Файл.ЭтоКаталог() Тогда
				 Продолжить;
			КонецЕсли;			
			ПутьКАрхивуОбновления = Файл.ПолноеИмя;
			Прервать;
	   КонецЦикла;		

	Иначе
		ПутьКАрхивуОбновления = ДополнитьСтрокуСлешем(ПутьКАрхивуОбновления);
		ПутьКАрхивуОбновления = ПутьКАрхивуОбновления + SITE_ID_PROGRAM + "_" + СтрЗаменить(VERSION, ".", "_") + "_upd.zip";

	КонецЕсли;
	НовыйФайл			= Новый Файл(ПутьКАрхивуОбновления);
	FILE_SIZE			= СтрЗаменить(ПредставлениеРазмераФайла(НовыйФайл.Размер()), ",", ".");

	СтрокаXML = 
	"	<update product=""" + SITE_ID_PROGRAM + """ vendor=""SoftOnIT.RU"">
	|		<file>http://softonit.ru/personal/lk/</file>
	|		<size>" + FILE_SIZE + "</size>
	|		<date>" + DATEVERSION + "</date>
	|		<newsurl>https://softonit.ru/company/news/upd" + SITE_ID_PROGRAM + "-" + СтрЗаменить(VERSION, ".", "-") + "/</newsurl>
	|		<newstexturl>" + СтрЗаменить(VERSION, ".", "_") + ".txt</newstexturl>
	|		<version>" + VERSION + "</version>
	|		<target>" + VERSION_UPDATES + "</target>
	|	</update>";

	ТекстовыйДокумент = Новый ТекстовыйДокумент();
	ТекстовыйДокумент.Прочитать(КаталогСФайлом + "updates.xml");
	
	// Находим строку с последней записью
	СтрПоследнейЗаписи = ТекстовыйДокумент.КоличествоСтрок();
	Индекс = ТекстовыйДокумент.КоличествоСтрок();
	Пока Индекс > 0 Цикл
		Стр = ТекстовыйДокумент.ПолучитьСтроку(Индекс);
		Если СтрНайти(Стр, "<update product=""" + SITE_ID_PROGRAM + """ vendor=""SoftOnIT.RU"">") > 0 Тогда
			СтрПоследнейЗаписи = Индекс;
			Прервать;
		КонецЕсли;
		Индекс = Индекс - 1;
	КонецЦикла;

	// Находим закрытие тега </update> и на следующую строку добавляем новую запись
	ОшибкаДобавленияЗаписи = Истина;
	Для Индекс = СтрПоследнейЗаписи По ТекстовыйДокумент.КоличествоСтрок() Цикл
		Стр = ТекстовыйДокумент.ПолучитьСтроку(Индекс);
		Если СтрНайти(Стр, "</update>") > 0 Тогда
			Лог.Информация("Информация о новой версии успешно добавлена");
			ТекстовыйДокумент.ВставитьСтроку(Индекс + 1, СтрокаXML);
			ОшибкаДобавленияЗаписи = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Если ОшибкаДобавленияЗаписи Тогда
		Лог.Ошибка("Не удалось добавить информацию о новой версии!");
		КодВозврата = 54;
		Возврат;
	КонецЕсли;

	ТекстовыйДокумент.Записать(КаталогСФайлом + "updates.xml");
	ТекстовыйДокумент = Неопределено;

	Лог.Информация("Упаковка updates.zip");
	УдалитьФайлы(ПутьКФайлуZip);
	
	НовыйАрхив = Новый ЗаписьZipФайла(ПутьКФайлуZip);
	НовыйАрхив.Добавить(КаталогСФайлом + "updates.xml", РежимСохраненияПутейZIP.НеСохранятьПути);	
	НовыйАрхив.Записать();
	НовыйАрхив = Неопределено;

	УдалитьФайлы(КаталогСФайлом + "updates.xml");

КонецПроцедуры

Процедура ОбновитьКонфигурациюИзХранилища()

//				- /F <путь> (тип базы - файловая)
//				- /S <адрес> (тип базы - серверная, <Имя компьютера, работающего сервером приложений>\<Ссылочное имя информационной базы, известное в рамках сервера 1С:Предприятия 8>)
//				- /N (логин администратора ИБ, если не задан, то без логина)
//				- /P (пароль администратора ИБ)
//				- /ConfigurationRepositoryF <путь> (Путь к хранилищу конфигураци��)
//				- /ConfigurationRepositoryN логин
//				- /ConfigurationRepositoryP пароль

	Если НЕ ЗначениеЗаполнено(Параметры["/ConfigurationRepositoryF"]) Тогда
		Лог.Ошибка("Не заполнен параметр ""/ConfigurationRepositoryF"" - путь к хранилищу!");
		КодВозврата = 57;
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Параметры["/ConfigurationRepositoryN"]) Тогда
		Лог.Ошибка("Не заполнен параметр ""/ConfigurationRepositoryN"" - пользователь хранилища!");
		КодВозврата = 58;
		Возврат;
	КонецЕсли;

	// Шаг 1. Загружаем все изменения из хранилища
	НомерШага = 1;
	ПараметрыЗапуска 			= Конфигуратор.ПолучитьПараметрыЗапуска();
	ПараметрыЗапуска.Добавить("/ConfigurationRepositoryUpdateCfg -revised -force");
	ПараметрыЗапуска.Добавить("/ConfigurationRepositoryF """ + Параметры["/ConfigurationRepositoryF"] + """");	
	ПараметрыЗапуска.Добавить("/ConfigurationRepositoryN """ + Параметры["/ConfigurationRepositoryN"] + """");
	Если ЗначениеЗаполнено(Параметры["/ConfigurationRepositoryP"]) Тогда
		ПараметрыЗапуска.Добавить("/ConfigurationRepositoryP """ + Параметры["/ConfigurationRepositoryP"] + """");
	КонецЕсли;
		
	Лог.Информация("ШАГ " + Строка(НомерШага)); 
	Лог.Информация("Получаем конфигурацию из хранилища");
	Попытка
	    Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска);
		Лог.Информация("Получение завершено");
	Исключение												   
		Лог.Ошибка("Произошла ошибка при получении конфигурации из хранилища " + Конфигуратор.ВыводКоманды());		
		КодВозврата = 59;
		Возврат;
	КонецПопытки;
	НомерШага = НомерШага + 1;
	
	// Шаг 2. Обновляем конфигурацию
	ПараметрыЗапуска 			= Конфигуратор.ПолучитьПараметрыЗапуска();
	ПараметрыЗапуска.Добавить("/UpdateDBCfg");
	
	Лог.Информация("ШАГ " + Строка(НомерШага));
	Лог.Информация("Обновление конфигурации базы данных");
	Попытка
	    Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска);
		Лог.Информация("Обновление конфигурации завершено");
	Исключение												   
		Лог.Ошибка("Произошла ошибка при обновлении конфигурации базы данных " + Конфигуратор.ВыводКоманды());
		КодВозврата = 60;
		Возврат;
	КонецПопытки;
	НомерШага = НомерШага + 1;

	// Обновляем при необходимости
	Результат = ВыполнитьПрограммноеОбновлениеКонфигурации();
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ВыполнитьСборкуМусора();
	
	Лог.Информация("Успешное завершение обновления конфигурации из хранилища.");

КонецПроцедуры

Процедура ОбновитьКонфигурациюИзКаталога()

//				- /F <путь> (тип базы - файловая)
//				- /S <адрес> (тип базы - серверная, <Имя компьютера, работающего сервером приложений>\<Ссылочное имя информационной базы, известное в рамках сервера 1С:Предприятия 8>)
//				- /N (логин администратора ИБ, если не задан, то без логина)
//				- /P (пароль администратора ИБ)
//				- /Catalog <путь> (Путь к каталогу конфигурации)

	Если НЕ ЗначениеЗаполнено(Параметры["/Catalog"]) Тогда
		Лог.Ошибка("Не заполнен параметр ""/Catalog"" - путь каталогу с файлами конфигурации!");
		КодВозврата = 61;
		Возврат;
	КонецЕсли;

	Каталог = Параметры["/Catalog"];

	// Шаг 1. Обновляем конфигурацию из папки
	НомерШага = 1;
	ПараметрыЗапуска 			= Конфигуратор.ПолучитьПараметрыЗапуска();
	ПараметрыЗапуска.Добавить("/LoadConfigFromFiles");
	ПараметрыЗапуска.Добавить("""" + Каталог + """");	
	
	Лог.Информация("ШАГ " + Строка(НомерШага)); 
	Лог.Информация("Загружаем конфигурацию из файлов");
	Попытка
	    Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска);
		Лог.Информация("Загрузка конфигурации завершена");
	Исключение												   
		Лог.Ошибка("Произошла ошибка при загрузке конфигурации из файлов " + Конфигуратор.ВыводКоманды());		
		КодВозврата = 62;
		Возврат;
	КонецПопытки;
	НомерШага = НомерШага + 1;
	
	Конфигуратор.УстановитьКонтекст("/F" + Параметры["/F"], "", "");
	ПараметрыЗапуска2 	= Конфигуратор.ПолучитьПараметрыЗапуска();
	ПараметрыЗапуска2.Добавить("/UpdateDBCfg");
	
	Лог.Информация("ШАГ " + Строка(НомерШага));
	Лог.Информация("Обновление загруженной конфигурации базы данных");
	Попытка
	    Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска2);
		Лог.Информация("Обновление загруженной конфигурации завершено");
	Исключение												   
		Лог.Ошибка("Произошла ошибка при обновлении загруженной конфигурации базы данных " + Конфигуратор.ВыводКоманды());
		КодВозврата = 63;
		Возврат;
	КонецПопытки;
	НомерШага = НомерШага + 1;
	
	// Обновляем при необходимости
	Результат = ВыполнитьПрограммноеОбновлениеКонфигурации();
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ВыполнитьСборкуМусора();
	
	Лог.Информация("Успешное завершение загрузки конфигурации из файлов");

КонецПроцедуры

Процедура ЗагрузитьРасширениеИзФайлов()
//			- Итоговая строка: 
//				/LOADEXTENSIONFROMFILES /F D:\Bases\Base_Git /N Администратор /Catalog D:\MikoProject\build\extension /Extension "ПодсистемаТелефонии40_УИТ8"
//				/LOADEXTENSIONFROMFILES /F (Путь к основной конфигурации) /N (Пользователь) /P (Пароль, если есть) /Catalog (Путь к файлам расширения) /Extension (Наименование расширения)
//			- /Extension <Имя расширения> (Имя расширения, которое будет загружено, если расширения нет в списке будет создано новое).
//			- /Catalog <путь> (Путь к каталогу c файлами расширения, которое необходимо загрузить).

	Если НЕ ЗначениеЗаполнено(Параметры["/Catalog"]) Тогда
		Лог.Ошибка("Не заполнен параметр ""/Catalog"" - путь каталогу с файлами расширения!");
		КодВозврата = 110;
		Возврат;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Параметры["/Extension"]) Тогда
		Лог.Ошибка("Не заполнен параметр ""/Extension"" - имя расширения!");
		КодВозврата = 111;
		Возврат;
	КонецЕсли;

	// Шаг 1. Загружаем расширение из файлов в основную конфигурацию.
	НомерШага = 1;
	ПараметрыЗапуска = Конфигуратор.ПолучитьПараметрыЗапуска();

	ПараметрыЗапуска.Добавить("/LoadConfigFromFiles");
	ПараметрыЗапуска.Добавить(Параметры["/Catalog"]);	
	ПараметрыЗапуска.Добавить("-Extension " + Параметры["/Extension"]);
	ПараметрыЗапуска.Добавить("/UpdateDBCfg");
	
	Лог.Информация("ШАГ " + Строка(НомерШага)); 
	Попытка
		Лог.Информация("Приступаем к загрузке расширения");
	    Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска);
		Лог.Информация("Загрузка расширения завершена успешно");
	Исключение												   
		Лог.Ошибка("Произошла ошибка при загрузке расширения из файлов " + Конфигуратор.ВыводКоманды() + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));		
		КодВозврата = 112;
		Возврат;
	КонецПопытки;

КонецПроцедуры

Процедура СохранитьРасширениеВФайл()
//			- Итоговая строка:
//					- /SaveExtensionInFile /F D:\Bases\Base_Git /N Администратор /Catalog D:\ДопФайлы\miko.cfe /Extension "ПодсистемаТелефонии40_УИТ8"
//					- /SaveExtensionInFile /F <Путь к базе, где установлено расширение> /N <Пользователь ИБ, если есть> /Catalog <Путь, куда нужно сохранить файл расширения> /Extension "<Имя расширение, которое нужно найти в списке установленных в основной конфигурации>"	
//			- /Extension <Имя расширения> (Имя расширения, которое необходимо найти в основной конфигурации).
//			- /Catalog <путь> (Путь к каталогу куда необходимо сохранить файл расширения).

	Если НЕ ЗначениеЗаполнено(Параметры["/Catalog"]) Тогда
		Лог.Ошибка("Не заполнен параметр ""/Catalog"" - путь каталогу куда необходимо сохранить файл расширения!");
		КодВозврата = 112;
		Возврат;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Параметры["/Extension"]) Тогда
		Лог.Ошибка("Не заполнен параметр ""/Extension"" - имя расширения!");
		КодВозврата = 113;
		Возврат;
	КонецЕсли;

	// Шаг 1. Сохраняем расширение из основной конфигурации в файл в указанный каталог.
	НомерШага = 1;
	ПараметрыЗапуска = Конфигуратор.ПолучитьПараметрыЗапуска();
	ПараметрыЗапуска.Добавить(Параметры["/F"]);
	ПараметрыЗапуска.Добавить("/DumpCfg ");
	ПараметрыЗапуска.Добавить(Параметры["/Catalog"]);	
	ПараметрыЗапуска.Добавить("-Extension " + Параметры["/Extension"]);
	
	Лог.Информация("ШАГ " + Строка(НомерШага)); 
	Попытка
		Лог.Информация("Приступаем к сохранению расширения");
	    Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска);
		Лог.Информация("Сохранение расширения завершена успешно. Расширение сохранено в каталог: " + Параметры["/Catalog"]);
	Исключение												   
		Лог.Ошибка("Произошла ошибка при сохранении расширения в файл " + Конфигуратор.ВыводКоманды() + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));		
		КодВозврата = 114;
		Возврат;
	КонецПопытки;

КонецПроцедуры

Процедура GitПерейтиВВеткуИПолучить()

//				- /Catalog <путь> (Путь к папке с выгруженной конфигурацией в файлы)
//				- /Branch <ветка> (ветка в GIT)
	
	Если НЕ ЗначениеЗаполнено(Параметры["/Catalog"]) Тогда
		Лог.Ошибка("Не заполнен параметр ""/Catalog"" - путь каталогу с репозитарием git!");
		КодВозврата = 64;
		Возврат;
	КонецЕсли;
	КаталогРепозитория = Параметры["/Catalog"];
	
	Если НЕ ЗначениеЗаполнено(Параметры["/Branch"]) Тогда
		Ветка = "master";
	Иначе
		Ветка = Параметры["/Branch"];
	КонецЕсли;	
	
	НомерШага = 1;	
	Лог.Информация("ШАГ " + Строка(НомерШага)); 
	Лог.Информация("Устанавливаем рабочий каталог");	
	ГитРепозиторий.УстановитьРабочийКаталог(КаталогРепозитория);
	НомерШага = НомерШага + 1;
	
	Если НЕ ГитРепозиторий.ЭтоРепозиторий() Тогда
		Лог.Ошибка("Указанный каталог не является репозитарием git!");
		КодВозврата = 65;
		Возврат;		
	КонецЕсли;
	
	ГитРепозиторий.УстановитьНастройку("core.quotePath", "true", РежимУстановкиНастроекGit.Локально);

	Если ВРег(ГитРепозиторий.ПолучитьТекущуюВетку()) <> ВРег(СокрЛП(Ветка)) Тогда
		Лог.Информация("ШАГ " + Строка(НомерШага)); 
		Лог.Информация("Переходим в ветку " + Ветка);		
		ГитРепозиторий.ПерейтиВВетку(Ветка);
		НомерШага = НомерШага + 1;
	КонецЕсли;
	
	Лог.Информация("ШАГ " + Строка(НомерШага)); 
	Лог.Информация("Получаем изменения из удаленного репозитория ветки " + Ветка);
	ГитРепозиторий.Получить();
	НомерШага = НомерШага + 1;

	ТаблицаПодмодулей = ГитРепозиторий.ПолучитьСостояниеПодмодулей();
	Если ТаблицаПодмодулей.Количество() > 0 Тогда
		Лог.Информация("ШАГ " + Строка(НомерШага)); 
		Лог.Информация("Обновляем подмодули ветки " + Ветка);
		ГитРепозиторий.ОбновитьПодмодули(Истина, Истина);	
	КонецЕсли;

КонецПроцедуры

Процедура ЭкспортПроектаEDTВXML()

//		- /EdtProjectExportToConfigFiles  - экспортировать проект 1C:Enterprise Development Tools в файлы конфигурации платформы 1С:Предприятия.
//				ring edt workspace export --project %CI_PROJECT_DIR%/ --configuration-files %CI_PROJECT_DIR%/config --workspace-location %CI_PROJECT_DIR%/workspace
//				- /Project <проект> (Директория, содержащая проект 1C:Enterprise Development Tools.)
//				- /ConfigurationFiles <адрес> (Обязательный параметр Директория для экспорта файлов конфигурации платформы 1С:Предприятия)
//				- /WorkspaceLocation (Обязательный параметр Директория рабочего простанства для запуска 1C:Enterprise Development Tools.)
//				- /Settings <файл> - файл с настройками экспорта.
//				- /Section ИмяСекции настроек.

	Лог.Информация("Начало экспорта проекта 1C:Enterprise Development Tools в файлы конфигурации платформы 1С:Предприятия (XML)");

	Если НЕ ЗначениеЗаполнено(Параметры["/Project"]) Тогда
		Лог.Ошибка("Не заполнен параметр ""/Project"" - директория, содержащая проект 1C:Enterprise Development Tools!");
		КодВозврата = 66;
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Параметры["/ConfigurationFiles"]) Тогда
		Лог.Ошибка("Не заполнен параметр ""/ConfigurationFiles"" - директория для экспорта файлов конфигурации платформы 1С:Предприятия!");
		КодВозврата = 67;
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Параметры["/WorkspaceLocation"]) Тогда
		Лог.Ошибка("Не заполнен параметр ""/WorkspaceLocation"" - директория рабочего простанства для запуска 1C:Enterprise Development Tools!");
		КодВозврата = 68;
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Параметры["/Settings"]) Тогда
		Лог.Ошибка("Не заполнен параметр ""/Settings"" - файл с настройками экспорта!");
		КодВозврата = 68;
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Параметры["/Section"]) Тогда
		Лог.Ошибка("Не заполнен параметр ""/Section"" - секция в файле с настройками экспорта!");
		КодВозврата = 68;
		Возврат;
	КонецЕсли;	
	
	Project 			= УбратьВСтрокеСлешВКонце(Параметры["/Project"]);
	ConfigurationFiles 	= УбратьВСтрокеСлешВКонце(Параметры["/ConfigurationFiles"]);
	WorkspaceLocation 	= УбратьВСтрокеСлешВКонце(Параметры["/WorkspaceLocation"]);
	Settings		 	= Параметры["/Settings"];
	Section			 	= Параметры["/Section"];
	Настройки 			= ПрочитатьСекциюINIФайла(Settings, Section);
	
	// ring edt@%env.EDT_VERSION% workspace export --project "%system.teamcity.build.workingDir%\it" --configuration-files "%system.teamcity.build.workingDir%\build\config" --workspace-location "%system.teamcity.build.workingDir%"
	СтрокаЗапуска = "ring edt";
	Если Настройки.Получить("EDT_VERSION") <> Неопределено Тогда
		СтрокаЗапуска = СтрокаЗапуска + "@" + Настройки.Получить("EDT_VERSION");
	КонецЕсли;
	СтрокаЗапуска = СтрокаЗапуска  + " workspace export --project """ + Project + """ --configuration-files """ + ConfigurationFiles + """ --workspace-location """ + WorkspaceLocation + """";
	Лог.Информация(СтрокаЗапуска);
	
	ЗапуститьПриложение(СтрокаЗапуска, , Истина, КодВозврата);
	
	Если КодВозврата > 0 Тогда
		Лог.Информация("Экспорт проекта выполнен с ошибками");
	Иначе
		Лог.Информация("Экспорт проекта выполнен успешно");
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьИнформационнуюБазу()

	Лог.Информация("Создание ИБ");
	
	Если НЕ ЗначениеЗаполнено(Параметры["/F"]) Тогда
		Лог.Ошибка("Не заполнен параметр ""/F"" - директория, для создания ИБ");
		КодВозврата = 69;
		Возврат;
	КонецЕсли;
	
	Каталог = Параметры["/F"];
	Лог.Информация("Каталог " + Каталог);	
		
	Попытка
	    Конфигуратор.СоздатьФайловуюБазу(Каталог);
		Лог.Информация("Создание ИБ завершено");
	Исключение												   
		Лог.Ошибка("Произошла ошибка при загрузке конфигурации из файлов " + Конфигуратор.ВыводКоманды());
		КодВозврата = 70;
		Возврат;
	КонецПопытки;		
		
	Лог.Информация("Успешное созданние ИБ");

КонецПроцедуры

// oscript $(FULL_CURRENT_PATH) /Save1cv8_mft /UPath "d:\_Проекты\Управление IT-отделом 8 УФ\Полные комплекты и обновления" /Destination "SoftOnIT\IT" /DestinationDemo "SoftOnIT\DemoIT"
Процедура Создать_1cv8_mft()
	//		+ /Save1cv8_mft - создание файла 1cv8.mft для обновления
	//				- /UPath <путь> (корневой каталог, где будет создан файл)	
	//				- /Destination
	//				- /DestinationDemo
	
	Лог.Информация("Начало создания файла 1cv8.mft");

	мКаталогСборки = Параметры["/UPath"];
	Если НЕ ЗначениеЗаполнено(мКаталогСборки) Тогда
		Лог.Ошибка("Не заполнен параметр ""/UPath"" - каталог куда сохранфить файл 1cv8.mft!");
		КодВозврата = 71;
		Возврат;
	Иначе
		мКаталогСборки = ДополнитьСтрокуСлешем(мКаталогСборки);	
		Если НЕ ФайлСуществует(мКаталогСборки) Тогда
			СоздатьКаталог(мКаталогСборки);
		КонецЕсли;	
	КонецЕсли;	

	мНазначение = Параметры["/Destination"];
	Если НЕ ЗначениеЗаполнено(мНазначение) Тогда
		Лог.Ошибка("Не заполнен параметр ""/Destination"" - путь куда устанавливать конфигурацию!");
		КодВозврата = 72;
		Возврат;	
	КонецЕсли;	
	
	мНазначениеДемо = Параметры["/DestinationDemo"];
	Если НЕ ЗначениеЗаполнено(мНазначениеДемо) Тогда
		Лог.Ошибка("Не заполнен параметр ""/DestinationDemo"" - путь куда устанавливать демо-конфигурацию!");
		КодВозврата = 73;
		Возврат;	
	КонецЕсли;	
	
	Инфо = ИнформацияОКонфигурации();
	мНазвание = Инфо.СинонимКонфигурации;
	
	// Генерируем новый файл 1cv8.mft
	Файл = Новый ТекстовыйДокумент;
	Файл.ДобавитьСтроку("Vendor=" + Инфо.Поставщик);
	Файл.ДобавитьСтроку("Name=" + Инфо.ИмяКонфигурации);
	Файл.ДобавитьСтроку("Version=" + Инфо.ВерсияКонфигурации);
	Файл.ДобавитьСтроку("AppVersion=8.3");
	Файл.ДобавитьСтроку("[Config1]");
	Файл.ДобавитьСтроку("Catalog=" + мНазвание);
	Файл.ДобавитьСтроку("Destination=" + мНазначение);
	Файл.ДобавитьСтроку("Source=1Cv8.cf");
	Файл.ДобавитьСтроку("[Config2]");
	Файл.ДобавитьСтроку("Catalog=" + мНазвание + " (демо)");
	Файл.ДобавитьСтроку("Destination=" + мНазначениеДемо);
	Файл.ДобавитьСтроку("Source=1Cv8.dt");
	Файл.Записать(мКаталогСборки + "1cv8.mft");

	Лог.Информация("Файл 1cv8.mft создан");	

КонецПроцедуры

// oscript $(FULL_CURRENT_PATH) /SaveInstall_edf /F C:\Base1C /N "Администратор" /P "" /UPath "d:\_Проекты\Управление IT-отделом 8 УФ\Полные комплекты и обновления" /Settings C:\projects\проект\settings.ini /Section SETTINGS
Процедура Создать_Install_edf()
	//		+ /SaveInstall_edf - создание файла install.edf для обновления
	//				- /UPath <путь> (корневой каталог, где будет создан файл)	
	//				-/Settings <путь> (файл настроек settings.ini)
	//				-/Section секция файла настроек

	Лог.Информация("Начало создания файла install.edf");
	
	мКаталогСборки = Параметры["/UPath"];
	Если НЕ ЗначениеЗаполнено(мКаталогСборки) Тогда
		Лог.Ошибка("Не заполнен параметр ""/UPath"" - каталог куда сохранфить файл 1cv8.mft");
		КодВозврата = 74;
		Возврат;
	Иначе
		мКаталогСборки = ДополнитьСтрокуСлешем(мКаталогСборки);	
		Если НЕ ФайлСуществует(мКаталогСборки) Тогда
			СоздатьКаталог(мКаталогСборки);
		КонецЕсли;	
	КонецЕсли;	
	
	мКаталогВерсийОбновлений = Параметры["/Versions"];
	Если НЕ ЗначениеЗаполнено(мКаталогВерсийОбновлений) Тогда
		Лог.Ошибка("Не заполнен параметр ""/Versions"" - каталог версий (где будут браться версии конфигураций для создания обновлений)");
		КодВозврата = 76;
		Возврат;
	КонецЕсли;
	мКаталогВерсийОбновлений = ДополнитьСтрокуСлешем(мКаталогВерсийОбновлений);
	
	// Получаем префикс программы из файла settings параметра SITE_ID_PROGRAM
	Если НЕ ЗначениеЗаполнено(Параметры["/Settings"]) Тогда
		Лог.Ошибка("Не заполнен параметр ""/Settings"" - файл с настройками!");
		КодВозврата = 102;
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Параметры["/Section"]) Тогда
		Лог.Ошибка("Не заполнен параметр ""/Section"" - секция в файле с настройками settings.ini!");
		КодВозврата = 103;
		Возврат;
	КонецЕсли;	
	
	Settings		 	= Параметры["/Settings"];
	Section			 	= Параметры["/Section"];
	Настройки 			= ПрочитатьСекциюINIФайла(Settings, Section);

	мПрефикс = Настройки.Получить("SITE_ID_PROGRAM");
	Если НЕ ЗначениеЗаполнено(мПрефикс) Тогда
		Лог.Ошибка("Не заполнен параметр ""/SITE_ID_PROGRAM"" - ID программы в файле настроек settings.ini!");
		КодВозврата = 104;
		Возврат;
	КонецЕсли;

	мКаталогОбщихФайлов = Параметры["/CommonFiles"];

///// Преднамерено закомментирован блок для создания универсальности работы.
//
//	Если НЕ ЗначениеЗаполнено(мКаталогОбщихФайлов) Тогда
//		Лог.Ошибка("Не заполнен параметр ""/CommonFiles"" - каталог общих файлов (где будут браться общие файлы для дистрибутива)");
//		КодВозврата = 76;
//		Возврат;
//	КонецЕсли;
//	мКаталогОбщихФайлов = СтрЗаменить(мКаталогОбщихФайлов, """", "");
//	мКаталогОбщихФайлов = ДополнитьСтрокуСлешем(мКаталогОбщихФайлов);
	
	Инфо = ИнформацияОКонфигурации();
	
	// Генерируем новый файл install.edf
	Версия = Инфо.ВерсияКонфигурации; // "3.1.7.7";

	ВерсияПодчеркивания = СтрЗаменить(Версия, ".", "_");
	мКаталогСборкиВерсия = мКаталогСборки + Версия + "\";

	// Генерируем новый файл install.edf
	Файл = Новый ТекстовыйДокумент;
	Файл.ДобавитьСтроку("{1,");
	Файл.ДобавитьСтроку("{");
	Файл.ДобавитьСтроку("{1,2,");
	Файл.ДобавитьСтроку("{""en"",""ООО """"Софтонит"""" (Барилко Виталий Викторович)""},");
	Файл.ДобавитьСтроку("{""ru"",""ООО """"Софтонит"""" (Барилко Виталий Викторович)""}");
	Файл.ДобавитьСтроку("},");
	Файл.ДобавитьСтроку("{1,2,");
	Файл.ДобавитьСтроку("{""en"",""" + Инфо.СинонимКонфигурации + """},");
	Файл.ДобавитьСтроку("{""ru"",""" + Инфо.СинонимКонфигурации + """}");
	Файл.ДобавитьСтроку("},");
	Файл.ДобавитьСтроку("{#base64:}");
	Файл.ДобавитьСтроку("},");
	Файл.ДобавитьСтроку("{1,");
	Файл.ДобавитьСтроку("{1,0,""" + Инфо.ИмяКонфигурации + """,""ООО """"Софтонит"""" (Барилко Виталий Викторович)"",""" + Версия + """,""SoftOnIT\" + мПрефикс + "\" + ВерсияПодчеркивания + """,");
	Файл.ДобавитьСтроку("{");
	Файл.ДобавитьСтроку("{""/"",");
	Файл.ДобавитьСтроку("{7,");
	Файл.ДобавитьСтроку("{c61a3081-db7b-4d57-b836-150d73beff1f,""Файл конфигурации"",1,00000000-0000-0000-0000-000000000000,""" + Инфо.СинонимКонфигурации + ""","""",00000000-0000-0000-0000-000000000000,"""",1,1,1,1},");
	Файл.ДобавитьСтроку("{ed7bf966-330d-46f0-9bf0-57a0db7ecd04,""Файл выгрузки информационной базы"",1,00000000-0000-0000-0000-000000000000,""" + Инфо.СинонимКонфигурации + " (демо)"","""",00000000-0000-0000-0000-000000000000,"""",0,2,1,1},");
	Файл.ДобавитьСтроку("{a73646ed-6000-4541-b5d7-3b76985639f8,""1cv8upd.htm"",0,"""",00000000-0000-0000-0000-000000000000,""" + мКаталогСборкиВерсия + "Дополнительные файлы\1cv8upd.htm"",0,0,0,0},");
	Файл.ДобавитьСтроку("{49e79e4d-ce7d-4197-b966-a5082632a23e,""ReadMe.txt"",0,"""",00000000-0000-0000-0000-000000000000,""" + мКаталогСборкиВерсия + "Дополнительные файлы\ReadMe.txt"",0,0,0,0},");
	Файл.ДобавитьСтроку("{14503a27-1ad8-472e-a13b-2aedfca7e89f,""UpdInfo.txt"",0,"""",00000000-0000-0000-0000-000000000000,""" + мКаталогСборкиВерсия + "Дополнительные файлы\UpdInfo.txt"",0,0,0,0},");
	Файл.ДобавитьСтроку("{9def14b2-01de-46a0-9550-d509dcf78d74,""1Cv8.cfu"",0,"""",00000000-0000-0000-0000-000000000000,""" + мКаталогСборкиВерсия + "1Cv8.cfu"",0,0,0,0},");
	Файл.ДобавитьСтроку("{87728706-8f7f-464d-9ec2-bb85454faa27,""1cv8.mft"",0,"""",00000000-0000-0000-0000-000000000000,""" + мКаталогСборки + "1cv8.mft"",0,0,0,0}");
	Файл.ДобавитьСтроку("},");
	Если ЗначениеЗаполнено(мКаталогОбщихФайлов) Тогда
		мКаталогОбщихФайлов = СтрЗаменить(мКаталогОбщихФайлов, """", "");
		мКаталогОбщихФайлов = ДополнитьСтрокуСлешем(мКаталогОбщихФайлов);
		Файл.ДобавитьСтроку("{1,");
		Файл.ДобавитьСтроку("{366f16f3-e8bf-455a-a547-b990015c4a94,""Общие файлы"",00000000-0000-0000-0000-000000000000,""" + мКаталогОбщихФайлов + """,""*.*"",1}");
		Файл.ДобавитьСтроку("},");
	Иначе
		Файл.ДобавитьСтроку("{0},");
	КонецЕсли;
	Файл.ДобавитьСтроку("{0}");
	Файл.ДобавитьСтроку("}");
	Файл.ДобавитьСтроку("}");
	Файл.ДобавитьСтроку("}");
	Файл.ДобавитьСтроку("},");
	Файл.ДобавитьСтроку("{0},");
	Файл.ДобавитьСтроку("{2,""Полный"",0,");
	Файл.ДобавитьСтроку("{0},00000000-0000-0000-0000-000000000000,"""",00000000-0000-0000-0000-000000000000,"""",""Обновление"",1,""ru"",a73646ed-6000-4541-b5d7-3b76985639f8,");
	Файл.ДобавитьСтроку("{5,9def14b2-01de-46a0-9550-d509dcf78d74,a73646ed-6000-4541-b5d7-3b76985639f8,49e79e4d-ce7d-4197-b966-a5082632a23e,14503a27-1ad8-472e-a13b-2aedfca7e89f,366f16f3-e8bf-455a-a547-b990015c4a94},00000000-0000-0000-0000-000000000000,"""",00000000-0000-0000-0000-000000000000,""""},");
	Файл.ДобавитьСтроку("{0}");
	Файл.ДобавитьСтроку("}");
	Файл.Записать(мКаталогСборки + "install.edf");

	Лог.Информация("Файл install.edf создан");	

КонецПроцедуры

// oscript $(FULL_CURRENT_PATH) /BuildDistrib /F "D:\_Проекты\Управление IT-отделом 8 УФ\Пустая конфигурация для обновления" /N "Администратор" /P "" /UPath "d:\_Проекты\Управление IT-отделом 8 УФ\Полные комплекты и обновления" /NVer "3.0.27.6" /NeedVerPL "8.3.6"
Процедура СоздатьДистрибутив()	
	
	// Шаг 0. Проверка заполненных параметров
	мКаталогСборки = Параметры["/UPath"];
	Если НЕ ЗначениеЗаполнено(мКаталогСборки) Тогда
		Лог.Ошибка("Не заполнен параметр ""/UPath"" - каталог сборки (где будет создан дистрибутив)!");
		КодВозврата = 75;
		Возврат;
	Иначе
		мКаталогСборки = ДополнитьСтрокуСлешем(мКаталогСборки);	
		Если НЕ ФайлСуществует(мКаталогСборки) Тогда		
			СоздатьКаталог(мКаталогСборки);
		КонецЕсли;	
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Параметры["/Settings"]) Тогда
		Лог.Ошибка("Не заполнен параметр ""/Settings"" - файл с настройками!");
		КодВозврата = 85;
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Параметры["/Section"]) Тогда
		Лог.Ошибка("Не заполнен параметр ""/Section"" - секция в файле с настройками!");
		КодВозврата = 86;
		Возврат;
	КонецЕсли;	
	
	Settings		 	= Параметры["/Settings"];
	Section			 	= Параметры["/Section"];
	Настройки 			= ПрочитатьСекциюINIФайла(Settings, Section);

	мПрефикс = Настройки.Получить("SITE_ID_PROGRAM");
	Если НЕ ЗначениеЗаполнено(мПрефикс) Тогда
		Лог.Ошибка("Не заполнен параметр ""/SITE_ID_PROGRAM"" - ID программы в файле настроек!");
		КодВозврата = 84;
		Возврат;
	Иначе
		мПрефикс = мПрефикс + "_";
	КонецЕсли;	

	мМинимальнаяВерсияПлатформы = Настройки.Получить("MINIMAL_PLATFORM_VERSION");
	Если НЕ ЗначениеЗаполнено(мМинимальнаяВерсияПлатформы) Тогда
		Лог.Ошибка("Не заполнен параметр ""/MINIMAL_PLATFORM_VERSION"" - минимальная версия платформы для работы в файле настроек!");
		КодВозврата = 84;
		Возврат;
	КонецЕсли;

	мКаталогВерсийОбновлений = Параметры["/Versions"];
	Если НЕ ЗначениеЗаполнено(мКаталогВерсийОбновлений) Тогда
		Лог.Ошибка("Не заполнен параметр ""/Versions"" - каталог версий (где будут браться версии конфигураций для создания обновлений)!");
		КодВозврата = 76;
		Возврат;
	КонецЕсли;
	мКаталогВерсийОбновлений = ДополнитьСтрокуСлешем(мКаталогВерсийОбновлений);	
	
	// Обновляем при необходимости
	Результат = ВыполнитьПрограммноеОбновлениеКонфигурации();
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	мВерсияКонфигурации 	= Результат.мВерсияКонфигурации;
	мИмяКонфигурации 		= Результат.мИмяКонфигурации;
	мСинонимКонфигурации 	= Результат.мСинонимКонфигурации;	
	ВыполнитьСборкуМусора();
	
	// ШАГ 4. Создаем папки и будущую навигацию
	Лог.Информация("Создание каталогов и заполнение вспомогательных данных.");
	мВерсииОбновлений = Настройки.Получить("VERSION_UPDATES");
	мМассивВерсий = РазложитьСтрокуВМассивПодстрок(мВерсииОбновлений);
	
	мКаталогВерсии 						= ДополнитьСтрокуСлешем(мКаталогСборки + мВерсияКонфигурации);
	мКаталогВерсииПолный 				= ДополнитьСтрокуСлешем(мКаталогВерсии + "Полный");
	мКаталогВерсииОбновление 			= ДополнитьСтрокуСлешем(мКаталогВерсии + "Обновление");
	мКаталогВерсииДополнительныеФайлы 	= ДополнитьСтрокуСлешем(мКаталогВерсии + "Дополнительные файлы");
	
	Файл = Новый Файл(мКаталогСборки);
	// Удаляем все файлы в папке сборки, если она есть
	Если Файл.Существует() Тогда
		Попытка
			УдалитьФайлы(мКаталогВерсии);
		Исключение
			Лог.Ошибка("Не удалось удалить каталог со старой версией, для новой сборки: " + ОписаниеОшибки());
			КодВозврата = 77;
			Возврат;
		КонецПопытки;
	КонецЕсли;

	// Создаем каталоги
	СоздатьКаталог(мКаталогВерсии);
	СоздатьКаталог(мКаталогВерсииПолный);	
	СоздатьКаталог(мКаталогВерсииДополнительныеФайлы);
	
	// Нужно делать и обновление
	мСтрокаСВерсиями = "";
	Если мМассивВерсий.Количество() > 0 Тогда
		СоздатьКаталог(мКаталогВерсииОбновление);
		// Создаем UpdInfo.txt
		ТД = Новый ТекстовыйДокумент;
		ТекстВерсий = "Version=" + мВерсияКонфигурации + Символы.ПС + "FromVersions=;";
		Для Каждого мВерсия Из мМассивВерсий Цикл
			ТекстВерсий = ТекстВерсий + мВерсия + ";";
			Если НЕ ПустаяСтрока(мСтрокаСВерсиями) Тогда
				мСтрокаСВерсиями = мСтрокаСВерсиями + ", ";
			КонецЕсли;
			мСтрокаСВерсиями = мСтрокаСВерсиями + мВерсия;
		КонецЦикла;
		ТекстВерсий = ТекстВерсий + Символы.ПС + "UpdateDate=" + Формат(ТекущаяДата(), "ДФ=dd.MM.yyyy");
		ТД.УстановитьТекст(ТекстВерсий);
		ТД.Записать(мКаталогВерсииДополнительныеФайлы + "UpdInfo.txt");
	КонецЕсли;
	
	// Создаем ReadMe.txt
	ТД = Новый ТекстовыйДокумент;
	Текст = "Конфигурация """ + мСинонимКонфигурации + """" + Символы.ПС + 
		"Версия " + мВерсияКонфигурации + Символы.ПС +
		"=================================================================" + Символы.ПС + Символы.ПС +		
		"Внимание!"+ Символы.ПС +
		"Текущая версия конфигурации """ + мСинонимКонфигурации + """ предназначена"+ Символы.ПС +
		"для использования с версией системы 1С:Предприятие 8.3 не ниже " + мМинимальнаяВерсияПлатформы;
	ТД.УстановитьТекст(Текст);
	ТД.Записать(мКаталогВерсииДополнительныеФайлы + "ReadMe.txt");
	
	ПолучитьОписаниеОбновленияИзМакета(мКаталогСборки + "news.html");
	ВыполнитьСборкуМусора();
	
	// Создаем 1cv8upd.htm	
	мТекстНовостей = "";
	мФайлНовостей = Параметры["/News"];
	Если ЗначениеЗаполнено(мФайлНовостей) Тогда		
		Файл = Новый Файл(мФайлНовостей);
		Если Файл.Существует() Тогда			
			ТД.Прочитать(мФайлНовостей);
			мТекстНовостей = ТД.ПолучитьТекст();
		КонецЕсли;
	КонецЕсли;
		
	Текст = "<HTML><HEAD>
			|<META http-equiv=Content-Type content=""text/html; charset=utf-8""><LINK href=""__STYLE__"" type=text/css rel=stylesheet><BASE href=v8config://1F802B99-D580-4E0F-93A3-F3F36B54052D/mdobject/id85895E9C-8000-4F0E-8DFD-B67B5FE6CC6C/8EB4FAD1-1FA6-403E-970F-2C12DBB43E23>
			|<META content=""MSHTML 6.00.2900.5969"" name=GENERATOR></HEAD>
			|<style type=""text/css"">
			|.updnew li:before{color:#090;content:""[+] "";font-family:""Courier New"",Courier,monospace;font-weight:bold;font-style:normal;list-style:none;}
			|.updedt li:before{color:#005EF9;content:""[*] "";font-family:""Courier New"",Courier,monospace;font-weight:bold;font-style:normal;list-style:none;}
			|.upderr li:before{color:#FF0000;content:""[-] "";font-family:""Courier New"",Courier,monospace;font-weight:bold;font-style:normal;list-style:none;}
			|.updnws li:before{color:#810A0A;content:""[#] "";font-family:""Courier New"",Courier,monospace;font-weight:bold;font-style:normal;list-style:none;}
			|</style>
			|<BODY>
			|<TABLE style=""BORDER-RIGHT: black 1px solid; BORDER-TOP: black 1px solid; BORDER-LEFT: black 1px solid; BORDER-BOTTOM: black 1px solid"" cellSpacing=0 cellPadding=8 width=""100%"" bgColor=#ffffd6 border=0>
			|<TBODY>
			|<TR>
			|<TD>
			|<H2><FONT face=Tahoma color=#c10000>Конфигурация<BR>" + мСинонимКонфигурации + "</FONT></FONT></H2></TD></TR></TBODY></TABLE>
			|<H3 style=""BORDER-BOTTOM: #c10000 2px solid""><FONT face=Arial color=#c10000 size=5><EM>Версия&nbsp;" + мВерсияКонфигурации + "</EM></FONT></H3>
			|<H4><FONT face=Verdana color=#823602>Порядок обновления всех конфигураций</FONT></H4>
			|<OL>
			|<LI>Запустите систему 1С:Предприятие в режиме ""Конфигуратор"".
			|<LI><B>Обязательно сделайте архивную копию вашей информационной базы!</B> Для этого надо в меню Администрирование выбрать пункт ""Выгрузить информационную базу"" и ввести имя файла выгрузки. Этот файл надо сохранить в надёжном месте.
			|<LI>В режиме ""Конфигуратор"" откройте конфигурацию, для этого в меню ""Конфигурация"" выберите пункт ""Открыть конфигурацию"".
			|<LI>Вызовите режим ""Обновление конфигураций"", для этого в меню ""Конфигурация"", подменю ""Поддержка"", выберите пункт ""Обновить конфигурацию"".
			|<LI>В диалоге выбора обновления в качестве источника обновления укажите ""Доступные обновления"", после чего выберите нужное обновление в соответствующем списке.
			|<LI>Если в списке обновлений необходимое обновление отсутствует, то в диалоге выбора обновления в качестве источника обновления укажите ""Файл обновления"", после чего выберите нужный файл обновления (по умолчанию 1cv8.cfu).
			|<LI>В окне ""Обновление конфигураций"" нажмите кнопку ""OK"" для продолжения обновления конфигурации.
			|<LI>На вопрос об обновлении конфигурации базы данных ответьте ""ДА"".
			|<LI>После завершения <B>обязательно</B> запустите программу в режиме ""Предприятие"" - для совершения конвертации. Некоторые пользователи не выходя из конфигуратора последовательно обновляют версии - это недопустимо и повлечет за собой невозможность дальнейшей работы. После каждого обновления надо хотя бы 1 раз запускать 1С в режиме 1С:Предприятие.</LI></OL>
			|<H4><FONT face=Verdana color=#823602>Порядок обновления конфигурации версий " + мСтрокаСВерсиями + " на версию " + мВерсияКонфигурации + "</FONT></H4>
			|<P>Для обновления версии конфигурации следует использовать режим ""Обновление конфигураций"". Файл обновлений 1Cv8.cfu находится в каталоге шаблонов (по умолчанию - подкаталог tmplts\ каталога установки 1С:Предприятия 8), в подкаталоге SoftOnIT\it3\" + СтрЗаменить(мВерсияКонфигурации, ".", "_") + "\</P>
			|</SPAN><hr><font color=""#ff0000"">Внимание!<br>Текущая версия конфигурации """ + мСинонимКонфигурации + """ предназначена для использования с версией системы 1С:Предприятие 8.3 не ниже " + мМинимальнаяВерсияПлатформы + ".</font><hr>" + 
			мТекстНовостей + "
			|</BODY></HTML>";
	ТД.УстановитьТекст(Текст);
	ТД.Записать(мКаталогВерсииДополнительныеФайлы + "1cv8upd.htm");		
	
	ВыполнитьСборкуМусора();
	
	// ШАГ 5. Создаем файл поставки
	ПараметрыЗапуска3 			= Конфигуратор.ПолучитьПараметрыЗапуска();
	ПараметрыЗапуска3.Добавить("/CreateDistributionFiles");
	// Создаем дистрибутив
	ПараметрыЗапуска3.Добавить("-cffile """ + мКаталогВерсии + "1Cv8.cf" + """");
	Если мМассивВерсий.Количество() > 0 Тогда
		// Если надо, создаем обновления
		ПараметрыЗапуска3.Добавить("-cfufile """ + мКаталогВерсии + "1Cv8.cfu" + """");
		Для Каждого мВерсия Из мМассивВерсий Цикл
			ПараметрыЗапуска3.Добавить("-f """ + мКаталогВерсийОбновлений + СокрЛП(мВерсия) + "\1Cv8.cf""");
		КонецЦикла;
	КонецЕсли;

	Лог.Информация("Создание файла поставки");
	СтрПараметры = "";
	Для Каждого Стр Из ПараметрыЗапуска3 Цикл
		СтрПараметры = СтрПараметры + Стр + " ";
	КонецЦикла;
	Лог.Информация("Параметры файла поставки: " + СтрПараметры);
	
	Попытка		
		Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска3);
		Лог.Информация("Создание файла поставки завершено");
	Исключение												   
		Лог.Ошибка("Произошла ошибка при создании файла поставки " + Конфигуратор.ВыводКоманды());
		КодВозврата = 78;
		Возврат;
	КонецПопытки;
	
	// ШАГ 6. Создание дистрибутива
	ПараметрыЗапуска4 			= Конфигуратор.ПолучитьПараметрыЗапуска();
	ПараметрыЗапуска4.Добавить("/CreateDistributive """ + мКаталогВерсииПолный + """");
	ПараметрыЗапуска4.Добавить("-File """ + мКаталогСборки + "install.edf" + """");
	ПараметрыЗапуска4.Добавить("-MakeSetup");	
	
	Лог.Информация("Создание дистрибутива");
	Попытка
		Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска4);
		Лог.Информация("Создание дистрибутива завершено");
		
		// Делаем архив
		ЗаписьZIP =  Новый ЗаписьZipФайла(мКаталогВерсииПолный + мПрефикс + СтрЗаменить(мВерсияКонфигурации, ".", "_") + "_full.zip");     
		ЗаписьZIP.Добавить(мКаталогВерсииПолный + "*.*",
			РежимСохраненияПутейZIP.СохранятьОтносительныеПути,
			РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);		
		ЗаписьZIP.Записать();
		Лог.Информация("Создание архива дистрибутива завершено");
		
	Исключение												   
		Лог.Ошибка("Произошла ошибка при создании дистрибутива " + Конфигуратор.ВыводКоманды());
		КодВозврата = 79;
		Возврат;
	КонецПопытки;
	
	// ШАГ 7. Создание обновления
	Если мМассивВерсий.Количество() > 0 Тогда
		ПараметрыЗапуска5 			= Конфигуратор.ПолучитьПараметрыЗапуска();
		ПараметрыЗапуска5.Добавить("/CreateDistributive """ + мКаталогВерсииОбновление + """");
		ПараметрыЗапуска5.Добавить("-File """ + мКаталогСборки + "install.edf" + """");
		ПараметрыЗапуска5.Добавить("-Option Обновление");
		ПараметрыЗапуска5.Добавить("-MakeSetup");

		Лог.Информация("Создание обновления дистрибутива");
		Попытка
			Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска5);
			Лог.Информация("Создание обновления дистрибутива завершено");
			
			// Делаем архив
			ЗаписьZIP =  Новый ЗаписьZipФайла(мКаталогВерсииОбновление + мПрефикс + СтрЗаменить(мВерсияКонфигурации, ".", "_") + "_upd.zip");     
			ЗаписьZIP.Добавить(мКаталогВерсииОбновление + "*.*",
				РежимСохраненияПутейZIP.СохранятьОтносительныеПути,
				РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
			ЗаписьZIP.Записать();
			Лог.Информация("Создание архива обновления дистрибутива завершено");
			
		Исключение												   
			Лог.Ошибка("Произошла ошибка при создании обновления дистрибутива " + Конфигуратор.ВыводКоманды());
			КодВозврата = 80;
			Возврат;
		КонецПопытки;
			
	КонецЕсли;
	
	Лог.Информация("Успешное завершение сборки.");
	
КонецПроцедуры

Процедура УстановитьURLы()
//		+ /SetURLS
//				- File
//				- FileURL
	
	мФайл = Параметры["/File"];
	Лог.Информация("Начало замены URL-ов в файле");	
	Если НЕ ЗначениеЗаполнено(мФайл) Тогда
		Лог.Ошибка("Не заполнен параметр ""/File"" - файл HTML или TXT");
		КодВозврата = 81;
		Возврат;
	КонецЕсли;
	Лог.Информация("Обрабатываемый файл <" + мФайл + ">");	

	мФайлURL = Параметры["/FileURL"];
	Если НЕ ЗначениеЗаполнено(мФайлURL) Тогда
		Лог.Ошибка("Не заполнен параметр ""/FileURL"" - файл с расшифровкой URL");
		КодВозврата = 82;
		Возврат;
	КонецЕсли;
	Лог.Информация("Файл UTL <" + мФайлURL + ">");	
	
	Массив = Новый Массив;	
	Массив.Добавить(мФайл);

	ФайлURL = Новый ТекстовыйДокумент;
	ФайлURL.Прочитать(мФайлURL);
	ТекстURL = ФайлURL.ПолучитьТекст();	

	Для Каждого ИмяФайла Из Массив Цикл

		Файл = Новый ТекстовыйДокумент;
		Файл.Прочитать(ИмяФайла);
		Текст = Файл.ПолучитьТекст();	
		Для Индекс = 1 По СтрЧислоСтрок(ТекстURL) Цикл
			Стр = СтрПолучитьСтроку(ТекстURL, Индекс);
			Если ПустаяСтрока(Стр) Тогда
				Продолжить;
			КонецЕсли;
			ИмяОбласти = Лев(Стр, Найти(Стр, "=") - 1);
			URL = Сред(Стр, Найти(Стр, "=") + 1);
			Текст = СтрЗаменить(Текст, "[url=" + ИмяОбласти + "]", "[url=" + URL + "]");
			Текст = СтрЗаменить(Текст, "href=""" + ИмяОбласти + """", "href=""" + URL + """");
		КонецЦикла;
		Файл.УстановитьТекст(Текст);
		Файл.Записать(ИмяФайла);
		
	КонецЦикла;
	
	Лог.Информация("Успешное завершение замены URL-ов в файле <" + мФайл + ">");
	
КонецПроцедуры

Процедура ОтправкаНовостейНаСайт()

//		+ /SendNews
//				- URL
//				- File
//				- Settings
//				- Section

	Лог.Информация("Начало отправки новостей на сайт");

	мHTTP = Параметры["/URL"];
	Если НЕ ЗначениеЗаполнено(мHTTP) Тогда
		Лог.Ошибка("Не заполнен параметр ""/URL"" - файл HTML или TXT");
		КодВозврата = 83;
		Возврат;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Параметры["/Settings"]) Тогда
		Лог.Ошибка("Не заполнен параметр ""/Settings"" - файл с настройками!");
		КодВозврата = 85;
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Параметры["/Section"]) Тогда
		Лог.Ошибка("Не заполнен параметр ""/Section"" - секция в файле с настройками!");
		КодВозврата = 86;
		Возврат;
	КонецЕсли;
	
	Settings		 	= Параметры["/Settings"];
	Section			 	= Параметры["/Section"];
	Настройки 			= ПрочитатьСекциюINIФайла(Settings, Section);
	ЭтоОписаниеБудущейВерсии = ЗначениеЗаполнено(Параметры["/ThisDescriptionFutureVersion"]);

	ИДПрограммы = Параметры["/SITE_ID_PROGRAM"];
	Если НЕ ЗначениеЗаполнено(ИДПрограммы) Тогда
		ИДПрограммы = Настройки.Получить("SITE_ID_PROGRAM");
		Если НЕ ЗначениеЗаполнено(ИДПрограммы) Тогда
			Лог.Ошибка("Не заполнен параметр ""/SITE_ID_PROGRAM"" - ID программы в файле настроек или параметром");
			КодВозврата = 84;
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ИмяПрограммы = Настройки.Получить("PROGRAM");
	Если НЕ ЗначениеЗаполнено(ИмяПрограммы) Тогда
		Лог.Ошибка("Не заполнен параметр ""/PROGRAM"" - название программы в файле настроек");
		КодВозврата = 84;
		Возврат;
	КонецЕсли;

	ИДКаталога = Параметры["/SITE_ID_CATALOG"];
	Если НЕ ЗначениеЗаполнено(ИДКаталога) Тогда
		ИДКаталога = Настройки.Получить("SITE_ID_CATALOG");
		Если НЕ ЗначениеЗаполнено(ИДКаталога) Тогда
			Лог.Ошибка("Не заполнен параметр ""/SITE_ID_CATALOG"" - ID каталога на сайте в файле настроек или параметром");
			КодВозврата = 85;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	ИмяФайлаДляЗагрузкиHTML = Параметры["/FileHTML"];
	Если НЕ ЗначениеЗаполнено(ИмяФайлаДляЗагрузкиHTML) Тогда
		Лог.Ошибка("Не заполнен параметр ""/FileHTML"" - имя файла HTML для отправки на сайт");
		КодВозврата = 86;
		Возврат;
	КонецЕсли;
	ИмяФайлаДляЗагрузкиTXT = Параметры["/FileTXT"];
	Если НЕ ЗначениеЗаполнено(ИмяФайлаДляЗагрузкиTXT) Тогда
		Лог.Ошибка("Не заполнен параметр ""/FileTXT"" - имя файла TXT для отправки на сайт");
		КодВозврата = 86;
		Возврат;
	КонецЕсли;	
	ДатаНовости = Настройки.Получить("DATEVERSION");
	Если НЕ ЗначениеЗаполнено(ДатаНовости) Тогда
		Лог.Ошибка("Не заполнен параметр ""DATEVERSION"" - дата новости на сайте в файле настроек");
		КодВозврата = 86;
		Возврат;
	КонецЕсли;
	ВерсияНовости = Настройки.Получить("VERSION");
	Если НЕ ЗначениеЗаполнено(ВерсияНовости) Тогда
		Лог.Ошибка("Не заполнен параметр ""VERSION"" - номер новой версии программы на сайте в файле настроек");
		КодВозврата = 86;
		Возврат;
	КонецЕсли;	
	ИДСправочника = Настройки.Получить("SITE_SPR_CATALOG");
	Если НЕ ЗначениеЗаполнено(ИДСправочника) Тогда
		Лог.Ошибка("Не заполнен параметр ""SITE_SPR_CATALOG"" - номер ID в справончике Программные продукты на сайте");
		КодВозврата = 86;
		Возврат;
	КонецЕсли;
	PREVIEW_TEXT = "";

	Если ИДКаталога = "it" Тогда
		VERSION_LICENSE_SERVER = Настройки.Получить("VERSION_LICENSE_SERVER");
		Если ЗначениеЗаполнено(VERSION_LICENSE_SERVER) Тогда
			PREVIEW_TEXT = ", сервер лицензирования " + VERSION_LICENSE_SERVER;
			//3.1.5.1, 3.1.6.1, 3.1.6.2, 3.1.7.0, 3.1.7.1, 3.1.7.2, 3.1.7.3, 3.1.7.4, 3.1.7.5, 3.1.7.6, 3.1.7.7, 3.1.7.8, 3.1.7.9, 3.1.8.0, 3.1.8.1, 3.1.8.2, , 3.1.8.3,  сервер лицензирования 1.0.0.15
		КонецЕсли;
	КонецЕсли;
	
	VERSION_UPDATES = Настройки.Получить("VERSION_UPDATES");
	Если ЗначениеЗаполнено(VERSION_UPDATES) Тогда
		PREVIEW_TEXT = VERSION_UPDATES + PREVIEW_TEXT;
	КонецЕсли;

	PREVIEW_PICTURE = Настройки.Получить("PREVIEW_PICTURE");
	Если НЕ ЗначениеЗаполнено(PREVIEW_PICTURE) Тогда
		PREVIEW_PICTURE = "";
	КонецЕсли;
	KEYWORDS_UPDATES = Настройки.Получить("KEYWORDS_UPDATES");
	Если НЕ ЗначениеЗаполнено(KEYWORDS_UPDATES) Тогда
		KEYWORDS_UPDATES = "";
	КонецЕсли;
	SHORT_DESCRIPTION = Настройки.Получить("SHORT_DESCRIPTION");
	Если НЕ ЗначениеЗаполнено(SHORT_DESCRIPTION) Тогда
		SHORT_DESCRIPTION = "";
	КонецЕсли;

	SITE_NEWS_IBLOCK_SECTION_ID = Параметры["/SITE_NEWS_IBLOCK_SECTION_ID"];
	Если НЕ ЗначениеЗаполнено(SITE_NEWS_IBLOCK_SECTION_ID) Тогда
		SITE_NEWS_IBLOCK_SECTION_ID = Настройки.Получить("SITE_NEWS_IBLOCK_SECTION_ID");
		Если НЕ ЗначениеЗаполнено(SITE_NEWS_IBLOCK_SECTION_ID) Тогда
			SITE_NEWS_IBLOCK_SECTION_ID = "";
		КонецЕсли;
	КонецЕсли;

	PROGRAM = Настройки.Получить("PROGRAM");
	Если НЕ ЗначениеЗаполнено(PROGRAM) Тогда
		Лог.Ошибка("Не заполнен параметр ""PROGRAM"" - название программы");
		КодВозврата = 86;
		Возврат;
	КонецЕсли;	

	Лог.Информация("Страница запуска: " + мHTTP);	

	Попытка
		WinHttp = Новый COMОбъект("WinHttp.WinHttpRequest.5.1");
	Исключение
		Лог.Ошибка("Ошибка создания COM-объекта WinHttp.WinHttpRequest.5.1");
		КодВозврата = 87;
		Возврат;
	КонецПопытки;

	Boundary = "00000000000000";
	СтрокаBase64HTML = Base64Строка(Новый ДвоичныеДанные(ИмяФайлаДляЗагрузкиHTML));
	СтрокаBase64TXT = Base64Строка(Новый ДвоичныеДанные(ИмяФайлаДляЗагрузкиTXT));

	Данные = 
		"--" + Boundary + "
		|Content-Disposition: form-data; name=""detailhtml""; filename=""" + ИмяФайлаДляЗагрузкиHTML + """
		|Content-Type: application/octet-stream;
		|
		|" + СтрокаBase64HTML + Символы.ПС + "
		|--" + Boundary + "
		|Content-Disposition: form-data; name=""detailtxt""; filename=""" + ИмяФайлаДляЗагрузкиTXT + """
		|Content-Type: application/octet-stream;
		|
		|" + СтрокаBase64TXT + Символы.ПС + "
		|--" + Boundary + "
		|Content-disposition: form-data; name=""preview""
		|Content-Type: application/octet-stream;
		|
		|" + PREVIEW_TEXT + "
		|--" + Boundary + "
		|Content-Disposition: form-data; name=""SHORT_DESCRIPTION""
		|Content-Type: application/octet-stream;
		|
		|" + SHORT_DESCRIPTION + "
		|--" + Boundary + "
		|Content-Disposition: form-data; name=""KEYWORDS_UPDATES""
		|Content-Type: application/octet-stream;
		|
		|" + KEYWORDS_UPDATES + "
		|--" + Boundary + "
		|Content-Disposition: form-data; name=""PREVIEW_PICTURE""
		|Content-Type: application/octet-stream;
		|
		|" + PREVIEW_PICTURE + "
		|--" + Boundary + "
		|Content-Disposition: form-data; name=""SITE_NEWS_IBLOCK_SECTION_ID""
		|Content-Type: application/octet-stream;
		|
		|" + SITE_NEWS_IBLOCK_SECTION_ID + "
		|--" + Boundary + "
		|Content-Disposition: form-data; name=""PROGRAM""
		|Content-Type: application/octet-stream;
		|
		|" + PROGRAM + "
		|--" + Boundary + "
		|Content-disposition: form-data; name=""date""
		|Content-Type: application/octet-stream;
		|
		|" + ДатаНовости + "
		|--" + Boundary + "
		|Content-disposition: form-data; name=""version""
		|Content-Type: application/octet-stream;
		|
		|" + ВерсияНовости + "
		|--" + Boundary + "
		|Content-disposition: form-data; name=""SITE_ID_PROGRAM""
		|Content-Type: application/octet-stream;
		|
		|" + ИДПрограммы + "
		|--" + Boundary + "
		|Content-disposition: form-data; name=""spr""
		|Content-Type: application/octet-stream;
		|
		|" + ИДСправочника + "
		|--" + Boundary + "
		|Content-disposition: form-data; name=""group""
		|Content-Type: application/octet-stream;
		|
		|" + ИДКаталога + "
		|--" + Boundary + "
		|Content-disposition: form-data; name=""action""
		|Content-Type: application/octet-stream;
		|
		|sendnews
		|--" + Boundary + "
		|Content-disposition: form-data; name=""ThisDescriptionFutureVersion""
		|Content-Type: application/octet-stream;
		|
		|" + ?(ЭтоОписаниеБудущейВерсии, "1", "0") + "
		|--" + Boundary + "--";
		

	WinHttp.Open("POST", мHTTP, 0);
	WinHttp.SetRequestHeader("Content-Type","multipart/form-data;boundary=" + Boundary);
	WinHttp.SetRequestHeader("Content-Length", СтрДлина(Данные));
	WinHttp.Send(Данные);
	
	ОтветСервера = WinHttp.ResponseText;
	Если Найти(ОтветСервера, "Error") > 0 Тогда
		Лог.Ошибка(ОтветСервера);
		КодВозврата = 87;
		Возврат;
	Иначе
		Лог.Информация(ОтветСервера);		
	КонецЕсли;

	Лог.Информация("Окончание отправки новостей на сайт");

КонецПроцедуры

//%path1C% /S "alba/tester" /N"..." /P"..." /TESTMANAGER /C"-Scenario УправлениеITОтделом8.ПроверкаУИТ -PathIB %InfoBaseLocation% -CloseAfterExecution True -ErrorFile %ErrorFile%"
Процедура ЗапускТестовойСреды()

//		+ /StartTest
//				- /F <путь> (тип базы - файловая)
//				- /S <адрес> (тип базы - серверная, <Имя компьютера, работающего сервером приложений>\<Ссылочное имя информационной базы, известное в рамках сервера 1С:Предприятия 8>)
//				- /N (логин администратора ИБ, если не задан, то без логина)
//				- /P (пароль администратора ИБ)
//				- /
	Лог.Информация("Начало тестирования конфигурации");
			
	мБаза = Параметры["/UPath"];
	Если НЕ ЗначениеЗаполнено(мБаза) Тогда
		Лог.Ошибка("Не заполнен параметр ""/UPath"" - пустая база для тестирования");
		КодВозврата = 88;
		Возврат;
	КонецЕсли;
	мБаза = ДополнитьСтрокуСлешем(мБаза);	
	Лог.Информация("ИБ тестирования """ + мБаза + """");

	мФайлОшибок = мБаза + "errors.txt";

	мСценарий = Параметры["/Scenario"];
	Если НЕ ЗначениеЗаполнено(мСценарий) Тогда
		Лог.Ошибка("Не заполнен параметр ""/Scenario"" - сценарий тестирования");
		КодВозврата = 88;
		Возврат;
	КонецЕсли;	
	Лог.Информация("Сценарий запуска """ + мСценарий + """");
	
	мПочта = Параметры["/EMail"];
	
	мПараметры		= Конфигуратор.ПолучитьПараметрыЗапуска();
	мПараметры[0] 	= "ENTERPRISE";
	мПараметры.Добавить("/TESTMANAGER");
	мПараметры.Добавить("/C""-Scenario " + мСценарий + " -CloseAfterExecution True" + ?(ЗначениеЗаполнено(мПочта), " -EMail " + мПочта, "") + " -PathIB " + мБаза + """");	

	СтрокаЗапуска = """" + Конфигуратор.ПутьКТонкомуКлиенту1С() + """";
	
	Для Каждого Параметр Из мПараметры Цикл
		СтрокаЗапуска = СтрокаЗапуска + " " + Параметр;
	КонецЦикла;
	
	Лог.Информация("Строка запуска тестовой среды " + СтрокаЗапуска);
	
	Попытка
		ЗапуститьПриложение(СтрокаЗапуска, , Истина, КодВозврата);
	Исключение												   
		Лог.Ошибка("Произошла ошибка при тестировании конфигурации");
		КодВозврата = 90;
		Возврат;
	КонецПопытки;
	
	Если ФайлСуществует(мФайлОшибок) Тогда
	
		Лог.Ошибка("Найдены ошибки при тестировании:");
		Файл = Новый ТекстовыйДокумент;
		Файл.Прочитать(мФайлОшибок);
		Текст = Файл.ПолучитьТекст();	
		Для Индекс = 1 По СтрЧислоСтрок(Текст) Цикл
			Стр = СтрПолучитьСтроку(Текст, Индекс);
			Если ПустаяСтрока(Стр) Тогда
				Продолжить;
			КонецЕсли;
			Лог.Ошибка(Стр);
		КонецЦикла;
		
		// Отправа письма о том, что есть ошибки				
		Лог.Ошибка("Тестирование завершено с ошибками");
		КодВозврата = 91;
		
	Иначе
		Лог.Информация("Тестирование завершено успешно");
	КонецЕсли;
	
КонецПроцедуры

// oscript $(FULL_CURRENT_PATH) /TaskKill /Title "Тестер*"
Процедура ЗавершитьПроцесс()

	Лог.Информация("Начало завершения процесса");	
	
	// Завершение по маске заголовка
	мЗаголовок = Параметры["/Title"];
	Если ЗначениеЗаполнено(мЗаголовок) Тогда
		СтрокаЗапуска = "taskkill /F /FI ""WINDOWTITLE eq " + мЗаголовок + """";
		Лог.Информация("Выполнение команды " + СтрокаЗапуска);
		Попытка
			ЗапуститьПриложение(СтрокаЗапуска, , Истина, КодВозврата);
		Исключение												   
			Лог.Ошибка("Произошла ошибка при завершении процесса");
			КодВозврата = 91;
			Возврат;
		КонецПопытки;	
		
	КонецЕсли;
	
	Если КодВозврата <> 0 Тогда
		Лог.Ошибка("Завершение процесса произошло с ошибками");
	КонецЕсли;
		Лог.Информация("Окончание завершения процесса");
	Возврат;

КонецПроцедуры

// Процедура обфусцирует файл
//
//oscript $(FULL_CURRENT_PATH) /Obfuscate /File "c:\Temp\SLS\Module.bsl" /ObfuscateFile "c:\Temp\SLS\Module_obf.bsl" /ApiKey "12321321342134"
Процедура ОбфусцироватьФайл()
	
	Лог.Информация("Начало обфускации файла");

	Адрес				= "https://netlenka.org/Module/ApiClientProtect";
	ИсходныйФайл 		= Параметры["/File"];
	Если НЕ ЗначениеЗаполнено(ИсходныйФайл) Тогда
		Лог.Ошибка("Не заполнен параметр ""/File"" - файл, который необхоимо обфусцировать");
		КодВозврата = 92;
		Возврат;
	КонецЕсли;
	ИсходныйФайл = СокрЛП(ИсходныйФайл);
	Если НЕ ФайлСуществует(ИсходныйФайл) Тогда
		Лог.Ошибка("Файл для обфускации <" + ИсходныйФайл + "> не существует");
		КодВозврата = 92;
		Возврат;
	КонецЕсли;

	ОбфусцированныйФайл = Параметры["/ObfuscateFile"];
	Если НЕ ЗначениеЗаполнено(ИсходныйФайл) Тогда
		Лог.Ошибка("Не заполнен параметр ""/ObfuscateFile"" - файл, куда нужно сохранить обфусцированный результат");
		КодВозврата = 93;
		Возврат;
	КонецЕсли;
	ОбфусцированныйФайл = СокрЛП(ОбфусцированныйФайл);

	ApiKey = Параметры["/ApiKey"];
	Если НЕ ЗначениеЗаполнено(ApiKey) Тогда
		Лог.Ошибка("Не заполнен параметр ""/ApiKey"" - ключ API пользователя на сайте netlenka.org в профиле");
		КодВозврата = 94;
		Возврат;
	КонецЕсли;		

	// public class ApiRequest
    // {
    //     public string ApiKey { get; set; }
    //     public string Text { get; set; }
    //     public bool EncryptStrings { get; set; }
    //     public bool InsertTests { get; set; }
    //     public string ModuleType { get; set; }
    //     public bool ControlFlow { get; set; }
    //     public int ControlFlowLevel { get; set; }
    //     public bool FormatResult { get; set; }
    //     public bool KeepCase { get; set; }
    //     public bool ByteCode { get; set; }
    //     public bool IsImage { get; set; }
	//     public bool CreatePDB { get; set; }
	//     public bool Base64 { get; set; }
	// }
	// 
	// public enum ModuleType
    // {
    //     Unknown, CommonModule, FormModule, ManagedFormModule, ObjectModule, SystemModule, CommandModule,
    //     ObjectManager, Image
	// }

	ТекстовыйФайл = Новый ТекстовыйДокумент();
	ТекстовыйФайл.Прочитать(ИсходныйФайл, КодировкаТекста.UTF8);
	ДанныеДляОбфускации = "";
	Текст = ТекстовыйФайл.ПолучитьТекст();	
	Для Индекс = 1 По СтрЧислоСтрок(Текст) Цикл
		ДанныеДляОбфускации = ДанныеДляОбфускации + СтрПолучитьСтроку(Текст, Индекс) + Символы.ВК + Символы.ПС;
	КонецЦикла;
		
	Структура = Новый Структура();
	Структура.Вставить("ApiKey", 			ApiKey);					// Ключ API
	Структура.Вставить("ModuleType", 		"CommonModule");			// Общий модуль обрабатываем
	Структура.Вставить("ByteCode", 			1);							// Обязательный реквизит
	Структура.Вставить("EncryptStrings", 	1);							// Шифровать строки
	Структура.Вставить("ControlFlow", 		1);							// Контроль потока
	Структура.Вставить("FormatResult", 		0); 						// Форматировать результат
	Структура.Вставить("KeepCase", 			0);
	Структура.Вставить("InsertTests",		1);							// Для модулей форм и объектов, включить в код тесты проверки реквизитов
	Структура.Вставить("ControlFlowLevel", 	1);
	Структура.Вставить("Text",				ДанныеДляОбфускации);		// Текст, который нужно обфусцировать
	
	ЗаписьJSON = Новый ЗаписьJSON();
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Структура);
	ТекстЗапросаJSON = ЗаписьJSON.Закрыть();

	ТД = Новый ТекстовыйДокумент();
	ТД.УстановитьТекст(ТекстЗапросаJSON);
	ТД.Записать("json.txt");
	
	Данные = Новый Структура;
	Данные.Вставить("inputData", ТекстЗапросаJSON);
	Лог.Информация("Отправка запроса серверу обфускации");
	Ответ = КоннекторHTTP.Post(Адрес, Данные);
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Ответ.Текст());
	Структура = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();	
	Если Структура.StatusCode = 200 Тогда 
		ЧтениеJSON = Новый ЧтениеJSON();
		ЧтениеJSON.УстановитьСтроку(Структура.Content);
		Структура = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();

		Если ВРег(ОбфусцированныйФайл) = ВРег(ИсходныйФайл) Тогда
			УдалитьФайлы(ОбфусцированныйФайл);
		КонецЕсли;

		// Записываем в кодивроке UTF-8.
		ЗТ = Новый ЗаписьТекста(ОбфусцированныйФайл, "windows-1251"); 
		ЗТ.Закрыть(); 		
		ЗТ = Новый ЗаписьТекста(ОбфусцированныйФайл, "UTF-8",, Истина);
		ЗТ.Записать(Структура.Text);
		ЗТ.Закрыть();

		Лог.Информация("Обфускация файла успешно завершена");
	Иначе
		Лог.Ошибка("Произошла ошибка обфускации " + Структура.Content + " (" + Строка(Структура.StatusCode) + ")");
		КодВозврата = 95; // << Ошибка
	КонецЕсли;
	
	Лог.Информация("Окончание процесса обфускации");
	
КонецПроцедуры

// Читает секцию INI-файла и возвращет соответствие.
//	ИмяФайла - Строка - Исходный файл
//	ИмяСекции - Строка - Имя секции
//
// Результат:
//	Соответствие - результат чтения структуры.
//
Функция ПрочитатьСекциюINIФайла(Знач ИмяФайла, Знач ИмяСекции)

	Результат 	= Новый Соответствие();
	
	ИмяСекции 	= СокрЛП(НРег(ИмяСекции));
	ТД 			= Новый ТекстовыйДокумент();
	ТД.Прочитать(ИмяФайла, КодировкаТекста.UTF8);
	СекцияНайдена = Ложь;
	Для Индекс = 1 По ТД.КоличествоСтрок() Цикл
		Стр = СокрЛП(ТД.ПолучитьСтроку(Индекс));
		Если ПустаяСтрока(Стр) ИЛИ СтрНачинаетсяС(Стр, "#") Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ СекцияНайдена Тогда
			Если СокрЛП(НРег(Стр)) = "[" + ИмяСекции + "]" Тогда
				СекцияНайдена = Истина;
			КонецЕсли;
		Иначе
			Если СтрНачинаетсяС(Стр, "[") Тогда
				Прервать;
			КонецЕсли;
			
			ИндексРавно = СтрНайти(Стр, "=");
			Если ИндексРавно > 0 Тогда
				Результат.Вставить(Лев(Стр, ИндексРавно - 1), Сред(Стр, ИндексРавно + 1));
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;

КонецФункции

// Находит и копирует найденные файлы по маске из каталога с учетом вложенных подкаталогов в другой общий каталог.
//
// oscript "%system.teamcity.build.workingDir%\uni_script\uni_script.os" /FindFilesAndCopy /UPath %system.teamcity.build.workingDir%\build\distrib /UMask *.zip /UDestination %system.teamcity.build.workingDir%\build\artifacts
Процедура СкопироватьФайлыПоМаске()

	Лог.Информация("Начало поиска и копирования файлов");
		
	мИсходныйКаталог = Параметры["/UPath"];
	Если НЕ ЗначениеЗаполнено(мИсходныйКаталог) Тогда
		Лог.Ошибка("Не заполнен параметр ""/UPath"" - каталог в котором ищем");		
		КодВозврата = 91;
		Возврат;		
	КонецЕсли;
	мИсходныйКаталог = ДополнитьСтрокуСлешем(мИсходныйКаталог);	

	мМаска = Параметры["/UMask"];
	Если НЕ ЗначениеЗаполнено(мМаска) Тогда
		Лог.Ошибка("Не заполнен параметр ""/UMask"" - маска поиска");		
		КодВозврата = 92;
		Возврат;		
	КонецЕсли;	

	мКаталогНазначения = Параметры["/UDestination"];
	Если НЕ ЗначениеЗаполнено(мМаска) Тогда
		Лог.Ошибка("Не заполнен параметр ""/UDestination"" - каталог назначения");		
		КодВозврата = 93;
		Возврат;		
	КонецЕсли;
	мКаталогНазначения = ДополнитьСтрокуСлешем(мКаталогНазначения);	
	
    МассивФайлов = НайтиФайлы(мИсходныйКаталог, мМаска, Истина);
    
	Если МассивФайлов.Количество() > 0 Тогда
		СкопированныхФайлов = 0;
		Для Каждого Файл Из МассивФайлов Цикл
			ИмяФайла = Файл.ПолноеИмя;
			Если Файл.ЭтоКаталог() Тогда
				Продолжить;
			КонецЕсли;

			КопироватьФайл(ИмяФайла, мКаталогНазначения + Файл.Имя);
			СкопированныхФайлов = СкопированныхФайлов + 1;
			Лог.Информация("Файл " + ИмяФайла + " скопирован в " + мКаталогНазначения);

		КонецЦикла;
		Лог.Информация("Скопировано " + Строка(СкопированныхФайлов) + " файлов");
    Иначе
        Лог.Предупреждение("Файлы для копирования не найдены");
    КонецЕсли;	
	
	Если КодВозврата <> 0 Тогда
		Лог.Ошибка("Завершение поиска и копирования файлов произошло с ошибками");
	КонецЕсли;
		Лог.Информация("Окончание поиска и копирования файлов");
	Возврат;
	
КонецПроцедуры

// Если будет найден файл, который указан в параметре, то он будет выведен как список ошибок.
//
// oscript "%system.teamcity.build.workingDir%\uni_script\uni_script.os" /WriteFileAsErrorInConsole /File "%system.teamcity.build.workingDir%\build\base\errors.txt"
Процедура ВывестиСодержаниеФайлаВКонсольКакОшибки()
		
	мФайлОшибок = Параметры["/File"];
	Если НЕ ЗначениеЗаполнено(мФайлОшибок) Тогда
		Лог.Ошибка("Не заполнен параметр ""/File"" - файл в котором находятся ошибки");		
		КодВозврата = 94;
		Возврат;		
	КонецЕсли;

	Если ФайлСуществует(мФайлОшибок) Тогда
		Файл = Новый ТекстовыйДокумент;
		Файл.Прочитать(мФайлОшибок);
		Текст = Файл.ПолучитьТекст();	
		Для Индекс = 1 По СтрЧислоСтрок(Текст) Цикл
			Стр = СтрПолучитьСтроку(Текст, Индекс);
			Если ПустаяСтрока(Стр) Тогда
				Продолжить;
			КонецЕсли;
			Лог.Ошибка(Стр);
		КонецЦикла;
		
		// Отправа письма о том, что есть ошибки				
		Лог.Ошибка("Тестирование завершено с ошибками");
		КодВозврата = 95;

	Иначе
		Лог.Информация("Ошибки не обнаружены");
	КонецЕсли;

КонецПроцедуры

// Выполняет проверку конфигурации средствами платформы
//
// oscript "%system.teamcity.build.workingDir%\uni_script\uni_script.os" /CheckConfig /F "D:\_Проекты\Управление IT-отделом 8 УФ\Пустая конфигурация для обновления" /N "Администратор" /P "" /UParams "-IncorrectReferences -ThinClient -WebClient -Server -UnreferenceProcedures -HandlersExistence -EmptyHandlers -ExtendedModulesCheck -CheckUseModality -CheckUseSynchronousCalls"
// oscript "c:\Projects\it\uni_script\uni_script.os" /CheckConfig /F "c:\Projects\_Конфигурации\Управление IT-отделом 8 (разработка)\" /N "Администратор" /P ""
Процедура ПроверкаКонфигурации()

	Лог.Информация("Начало проверки модулей конфигурации");

	// Делаем копию
	ПараметрыЗапуска = Конфигуратор.ПолучитьПараметрыЗапуска();
	ПараметрыЗапуска.Добавить("/CheckConfig");
	СтрПарметрыПроверки = "";
	Массив = Новый Массив();
	СтрПарметрыПроверки = Параметры["/UParams"];
	Если НЕ ЗначениеЗаполнено(СтрПарметрыПроверки) Тогда
		Массив.Добавить("-ThinClient");
		Массив.Добавить("-WebClient");
		Массив.Добавить("-Server");
		Массив.Добавить("-ExternalConnection");
		Массив.Добавить("-ExternalConnectionServer");
		Массив.Добавить("-ExternalConnection");
		Массив.Добавить("-ExternalConnectionServer");
		СтрПарметрыПроверки = "";
		Для Каждого Стр Из Массив Цикл
			ПараметрыЗапуска.Добавить(Стр);
			СтрПарметрыПроверки = СтрПарметрыПроверки + Стр + " ";
		КонецЦикла;
	КонецЕсли;

	Лог.Информация("Ключи запуска проверки: " + СтрПарметрыПроверки);
	мВременныйФайл = ПолучитьИмяВременногоФайла();	
	ПараметрыЗапуска.Добавить("/Out " + мВременныйФайл);

	Попытка
		Конфигуратор.ВыполнитьКоманду(ПараметрыЗапуска);		
	Исключение												   
	КонецПопытки;

	Если ФайлСуществует(мВременныйФайл) Тогда
		ТекстовыйФайл = Новый ТекстовыйДокумент();
		ТекстовыйФайл.Прочитать(мВременныйФайл);
		Текст = ТекстовыйФайл.ПолучитьТекст();	
		Если СтрЧислоСтрок(Текст) > 0 Тогда
			КоличествоОшибок = 0;
			Для Индекс = 1 По СтрЧислоСтрок(Текст) Цикл
				Стр = СтрПолучитьСтроку(Текст, Индекс);
				Если Стр = "Ошибок не обнаружено" Тогда
					Прервать;
				КонецЕсли;
				Лог.Ошибка(Стр);
				КоличествоОшибок = КоличествоОшибок + 1;
			КонецЦикла;

			Если КоличествоОшибок > 0 Тогда
				Лог.Ошибка("Проверка завершена с ошибками");
				КодВозврата = 97;
				Возврат;
			КонецЕсли;
		КонецЕсли;
		УдалитьФайлы(мВременныйФайл);
	КонецЕсли;
	Лог.Информация("Проверка завершена");
	
КонецПроцедуры

// Выполняет обновление ИБ с помощью Комконнектора.
// oscript "c:\work\uni\uni_script.os" /UpdateIB /F "c:\Base1C\vanessa\chistaya"
Процедура ВыполнитьОбновлениеИБ()
	
	Параметры.Вставить("/Legal", "Yes");
	ВыполнитьПрограммноеОбновлениеКонфигурации();

КонецПроцедуры	

// Возвращает строковое представление размера файла.
//
Функция ПредставлениеРазмераФайла(Знач Размер)

	Если Размер < 1024 Тогда
		Возврат Формат(Размер, "ЧДЦ=1") + " " + НСтр("ru = 'байт'");
	ИначеЕсли Размер < 1024 * 1024 Тогда
		Возврат Формат(Размер / 1024, "ЧДЦ=1") + " " + НСтр("ru = 'КБ'");
	ИначеЕсли Размер < 1024 * 1024 * 1024 Тогда
		Возврат Формат(Размер / (1024 * 1024), "ЧДЦ=1") + " " + НСтр("ru = 'МБ'");
	Иначе
		Возврат Формат(Размер / (1024 * 1024 * 1024), "ЧДЦ=1") + " " + НСтр("ru = 'ГБ'");
	КонецЕсли;

КонецФункции

Процедура ОпубликоватьНовости()

	Лог.Информация("Начало публикации новостей на сайте");

	ИмяФайлаДистрибутива = Параметры["/UFile"];
	Если НЕ ЗначениеЗаполнено(ИмяФайлаДистрибутива) Тогда
		Лог.Ошибка("Не заполнен параметр ""/UFile"" - имя файла дистрибутива");
		КодВозврата = 98;
		Возврат;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Параметры["/Settings"]) Тогда
		Лог.Ошибка("Не заполнен параметр ""/Settings"" - файл с настройками!");
		КодВозврата = 99;
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Параметры["/Section"]) Тогда
		Лог.Ошибка("Не заполнен параметр ""/Section"" - секция в файле с настройками!");
		КодВозврата = 100;
		Возврат;
	КонецЕсли;

	мИмяПользователя = "";
	Если ЗначениеЗаполнено(Параметры["/N"]) Тогда
		мИмяПользователя = Параметры["/N"];		
	Иначе
		Лог.Ошибка("Не заполнен параметр ""/N"" - имя пользователя для копирования по FTP!");
		КодВозврата = 30;
		Возврат;
	КонецЕсли;
	
	мПароль = "";
	Если ЗначениеЗаполнено(Параметры["/P"]) Тогда
		мПароль = Параметры["/P"];		
	Иначе
		Лог.Ошибка("Не заполнен параметр ""/P"" - пароль для копирования по FTP!");
		КодВозврата = 31;
		Возврат;
	КонецЕсли;

	мСервер = "";
	Если ЗначениеЗаполнено(Параметры["/UServer"]) Тогда
		мСервер = Параметры["/UServer"];		
	Иначе
		Лог.Ошибка("Не заполнен параметр ""/P"" - пароль для копирования по FTP!");
		КодВозврата = 32;
		Возврат;
	КонецЕсли;

	мПутьНаСервере = "";
	Если ЗначениеЗаполнено(Параметры["/UPathFTP"]) Тогда
		мПутьНаСервере = Параметры["/UPathFTP"];		
	Иначе
		Лог.Ошибка("Не заполнен параметр ""/UPathFTP"" - путь на сервере FTP куда необходимо скопировать файл!");
		КодВозврата = 33;
		Возврат;
	КонецЕсли;	
	
	Settings		 	= Параметры["/Settings"];
	Section			 	= Параметры["/Section"];
	Настройки 			= ПрочитатьСекциюINIФайла(Settings, Section);

	SITE_ID_PROGRAM		= Настройки.Получить("SITE_ID_PROGRAM");	
	VERSION 			= Настройки.Получить("VERSION");
	VERSION_UPDATES		= Настройки.Получить("VERSION_UPDATES");
	DATEVERSION			= Настройки.Получить("DATEVERSION");

	Каталог = ДополнитьСтрокуСлешем(КаталогВременныхФайлов()) + "upd\";
	Лог.Информация("Скачивание файла updates.zip");
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("zip");
	// 1. Скачиваем файл
	КопироватьФайл("https://softonit.ru/upd/updates.zip", ИмяВременногоФайла);
	// 2. Распаковываем updates.xml
	Лог.Информация("Распаковываем updates.zip в " + Каталог);
	Архив = Новый ЧтениеZipФайла(ИмяВременногоФайла);
	Архив.ИзвлечьВсе(Каталог, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
	// 3. Добавляем текст в updates.xml
	Лог.Информация("Добавляем информацию о новой версии");
	Размер = 0;
	СтрокаXML = 
	"	<update product=""" + SITE_ID_PROGRAM + """ vendor=""SoftOnIT.RU"">
	|		<file>http://softonit.ru/personal/lk/</file>
	|		<size>" + ПредставлениеРазмераФайла(Размер) + "</size>
	|		<date>" + DATEVERSION + "</date>
	|		<newsurl>https://softonit.ru/company/news/upd" + SITE_ID_PROGRAM + "-" + СтрЗаменить(VERSION, ".", "-") + "/</newsurl>
	|		<newstexturl>" + СтрЗаменить(VERSION, ".", "_") + ".txt</newstexturl>
	|		<version>" + VERSION + "</version>
	|		<target>" + VERSION_UPDATES + "</target>
	|	</update>";

	ТекстовыйДокумент = Новый ТекстовыйДокумент();
	ТекстовыйДокумент.Прочитать(Каталог + "updates.xml");
	Для Индекс = 1 По ТекстовыйДокумент.КоличествоСтрок() Цикл
		Стр = ТекстовыйДокумент.ПолучитьСтроку(Индекс);
		Если СтрНайти(Стр, "<update product=""" + SITE_ID_PROGRAM + """ vendor=""SoftOnIT.RU"">") > 0 Тогда
			ТекстовыйДокумент.ВставитьСтроку(Индекс, СтрокаXML);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ТекстовыйДокумент.Записать(Каталог + "updates.xml");

	// 4. Упаковка обратно в архив
	Лог.Информация("Упаковка updates.zip");
	УдалитьФайлы(ИмяВременногоФайла);
	НовыйАрхив = Новый ЗаписьZipФайла(ИмяВременногоФайла);
	НовыйАрхив.Добавить(Каталог + "updates.xml");	
	НовыйАрхив.Записать();

	// 5. Копирование файлов на FTP	
	Попытка
		FTPСоединение = Новый FtpСоединение(мСервер, 21, мИмяПользователя, мПароль,, Истина);
		FTPСоединение.УстановитьТекущийКаталог(мПутьНаСервере);
		Лог.Информация("Текущий каталог на сервере <" + мПутьНаСервере + ">");
	Исключение
		Лог.Ошибка("Ошибка подключения к серверу FTP: " + ОписаниеОшибки());
		КодВозврата = 34;
		Возврат;
	КонецПопытки;

	Лог.Информация("Передача файла <updates.zip> по FTP");
	Попытка
		FTPСоединение.Записать(ИмяВременногоФайла, "updates.zip");
		Лог.Информация("Завершение передачи файла <updates.zip> по FTP");
	Исключение
		Лог.Ошибка("Ошибка передачи файла по FTP: " + ОписаниеОшибки());
		КодВозврата = 34;
	КонецПопытки;	
	Лог.Информация("Завершение передачи файлов каталога по FTP");		

	// 6. Удаление временных файлов
	УдалитьФайлы(Каталог);
	УдалитьФайлы(ИмяВременногоФайла);

	Лог.Информация("Окончание публикации новостей на сайте");

КонецПроцедуры

// Функция для получения файла из сети Интернет.
//
// Параметры:
// URL - строка - url файла в формате: [Протокол://]<Сервер>/<Путь к файлу на сервере>
//
// НастройкаСоединения - Соответствие -
//		ЗащищенноеСоединение* - булево - соединение защищенное
//		ПассивноеСоединение*  - булево - соединение защищенное
//		Пользователь - строка - пользователь от имени которого установлено соединение
//		Пароль       - строка - пароль пользователя от которого установлено соединение
//		Порт         - число  - порт сервера с которым установлено соединение
//		* - взаимоисключающие ключи
//
// НастройкиПрокси - Соответствие:
//		ИспользоватьПрокси - использовать ли прокси-сервер
//		НеИспользоватьПроксиДляЛокальныхАдресов - использовать ли прокси-сервер для локальных адресов
//		ИспользоватьСистемныеНастройки - использовать ли системные настройки прокси-сервера
//		Сервер       - адрес прокси-сервера
//		Порт         - порт прокси-сервера
//		Пользователь - имя пользователя для авторизации на прокси-сервере
//		Пароль       - пароль пользователя
//
// НастройкаСохранения - соответствие - содержит параметры для сохранения скачанного файла
//		МестоХранения - строка - может содержать 
//			"Клиент" - клиент,
//			"Сервер" - сервер,
//			"ВременноеХранилище" - временное хранилище
//		Путь - строка (необязательный параметр) - путь к каталогу на клиенте либо на сервере, 
//			либо адрес во временном хранилище,  если не задано будет сгенерировано автоматически
//
// Возвращаемое значение:
// структура
// успех  - булево - успех или неудача операции
// строка - строка - в случае успеха либо строка-путь сохранения файла
//                   либо адрес во временном хранилище
//                   в случае неуспеха сообщение об ошибке
//
Функция ПолучитьФайлИзИнтернет(Знач URL, Знач НастройкаСохранения, Знач НастройкаСоединения = Неопределено,
	Знач НастройкиПрокси = Неопределено, Перенаправления = Неопределено)	
		
	СтруктураURI	= СтруктураURI(URL);
	Сервер    		= СтруктураURI.Хост;
	ПутьНаСервере	= СтруктураURI.ПутьНаСервере;
	Протокол      	= СтруктураURI.Схема;
	
	ПассивноеСоединение = НастройкаСоединения.Получить("ПассивноеСоединение");
	ЗащищенноеСоединение= НастройкаСоединения.Получить("ЗащищенноеСоединение");	
	ИмяПользователя     = НастройкаСоединения.Получить("Пользователь");
	ПарольПользователя  = НастройкаСоединения.Получить("Пароль");
	Порт                = НастройкаСоединения.Получить("Порт");
	Таймаут             = НастройкаСоединения.Получить("Таймаут");
	
	Если (Протокол = "https" Или Протокол = "ftps") И ЗащищенноеСоединение = Неопределено Тогда
		ЗащищенноеСоединение = Истина;
	КонецЕсли;
	
	Если ЗащищенноеСоединение = Истина Тогда
		ЗащищенноеСоединение = Новый ЗащищенноеСоединениеOpenSSL(Неопределено, Неопределено);
	ИначеЕсли ЗащищенноеСоединение = Ложь Тогда
		ЗащищенноеСоединение = Неопределено;
		// Иначе параметр ЗащищенноеСоединение был задан в явном виде.
	КонецЕсли;
	
	Если Порт = Неопределено Тогда		
		Порт = СтруктураURI.Порт;		
	КонецЕсли;
	
	Если НастройкиПрокси = Неопределено Тогда 
		Прокси = Неопределено;
	Иначе 
		Прокси = НовыйИнтернетПрокси(НастройкиПрокси, Протокол);
	КонецЕсли;
	
	Если НастройкаСохранения["Путь"] <> Неопределено Тогда
		ПутьДляСохранения = НастройкаСохранения["Путь"];
	Иначе
		ПутьДляСохранения = ПолучитьИмяВременногоФайла();
	КонецЕсли;
	
	Если Таймаут = Неопределено Тогда 
		Таймаут = -1;		
	КонецЕсли;
	
	ИспользуетсяFTPПротокол = (Протокол = "ftp" Или Протокол = "ftps");	
	Если ИспользуетсяFTPПротокол Тогда		
		ПассивноеСоединение                       = НастройкаСоединения.Получить("ПассивноеСоединение");
		УровеньИспользованияЗащищенногоСоединения = НастройкаСоединения.Получить("УровеньИспользованияЗащищенногоСоединения");		
		Попытка			
			Если Таймаут = -1 Тогда				
				Соединение = Новый FTPСоединение(
					Сервер, 
					Порт, 
					ИмяПользователя, 
					ПарольПользователя,
					Прокси, 
					ПассивноеСоединение, 
					7, 
					ЗащищенноеСоединение, 
					УровеньИспользованияЗащищенногоСоединения);					
			КонецЕсли;			
			Соединение = Новый FTPСоединение(
				Сервер, 
				Порт, 
				ИмяПользователя, 
				ПарольПользователя,
				Прокси, 
				ПассивноеСоединение, 
				Таймаут, 
				ЗащищенноеСоединение, 
				УровеньИспользованияЗащищенногоСоединения);			
			Сервер	= Соединение.Сервер;
			Порт  	= Соединение.Порт;			
			Соединение.Получить(ПутьНаСервере, ПутьДляСохранения);			
		Исключение			
			ТекстОшибки = "Не удалось получить файл " + URL + " по причине " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			Лог.Ошибка(ТекстОшибки);			
			Возврат ПолучениеФайлаСформироватьРезультат(Ложь, ТекстОшибки);			
		КонецПопытки;
		
	Иначе // Используется HTTP протокол.		
		Заголовки                    = НастройкаСоединения.Получить("Заголовки");
		Если Заголовки = Неопределено Тогда
			Заголовки = Новый Соответствие;
		КонецЕсли;	
		ИспользоватьАутентификациюОС = НастройкаСоединения.Получить("ИспользоватьАутентификациюОС");
		Если ИспользоватьАутентификациюОС = Неопределено Тогда
			ИспользоватьАутентификациюОС = Ложь;
		КонецЕсли;		
		Попытка			
			Если Таймаут = -1 Тогда				
				Соединение = Новый HTTPСоединение(
					Сервер, 
					Порт, 
					ИмяПользователя, 
					ПарольПользователя,
					Прокси, 
					7, 
					ЗащищенноеСоединение, 
					ИспользоватьАутентификациюОС);				
			КонецЕсли;			
			Соединение = Новый HTTPСоединение(
				Сервер, 
				Порт, 
				ИмяПользователя, 
				ПарольПользователя,
				Прокси, 
				Таймаут, 
				ЗащищенноеСоединение, 
				ИспользоватьАутентификациюОС);			
			Сервер = Соединение.Сервер;
			Порт   = Соединение.Порт;			
			
			ЗапросHTTP = Новый HTTPЗапрос(ПутьНаСервере, Заголовки);
			ЗапросHTTP.Заголовки.Вставить("Accept-Charset", "UTF-8");
			ЗапросHTTP.Заголовки.Вставить("X-1C-Request-UID", Строка(Новый УникальныйИдентификатор));
			ОтветHTTP = Соединение.Получить(ЗапросHTTP, ПутьДляСохранения);
			
		Исключение						
			ТекстОшибки = "Не удалось установить HTTP-соединение с сервером " + Сервер + " по причине: " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			Возврат ПолучениеФайлаСформироватьРезультат(Ложь, ТекстОшибки);			
		КонецПопытки;
		
		Попытка			
			Если ОтветHTTP.КодСостояния = 301 // 301 Moved Permanently
				Или ОтветHTTP.КодСостояния = 302 // 302 Found, 302 Moved Temporarily
				Или ОтветHTTP.КодСостояния = 303 // 303 See Other by GET
				Или ОтветHTTP.КодСостояния = 307 // 307 Temporary Redirect
				Или ОтветHTTP.КодСостояния = 308 Тогда // 308 Permanent Redirect				
				Если Перенаправления.Количество() > 7 Тогда
					ВызватьИсключение 
						НСтр("ru = 'Превышено количество перенаправлений.'");
				Иначе					
					НовыйURL = ОтветHTTP.Заголовки["Location"];					
					Если НовыйURL = Неопределено Тогда 
						ВызватьИсключение 
							НСтр("ru = 'Некорректное перенаправление, отсутствует HTTP-заголовок ответа ""Location"".'");
					КонецЕсли;					
					НовыйURL = СокрЛП(НовыйURL);					
					Если ПустаяСтрока(НовыйURL) Тогда
						ВызватьИсключение 
							НСтр("ru = 'Некорректное перенаправление, пустой HTTP-заголовок ответа ""Location"".'");
					КонецЕсли;					
					Если Перенаправления.Найти(НовыйURL) <> Неопределено Тогда
						ВызватьИсключение НСтр("ru = 'Циклическое перенаправление. Попытка перейти уже выполнялась ранее.'");							
					КонецЕсли;					
					Перенаправления.Добавить(URL);					
					Если Не СтрНачинаетсяС(НовыйURL, "http") Тогда
						// <схема>://<хост>:<порт>/<путь>
						НовыйURL = СтрШаблон(
							"%1://%2:%3/%4", Протокол, Сервер, Формат(Порт, "ЧГ="), НовыйURL);
					КонецЕсли;					
					Возврат ПолучитьФайлИзИнтернет(НовыйURL, НастройкаСохранения, НастройкаСоединения,
						НастройкиПрокси, Перенаправления);					
				КонецЕсли;				
			КонецЕсли;
			
			Если ОтветHTTP.КодСостояния < 200 Или ОтветHTTP.КодСостояния >= 300 Тогда				
				Если ОтветHTTP.КодСостояния = 304 Тогда					
					Если (ЗапросHTTP.Заголовки["If-Modified-Since"] <> Неопределено
						Или ЗапросHTTP.Заголовки["If-None-Match"] <> Неопределено) Тогда
						//ЗаписыватьОшибку = Ложь;
					КонецЕсли;					
					ТекстОшибки = СтрШаблон(
						НСтр("ru = 'Сервер убежден, что с вашего последнего запроса его ответ не изменился:
						           |%1'"),
						РасшифровкаКодаСостоянияHTTP(ОтветHTTP.КодСостояния));					
					ВызватьИсключение ТекстОшибки;					
				ИначеЕсли ОтветHTTP.КодСостояния < 200
					Или ОтветHTTP.КодСостояния >= 300 И ОтветHTTP.КодСостояния < 400 Тогда					
					ТекстОшибки = СтрШаблон(
						НСтр("ru = 'Неподдерживаемый ответ сервера:
						           |%1'"),
						РасшифровкаКодаСостоянияHTTP(ОтветHTTP.КодСостояния));					
					ВызватьИсключение ТекстОшибки;					
				ИначеЕсли ОтветHTTP.КодСостояния >= 400 И ОтветHTTP.КодСостояния < 500 Тогда 					
					ТекстОшибки = СтрШаблон(
						НСтр("ru = 'Ошибка при выполнении запроса:
						           |%1'"),
						РасшифровкаКодаСостоянияHTTP(ОтветHTTP.КодСостояния));					
					ВызватьИсключение ТекстОшибки;					
				Иначе
					ТекстОшибки = СтрШаблон(
						НСтр("ru = 'Ошибка сервера при обработке запроса к ресурсу:
						           |%1'"),
						РасшифровкаКодаСостоянияHTTP(ОтветHTTP.КодСостояния));					
					ВызватьИсключение ТекстОшибки;					
				КонецЕсли;				
			КонецЕсли;			
		Исключение			
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Не удалось получить файл %1 с сервера %2:%3
				           |по причине:
				           |%4'"),
				URL, Сервер, Формат(Порт, "ЧГ="),
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));			
			Возврат ПолучениеФайлаСформироватьРезультат(Ложь, ТекстОшибки);			
		КонецПопытки;		
	КонецЕсли;
	
	// Если сохраняем файл в соответствии с настройкой 
	Если НастройкаСохранения["МестоХранения"] = "ВременноеХранилище" Тогда
		
	ИначеЕсли НастройкаСохранения["МестоХранения"] = "Клиент"
	      ИЛИ НастройкаСохранения["МестоХранения"] = "Сервер" Тогда
		Возврат ПолучениеФайлаСформироватьРезультат(Истина, ПутьДляСохранения);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Разбирает строку URI на составные части и возвращает в виде структуры.
// На основе RFC 3986.
//
// Параметры:
//  СтрокаURI - Строка - ссылка на ресурс в формате:
//    
//     <схема>://<логин>:<пароль>@<хост>:<порт>/<путь>?<параметры>#<якорь>
//               \______________/ \___________/
//                      |               |
//           	   авторизация     имя сервера
//               \____________________________/ \________________________/
//                              |                            |
//                       строка соединения            путь на сервере
//
// Возвращаемое значение:
//  Структура:
//             Схема         - Строка;
//             Логин         - Строка; 
//             Пароль        - Строка;
//             ИмяСервера    - Строка;
//             Хост          - Строка; 
//             Порт          - Строка; 
//             ПутьНаСервере - Строка;
//
Функция СтруктураURI(Знач СтрокаURI) Экспорт
	
	СтрокаURI = СокрЛП(СтрокаURI);
	
	// схема
	Схема = "";
	Позиция = СтрНайти(СтрокаURI, "://");
	Если Позиция > 0 Тогда
		Схема = НРег(Лев(СтрокаURI, Позиция - 1));
		СтрокаURI = Сред(СтрокаURI, Позиция + 3);
	КонецЕсли;
	
	// Строка соединения и путь на сервере.
	СтрокаСоединения = СтрокаURI;
	ПутьНаСервере = "";
	Позиция = СтрНайти(СтрокаСоединения, "/");
	Если Позиция > 0 Тогда
		ПутьНаСервере = Сред(СтрокаСоединения, Позиция + 1);
		СтрокаСоединения = Лев(СтрокаСоединения, Позиция - 1);
	КонецЕсли;
	
	// Информация пользователя и имя сервера.
	СтрокаАвторизации = "";
	ИмяСервера = СтрокаСоединения;
	Позиция = СтрНайти(СтрокаСоединения, "@");
	Если Позиция > 0 Тогда
		СтрокаАвторизации = Лев(СтрокаСоединения, Позиция - 1);
		ИмяСервера = Сред(СтрокаСоединения, Позиция + 1);
	КонецЕсли;
	
	// логин и пароль
	Логин = СтрокаАвторизации;
	Пароль = "";
	Позиция = СтрНайти(СтрокаАвторизации, ":");
	Если Позиция > 0 Тогда
		Логин = Лев(СтрокаАвторизации, Позиция - 1);
		Пароль = Сред(СтрокаАвторизации, Позиция + 1);
	КонецЕсли;
	
	// хост и порт
	Хост = ИмяСервера;
	Порт = "";
	Позиция = СтрНайти(ИмяСервера, ":");
	Если Позиция > 0 Тогда
		Хост = Лев(ИмяСервера, Позиция - 1);
		Порт = Сред(ИмяСервера, Позиция + 1);
		Если Не ТолькоЦифрыВСтроке(Порт) Тогда
			Порт = "";
		КонецЕсли;
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Схема", Схема);
	Результат.Вставить("Логин", Логин);
	Результат.Вставить("Пароль", Пароль);
	Результат.Вставить("ИмяСервера", ИмяСервера);
	Результат.Вставить("Хост", Хост);
	Результат.Вставить("Порт", ?(ПустаяСтрока(Порт), Неопределено, Число(Порт)));
	Результат.Вставить("ПутьНаСервере", ПутьНаСервере);
	
	Возврат Результат;
	
КонецФункции

// Проверяет, содержит ли строка только цифры.
//
// Параметры:
//  Значение         - Строка - проверяемая строка.
//  Устаревший       - Булево - устаревший параметр, не используется.
//  ПробелыЗапрещены - Булево - если Ложь, то в строке допустимо наличие пробелов.
//
// Возвращаемое значение:
//   Булево - Истина - строка содержит только цифры или пустая, Ложь - строка содержит иные символы.
//
// Пример:
//  Результат = СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке("0123"); // Истина
//  Результат = СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке("0123abc"); // Ложь
//  Результат = СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке("01 2 3",, Ложь); // Истина
//
Функция ТолькоЦифрыВСтроке(Знач Значение, Знач Устаревший = Истина, Знач ПробелыЗапрещены = Истина) Экспорт
	
	Если ТипЗнч(Значение) <> Тип("Строка") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ПробелыЗапрещены Тогда
		Значение = СтрЗаменить(Значение, " ", "");
	КонецЕсли;
		
	Если СтрДлина(Значение) = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Если содержит только цифры, то в результате замен должна быть получена пустая строка.
	// Проверять при помощи ПустаяСтрока нельзя, так как в исходной строке могут быть пробельные символы.
	Возврат СтрДлина(
		СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить(
		СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( СтрЗаменить( 
			Значение, "0", ""), "1", ""), "2", ""), "3", ""), "4", ""), "5", ""), "6", ""), "7", ""), "8", ""), "9", "")) = 0;
	
КонецФункции

// Возвращает прокси по настройкам НастройкаПроксиСервера для заданного протокола Протокол.
//
// Параметры:
//   НастройкаПроксиСервера - Соответствие:
//		ИспользоватьПрокси - использовать ли прокси-сервер.
//		НеИспользоватьПроксиДляЛокальныхАдресов - использовать ли прокси-сервер для локальных адресов.
//		ИспользоватьСистемныеНастройки - использовать ли системные настройки прокси-сервера.
//		Сервер       - адрес прокси-сервера.
//		Порт         - порт прокси-сервера.
//		Пользователь - имя пользователя для авторизации на прокси-сервере.
//		Пароль       - пароль пользователя.
//		ИспользоватьАутентификациюОС - Булево - признак использования аутентификации средствами операционной системы.
//   Протокол - строка - протокол для которого устанавливаются параметры прокси сервера, например "http", "https",
//                       "ftp".
// 
// Возвращаемое значение:
//   ИнтернетПрокси
// 
Функция НовыйИнтернетПрокси(НастройкаПроксиСервера, Протокол)
	
	Если НастройкаПроксиСервера = Неопределено Тогда
		// Системные установки прокси-сервера.
		Возврат Неопределено;
	КонецЕсли;
	
	ИспользоватьПрокси = НастройкаПроксиСервера.Получить("ИспользоватьПрокси");
	Если Не ИспользоватьПрокси Тогда
		// Не использовать прокси-сервер.
		Возврат Новый ИнтернетПрокси(Ложь);
	КонецЕсли;
	
	ИспользоватьСистемныеНастройки = НастройкаПроксиСервера.Получить("ИспользоватьСистемныеНастройки");
	Если ИспользоватьСистемныеНастройки Тогда
		// Системные настройки прокси-сервера.
		Возврат Новый ИнтернетПрокси(Истина);
	КонецЕсли;
	
	// Настройки прокси-сервера, заданные вручную.
	Прокси = Новый ИнтернетПрокси;
	
	// Определение адреса и порта прокси-сервера.
	ДополнительныеНастройки = НастройкаПроксиСервера.Получить("ДополнительныеНастройкиПрокси");
	ПроксиПоПротоколу = Неопределено;
	Если ТипЗнч(ДополнительныеНастройки) = Тип("Соответствие") Тогда
		ПроксиПоПротоколу = ДополнительныеНастройки.Получить(Протокол);
	КонецЕсли;
	
	ИспользоватьАутентификациюОС = НастройкаПроксиСервера.Получить("ИспользоватьАутентификациюОС");
	ИспользоватьАутентификациюОС = ?(ИспользоватьАутентификациюОС = Истина, Истина, Ложь);
	
	Если ТипЗнч(ПроксиПоПротоколу) = Тип("Структура") Тогда
		Прокси.Установить(Протокол, ПроксиПоПротоколу.Адрес, ПроксиПоПротоколу.Порт,
			НастройкаПроксиСервера["Пользователь"], НастройкаПроксиСервера["Пароль"], ИспользоватьАутентификациюОС);
	Иначе
		Прокси.Установить(Протокол, НастройкаПроксиСервера["Сервер"], НастройкаПроксиСервера["Порт"], 
			НастройкаПроксиСервера["Пользователь"], НастройкаПроксиСервера["Пароль"], ИспользоватьАутентификациюОС);
	КонецЕсли;
	
	Прокси.НеИспользоватьПроксиДляЛокальныхАдресов = НастройкаПроксиСервера["НеИспользоватьПроксиДляЛокальныхАдресов"];
	
	АдресаИсключений = НастройкаПроксиСервера.Получить("НеИспользоватьПроксиДляАдресов");
	Если ТипЗнч(АдресаИсключений) = Тип("Массив") Тогда
		Для Каждого АдресИсключения Из АдресаИсключений Цикл
			Прокси.НеИспользоватьПроксиДляАдресов.Добавить(АдресИсключения);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Прокси;
	
КонецФункции

// Функция, заполняющая структуру по параметрам.
//
// Параметры:
// УспехОперации - булево - успех или неуспех операции
// СообщениеПуть - строка - 
//
// Возвращаемое значение - структура:
//          поле успех - булево
//          поле путь  - строка
//
Функция ПолучениеФайлаСформироватьРезультат(Знач Статус, Знач СообщениеПуть)
	
	Результат = Новый Структура("Статус");
	
	Результат.Статус = Статус;

	Если Статус Тогда
		Результат.Вставить("Путь", СообщениеПуть);
	Иначе
		Результат.Вставить("СообщениеОбОшибке", СообщениеПуть);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция РасшифровкаКодаСостоянияHTTP(КодСостояния)
	
	Если КодСостояния = 304 Тогда // Not Modified
		Расшифровка = НСтр("ru = 'Нет необходимости повторно передавать запрошенные ресурсы.'");
	ИначеЕсли КодСостояния = 400 Тогда // Bad Request
		Расшифровка = НСтр("ru = 'Запрос не может быть исполнен.'");
	ИначеЕсли КодСостояния = 401 Тогда // Unauthorized
		Расшифровка = НСтр("ru = 'Попытка авторизации на сервере была отклонена.'");
	ИначеЕсли КодСостояния = 402 Тогда // Payment Required
		Расшифровка = НСтр("ru = 'Требуется оплата.'");
	ИначеЕсли КодСостояния = 403 Тогда // Forbidden
		Расшифровка = НСтр("ru = 'К запрашиваемому ресурсу нет доступа.'");
	ИначеЕсли КодСостояния = 404 Тогда // Not Found
		Расшифровка = НСтр("ru = 'Запрашиваемый ресурс не найден на сервере.'");
	ИначеЕсли КодСостояния = 405 Тогда // Method Not Allowed
		Расшифровка = НСтр("ru = 'Метод запроса не поддерживается сервером.'");
	ИначеЕсли КодСостояния = 406 Тогда // Not Acceptable
		Расшифровка = НСтр("ru = 'Запрошенный формат данных не поддерживается сервером.'");
	ИначеЕсли КодСостояния = 407 Тогда // Proxy Authentication Required
		Расшифровка = НСтр("ru = 'Ошибка аутентификации на прокси-сервере'");
	ИначеЕсли КодСостояния = 408 Тогда // Request Timeout
		Расшифровка = НСтр("ru = 'Время ожидания сервером передачи от клиента истекло.'");
	ИначеЕсли КодСостояния = 409 Тогда // Conflict
		Расшифровка = НСтр("ru = 'Запрос не может быть выполнен из-за конфликтного обращения к ресурсу.'");
	ИначеЕсли КодСостояния = 410 Тогда // Gone
		Расшифровка = НСтр("ru = 'Ресурс на сервере был перемешен.'");
	ИначеЕсли КодСостояния = 411 Тогда // Length Required
		Расшифровка = НСтр("ru = 'Сервер требует указание ""Content-length."" в заголовке запроса.'");
	ИначеЕсли КодСостояния = 412 Тогда // Precondition Failed
		Расшифровка = НСтр("ru = 'Запрос не применим к ресурсу'");
	ИначеЕсли КодСостояния = 413 Тогда // Request Entity Too Large
		Расшифровка = НСтр("ru = 'Сервер отказывается обработать, слишком большой объем передаваемых данных.'");
	ИначеЕсли КодСостояния = 414 Тогда // Request-URL Too Long
		Расшифровка = НСтр("ru = 'Сервер отказывается обработать, слишком длинный URL.'");
	ИначеЕсли КодСостояния = 415 Тогда // Unsupported Media-Type
		Расшифровка = НСтр("ru = 'Сервер заметил, что часть запроса была сделана в неподдерживаемом формат'");
	ИначеЕсли КодСостояния = 416 Тогда // Requested Range Not Satisfiable
		Расшифровка = НСтр("ru = 'Часть запрашиваемого ресурса не может быть предоставлена'");
	ИначеЕсли КодСостояния = 417 Тогда // Expectation Failed
		Расшифровка = НСтр("ru = 'Сервер не может предоставить ответ на указанный запрос.'");
	ИначеЕсли КодСостояния = 429 Тогда // Too Many Requests
		Расшифровка = НСтр("ru = 'Слишком много запросов за короткое время.'");
	ИначеЕсли КодСостояния = 500 Тогда // Internal Server Error
		Расшифровка = НСтр("ru = 'Внутренняя ошибка сервера.'");
	ИначеЕсли КодСостояния = 501 Тогда // Not Implemented
		Расшифровка = НСтр("ru = 'Сервер не поддерживает метод запроса.'");
	ИначеЕсли КодСостояния = 502 Тогда // Bad Gateway
		Расшифровка = НСтр("ru = 'Сервер, выступая в роли шлюза или прокси-сервера, 
		                         |получил недействительное ответное сообщение от вышестоящего сервера.'");
	ИначеЕсли КодСостояния = 503 Тогда // Server Unavailable
		Расшифровка = НСтр("ru = 'Сервер временно не доступен.'");
	ИначеЕсли КодСостояния = 504 Тогда // Gateway Timeout
		Расшифровка = НСтр("ru = 'Сервер в роли шлюза или прокси-сервера 
		                         |не дождался ответа от вышестоящего сервера для завершения текущего запроса.'");
	ИначеЕсли КодСостояния = 505 Тогда // HTTP Version Not Supported
		Расшифровка = НСтр("ru = 'Сервер не поддерживает указанную в запросе версию протокола HTTP'");
	ИначеЕсли КодСостояния = 506 Тогда // Variant Also Negotiates
		Расшифровка = НСтр("ru = 'Сервер настроен некорректно, и не способен обработать запрос.'");
	ИначеЕсли КодСостояния = 507 Тогда // Insufficient Storage
		Расшифровка = НСтр("ru = 'На сервере недостаточно места для выполнения запроса.'");
	ИначеЕсли КодСостояния = 509 Тогда // Bandwidth Limit Exceeded
		Расшифровка = НСтр("ru = 'Сервер превысил отведенное ограничение на потребление трафика.'");
	ИначеЕсли КодСостояния = 510 Тогда // Not Extended
		Расшифровка = НСтр("ru = 'Сервер требует больше информации о совершаемом запросе.'");
	ИначеЕсли КодСостояния = 511 Тогда // Network Authentication Required
		Расшифровка = НСтр("ru = 'Требуется авторизация на сервере.'");
	Иначе 
		Расшифровка = НСтр("ru = '<Неизвестный код состояния>.'");
	КонецЕсли;
	
	Возврат СтрШаблон(
		НСтр("ru = '[%1] %2'"), 
		КодСостояния, 
		Расшифровка);
	
КонецФункции

// oscript "c:\Projects\CreatingContractsWordIn1C\uni_script\uni_script.os" /CreateZip /File "c:\Temp\file.zip" /UMask "c:\Temp\Завершение работы АПК.epf|c:\Temp\VER.TXT"
Процедура СоздатьZipАрхив()
	
	Лог.Информация("Начало создания ZIP-архива");
	
	// Проверка параметров
	Если ЗначениеЗаполнено(Параметры["/File"]) Тогда
		ИмяФайлаАрхива = Параметры["/File"];		
	Иначе
		Лог.Ошибка("Не заполнен параметр ""/File"" - имя ZIP-архива!");
		КодВозврата = 28;
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(Параметры["/UMask"]) Тогда
		МаскаДобавляемыхФайлов = Параметры["/UMask"];		
	Иначе
		Лог.Ошибка("Не заполнен параметр ""/File"" - имя ZIP-архива!");
		КодВозврата = 28;
		Возврат;
	КонецЕсли;	

	ЗаписьZIP =  Новый ЗаписьZipФайла(ИмяФайлаАрхива);

	МассивМасок = РазложитьСтрокуВМассивПодстрок(МаскаДобавляемыхФайлов, "|", Истина, Истина);
	Для Каждого МаскаДобавляемогоФайлаПапки Из МассивМасок Цикл
		Лог.Информация("Добавление файла (каталога) <" +  МаскаДобавляемогоФайлаПапки + ">");
		ЗаписьZIP.Добавить(МаскаДобавляемогоФайлаПапки,
			РежимСохраненияПутейZIP.СохранятьОтносительныеПути,
			РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
	КонецЦикла;

	ЗаписьZIP.Записать();

	Лог.Информация("Создание архива завершено");
	
КонецПроцедуры

// oscript "c:\Projects\CreatingContractsWordIn1C\uni_script\uni_script.os" /BuildDistribEpfErf /UPath "c:\Temp" /UMask "c:\Temp\Завершение работы АПК.epf|c:\Temp\VER.TXT" /Settings "c:\Projects\CreatingContractsWordIn1C\settings.ini" /Section "SETTINGS"
Процедура СоздатьДистрибутивОтчетаИлиОбработки()
	
	// Создание архива с нужными файлами
	Лог.Информация("Начало создания дистрибутива отчета или обработки");
	
	// Шаг 0. Проверка заполненных параметров
	мКаталогСборки = Параметры["/UPath"];
	Если НЕ ЗначениеЗаполнено(мКаталогСборки) Тогда
		Лог.Ошибка("Не заполнен параметр ""/UPath"" - каталог сборки (где будет создан дистрибутив)!");
		КодВозврата = 75;
		Возврат;
	Иначе
		мКаталогСборки = ДополнитьСтрокуСлешем(мКаталогСборки);	
		Если НЕ ФайлСуществует(мКаталогСборки) Тогда		
			СоздатьКаталог(мКаталогСборки);
		КонецЕсли;	
	КонецЕсли;

	Если ЗначениеЗаполнено(Параметры["/UMask"]) Тогда
		МаскаДобавляемыхФайлов = Параметры["/UMask"];		
	Иначе
		Лог.Ошибка("Не заполнен параметр ""/File"" - имя ZIP-архива!");
		КодВозврата = 28;
		Возврат;
	КонецЕсли;	

	Если НЕ ЗначениеЗаполнено(Параметры["/Settings"]) Тогда
		Лог.Ошибка("Не заполнен параметр ""/Settings"" - файл с настройками!");
		КодВозврата = 85;
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Параметры["/Section"]) Тогда
		Лог.Ошибка("Не заполнен параметр ""/Section"" - секция в файле с настройками!");
		КодВозврата = 86;
		Возврат;
	КонецЕсли;
	
	Settings		 	= Параметры["/Settings"];
	Section			 	= Параметры["/Section"];
	Настройки 			= ПрочитатьСекциюINIФайла(Settings, Section);

	мПрефикс = Параметры["/SITE_ID_PROGRAM"];
	Если НЕ ЗначениеЗаполнено(мПрефикс) Тогда
		мПрефикс = Настройки.Получить("SITE_ID_PROGRAM");	
		Если НЕ ЗначениеЗаполнено(мПрефикс) Тогда		
			Лог.Ошибка("Не заполнен параметр ""/SITE_ID_PROGRAM"" - ID программы в файле настроек или параметр /SITE_ID_PROGRAM!");
			КодВозврата = 84;
			Возврат;
		КонецЕсли;
	КонецЕсли;

	мПрефикс = мПрефикс + "_";

	мМинимальнаяВерсияПлатформы = Настройки.Получить("MINIMAL_PLATFORM_VERSION");
	Если НЕ ЗначениеЗаполнено(мМинимальнаяВерсияПлатформы) Тогда
		Лог.Ошибка("Не заполнен параметр ""/MINIMAL_PLATFORM_VERSION"" - минимальная версия платформы для работы в файле настроек!");
		КодВозврата = 84;
		Возврат;
	КонецЕсли;

	мВерсия = Настройки.Получить("VERSION");
	Если НЕ ЗначениеЗаполнено(мВерсия) Тогда
		Лог.Ошибка("Не заполнен параметр ""/VERSION"" - версия отчета (обработки) в файле настроек!");
		КодВозврата = 84;
		Возврат;
	КонецЕсли;

	ИмяФайлаАрхива = мКаталогСборки + мПрефикс + СтрЗаменить(мВерсия, ".", "_") + "_full.zip";

	ЗаписьZIP =  Новый ЗаписьZipФайла(ИмяФайлаАрхива);
	МассивМасок = РазложитьСтрокуВМассивПодстрок(МаскаДобавляемыхФайлов, "|", Истина, Истина);
	Для Каждого МаскаДобавляемогоФайлаПапки Из МассивМасок Цикл
		Лог.Информация("Добавление файла (каталога) <" +  МаскаДобавляемогоФайлаПапки + ">");
		ЗаписьZIP.Добавить(МаскаДобавляемогоФайлаПапки,
			РежимСохраненияПутейZIP.СохранятьОтносительныеПути,
			РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
	КонецЦикла;

	ЗаписьZIP.Записать();

	КопироватьФайл(ИмяФайлаАрхива, мКаталогСборки + мПрефикс + СтрЗаменить(мВерсия, ".", "_") + "_upd.zip");

	Лог.Информация("Создание архива дистрибутива завершено");

КонецПроцедуры

// oscript "c:\Projects\CreatingContractsWordIn1C\uni_script\uni_script.os" /ConvertChangeLog /F "c:\Projects\CreatingContractsWordIn1C\CHANGELOG.md" /File "c:\Projects\CreatingContractsWordIn1C\news.html" /Settings "c:\Projects\CreatingContractsWordIn1C\settings.ini" /Section "SETTINGS"
Процедура ПолучитьОписаниеОбновленияИзChangeLog()

	// Создание архива с нужными файлами
	Лог.Информация("Начало создания новости на сайт");
	
	// Шаг 0. Проверка заполненных параметров
	мФайлHTML = Параметры["/File"];
	Если НЕ ЗначениеЗаполнено(мФайлHTML) Тогда
		Лог.Ошибка("Не заполнен параметр ""/File"" - куда сохранить (где будет создан дистрибутив)!");
		КодВозврата = 75;
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(Параметры["/F"]) Тогда
		ФайлОсновной = Параметры["/F"];		
	Иначе
		Лог.Ошибка("Не заполнен параметр ""/F"" - полный путь к Changelog.md!");
		КодВозврата = 28;
		Возврат;
	КонецЕсли;	

	Если НЕ ЗначениеЗаполнено(Параметры["/Settings"]) Тогда
		Лог.Ошибка("Не заполнен параметр ""/Settings"" - файл с настройками!");
		КодВозврата = 85;
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Параметры["/Section"]) Тогда
		Лог.Ошибка("Не заполнен параметр ""/Section"" - секция в файле с настройками!");
		КодВозврата = 86;
		Возврат;
	КонецЕсли;
	
	Settings		 	= Параметры["/Settings"];
	Section			 	= Параметры["/Section"];
	Настройки 			= ПрочитатьСекциюINIФайла(Settings, Section);

	мПрефикс = Настройки.Получить("SITE_ID_PROGRAM");
	Если НЕ ЗначениеЗаполнено(мПрефикс) Тогда
		Лог.Ошибка("Не заполнен параметр ""/SITE_ID_PROGRAM"" - ID программы в файле настроек!");
		КодВозврата = 84;
		Возврат;
	Иначе
		мПрефикс = мПрефикс + "_";
	КонецЕсли;	

	мМинимальнаяВерсияПлатформы = Настройки.Получить("MINIMAL_PLATFORM_VERSION");
	Если НЕ ЗначениеЗаполнено(мМинимальнаяВерсияПлатформы) Тогда
		Лог.Ошибка("Не заполнен параметр ""/MINIMAL_PLATFORM_VERSION"" - минимальная версия платформы для работы в файле настроек!");
		КодВозврата = 84;
		Возврат;
	КонецЕсли;

	мВерсия = Настройки.Получить("VERSION");
	Если НЕ ЗначениеЗаполнено(мВерсия) Тогда
		Лог.Ошибка("Не заполнен параметр ""/VERSION"" - версия отчета (обработки) в файле настроек!");
		КодВозврата = 84;
		Возврат;
	КонецЕсли;

	Обновление = Новый ТаблицаЗначений;
	Обновление.Колонки.Добавить("Раздел");
	Обновление.Колонки.Добавить("Текст");
	Обновление.Колонки.Добавить("ТекстHTML");
	Обновление.Колонки.Добавить("ЦветТекста");

	ТД = Новый ТекстовыйДокумент;
	Результат = "";
	Области = Новый ТекстовыйДокумент;
	Области.Прочитать(ФайлОсновной, КодировкаТекста.UTF8);
	ТекущаяВерсияФайла = "";
	Раздел = "Новый функционал";
	Для а = 1 по Области.КоличествоСтрок() Цикл
		
		Текст 		= СокрЛП(Области.ПолучитьСтроку(а));
		Если ПустаяСтрока(Текст) Тогда
			Продолжить;
		КонецЕсли;

		Если СтрНайти(Текст, "# [" + мВерсия + "]") > 0 Тогда
			ТекущаяВерсияФайла = мВерсия;
			Продолжить;
		Иначе
			Если СтрНайти(Текст, "# [") > 0 И СтрНайти(Текст, "] -") > 0 Тогда
				Если НЕ ПустаяСтрока(ТекущаяВерсияФайла) Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;

			Если ПустаяСтрока(ТекущаяВерсияФайла) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		Результат = Результат + Текст + Символы.ПС;

	КонецЦикла;
		
	//ТекстHTML 	= Символы.ПС + Результат + Символы.ПС;
	ТекстHTML 	= Результат;
	
	// header
	ТекстHTML = ЗаменитьПоРегулярномуВыражению(ТекстHTML, "###### (.*)", "<h6>$1</h6>");
	ТекстHTML = ЗаменитьПоРегулярномуВыражению(ТекстHTML, "##### (.*)", "<h5>$1</h5>");
	ТекстHTML = ЗаменитьПоРегулярномуВыражению(ТекстHTML, "#### (.*)", "<h4>$1</h4>");
	ТекстHTML = ЗаменитьПоРегулярномуВыражению(ТекстHTML, "### (.*)", "<h3>$1</h3>");
	ТекстHTML = ЗаменитьПоРегулярномуВыражению(ТекстHTML, "## (.*)", "<h2>$1</h2>");
	ТекстHTML = ЗаменитьПоРегулярномуВыражению(ТекстHTML, "# (.*)", "<h1>$1</h1>");

	// **жирный** __жирный__
	ТекстHTML = ЗаменитьПоРегулярномуВыражению(ТекстHTML, "(\*\*|__)(.*?)\1", "<strong>$2</strong>");	
	// *курсив* _курсив_
	ТекстHTML = ЗаменитьПоРегулярномуВыражению(ТекстHTML, "(\*|_)(\S(.*?\S)?)(\*|_)", "<em>$2</em>");
	// `выделенный`
	ТекстHTML = ЗаменитьПоРегулярномуВыражению(ТекстHTML, "[`](.*?)[`]", "<code>$1</code>");
	// "выделенный"
	ТекстHTML = ЗаменитьПоРегулярномуВыражению(ТекстHTML, "\:\""(.*?)\""\:", "<q>$1</q>");
	// ~~Зачеркнутый~~
	ТекстHTML = ЗаменитьПоРегулярномуВыражению(ТекстHTML, "\~\~(.*?)\~\~", "<del>$1</del>");
	// Горизонтальные линии
	// --- *** ___ (три и более)
	ТекстHTML = ЗаменитьПоРегулярномуВыражению(ТекстHTML, "[-]{3,}", Символы.ПС + "<hr />");
	ТекстHTML = ЗаменитьПоРегулярномуВыражению(ТекстHTML, "[*]{3,}", Символы.ПС + "<hr />");
	ТекстHTML = ЗаменитьПоРегулярномуВыражению(ТекстHTML, "[_]{3,}", Символы.ПС + "<hr />");
	// Картинки
	// ![alt-текст](https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png "Текст заголовка логотипа 1")
	ТекстHTML = ЗаменитьПоРегулярномуВыражению(ТекстHTML, "\!\[([^\[]+)\]\(([^\""]+) \""([^\)]+)\""\)", "<img src=""$2"" alt=""$1"" title=""$3"">");
	// ![Это опциональный alt-текст](https://i.imgur.com/HzsGS7G.png)
	ТекстHTML = ЗаменитьПоРегулярномуВыражению(ТекстHTML, "\!\[([^\[]+)\]\(([^\)]+)\)", "<img src=""$2"" alt=""$1"">");
	// Это гиперссылка [here](myLib/README.md)
	ТекстHTML = ЗаменитьПоРегулярномуВыражению(ТекстHTML, "\[([^\[]+)\]\(([^\)]+)\)", "<a href=""$2"" target=""_blank"">$1</a>");
	// mails
	ТекстHTML = ЗаменитьПоРегулярномуВыражению(ТекстHTML, "([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\.[a-zA-Z0-9_-]+)", "<a href=""mailto:$1"">$1</a>");
	// ul
	ТекстHTML = ЗаменитьПоРегулярномуВыражению(ТекстHTML, "\n\* (.*)", Символы.ПС + "<ul>" + Символы.ПС + "<li>$1</li>" + Символы.ПС + "</ul>");
	// ol
	ТекстHTML = ЗаменитьПоРегулярномуВыражению(ТекстHTML, "\n\- (.*)", Символы.ПС + "<ol>" + Символы.ПС + "<li>$1</li>" + Символы.ПС + "</ol>");
	// blockquote
	ТекстHTML = ЗаменитьПоРегулярномуВыражению(ТекстHTML, "\n(\>)(.*)", Символы.ПС + "<blockquote>$2</blockquote>");

	РегВыражение = Новый РегулярноеВыражение("^<\/?(ul|ol|li|h|p|bl)");
	РегВыражение.ИгнорироватьРегистр = Истина;
	РегВыражение.Многострочный = Истина;
	РезультатПреобразования = "";
	Для Индекс = 1 По СтрЧислоСтрок(ТекстHTML) Цикл
		Стр = СтрПолучитьСтроку(ТекстHTML, Индекс);
		Если РегВыражение.НайтиСовпадения(Стр).Количество() > 0 Тогда
			РезультатПреобразования = РезультатПреобразования + Стр + Символы.ПС;	
		Иначе
			РезультатПреобразования = РезультатПреобразования + "<p>" + Стр + "</p>" + Символы.ПС;			
		КонецЕсли;		
	КонецЦикла;
	ТекстHTML = РезультатПреобразования;
	// Удаляем лишнее
	ТекстHTML = ЗаменитьПоРегулярномуВыражению(ТекстHTML, "\n<\/ul>\s?<ul>", "");
	ТекстHTML = ЗаменитьПоРегулярномуВыражению(ТекстHTML, "\n<\/ol>\s?<ol>", "");
	ТекстHTML = ЗаменитьПоРегулярномуВыражению(ТекстHTML, "<\/blockquote>\n<blockquote>", Символы.ПС);

	// Меняем для ul класс если найдено <h3 class=""updnew"">
	ТекстHTML = ЗаменитьПоРегулярномуВыражению(ТекстHTML, "\<h2\>(Добавлено|Новый функционал|Added)\<\/h2\>\n<ul>", "<h2>$1</h2>" + Символы.ПС + "<ul class=""updnew"">");
	ТекстHTML = ЗаменитьПоРегулярномуВыражению(ТекстHTML, "\<h2\>(Изменения|Изменено|Changed)\<\/h2\>\n<ul>", "<h2>$1</h2>" + Символы.ПС + "<ul class=""updedt"">");
	ТекстHTML = ЗаменитьПоРегулярномуВыражению(ТекстHTML, "\<h2\>(Исправление ошибок|Замечания к обновлению|Fixed)\<\/h2\>\n<ul>", "<h2>$1</h2>" + Символы.ПС + "<ul class=""upderr"">");
	ТекстHTML = ЗаменитьПоРегулярномуВыражению(ТекстHTML, "\<h2\>(Внимание!|Новости|News|Attention!)\<\/h2\>\n<ul>", "<h2>$1</h2>" + Символы.ПС + "<ul class=""updnws"">");

	ТекстHTML = ЗаменитьПоРегулярномуВыражению(ТекстHTML, "\<h3\>(Добавлено|Новый функционал|Added)\<\/h3\>\n<ul>", "<h3>$1</h3>" + Символы.ПС + "<ul class=""updnew"">");
	ТекстHTML = ЗаменитьПоРегулярномуВыражению(ТекстHTML, "\<h3\>(Изменения|Изменено|Changed)\<\/h3\>\n<ul>", "<h3>$1</h3>" + Символы.ПС + "<ul class=""updedt"">");
	ТекстHTML = ЗаменитьПоРегулярномуВыражению(ТекстHTML, "\<h3\>(Исправление ошибок|Замечания к обновлению|Fixed)\<\/h3\>\n<ul>", "<h3>$1</h3>" + Символы.ПС + "<ul class=""upderr"">");
	ТекстHTML = ЗаменитьПоРегулярномуВыражению(ТекстHTML, "\<h3\>(Внимание!|Новости|News|Attention!)\<\/h3\>\n<ul>", "<h3>$1</h3>" + Символы.ПС + "<ul class=""updnws"">");

	Текст 		= "";
	КлассCSS	= "";
	Для Индекс = 1 По СтрЧислоСтрок(Результат) Цикл
		Стр = СокрЛП(СтрПолучитьСтроку(Результат, Индекс));
		Если ПустаяСтрока(Стр) Тогда
			Продолжить;
		КонецЕсли;
		Если СтрНайти(Стр, "# Новый функционал") > 0 ИЛИ СтрНайти(Стр, "# Добавлено") > 0 ИЛИ СтрНайти(Стр, "# Added") > 0 Тогда
			КлассCSS = "[+] ";
			Продолжить;
		ИначеЕсли СтрНайти(Стр, "# Изменения") > 0 ИЛИ СтрНайти(Стр, "# Изменено") > 0 ИЛИ СтрНайти(Стр, "# Changed") > 0 Тогда
			КлассCSS = "[*] ";
			Продолжить;
		ИначеЕсли СтрНайти(Стр, "# Исправление ошибок") > 0 ИЛИ СтрНайти(Стр, "# Fixed") > 0 Тогда
			КлассCSS = "[-] ";
			Продолжить;
		ИначеЕсли СтрНайти(Стр, "# Внимание!") > 0 ИЛИ СтрНайти(Стр, "# Новости") > 0 ИЛИ СтрНайти(Стр, "# Attention!") > 0 
			ИЛИ СтрНайти(Стр, "# News") > 0 ИЛИ СтрНайти(Стр, "# Замечания к обновлению") > 0 Тогда
			КлассCSS = "[#] ";
			Продолжить;
		КонецЕсли;
		Если ПустаяСтрока(КлассCSS) Тогда
			Продолжить;
		КонецЕсли;

		Если СтрНачинаетсяС(Стр, "* ") Тогда
			Стр = Сред(Стр, 3);
		КонецЕсли;

		Стр = ЗаменитьПоРегулярномуВыражению(Стр, "(\*\*|__)(.*?)\1", "[b]$2[/b]");	
		Стр = ЗаменитьПоРегулярномуВыражению(Стр, "(\*|_)(\S(.*?\S)?)(\*|_)", "[i]$2[/i]");
		Стр = ЗаменитьПоРегулярномуВыражению(Стр, "\~\~(.*?)\~\~", "[s]$1[/s]");
		Стр = ЗаменитьПоРегулярномуВыражению(Стр, "[`](.*?)[`]", "[code]$1[/code]");
		Стр = ЗаменитьПоРегулярномуВыражению(Стр, "\!\[([^\[]+)\]\(([^\""]+) \""([^\)]+)\""\)", "<img src=""$2"" alt=""$1"" title=""$3"">");
		Стр = ЗаменитьПоРегулярномуВыражению(Стр, "\!\[([^\[]+)\]\(([^\)]+)\)", "[img]$2[/img]");
		Стр = ЗаменитьПоРегулярномуВыражению(Стр, "\[([^\[]+)\]\(([^\)]+)\)", "[url=""$2""]$1[/url]");

		Текст = Текст + КлассCSS + Стр + Символы.ПС;
	
	КонецЦикла;	

	ТД = Новый ТекстовыйДокумент;
	
	Если Найти(НРег(мФайлHTML), ".html") > 0 ИЛИ Найти(НРег(мФайлHTML), ".htm") > 0 Тогда
		ТекстНеОбработанный = ТекстHTML;
	Иначе
		ТекстНеОбработанный = Текст;
	КонецЕсли;

	ТД.УстановитьТекст(ТекстНеОбработанный);		
	ТД.Записать(мФайлHTML);
	
	Лог.Информация("Успешное завершение формирования текста рассылки");
	
КонецПроцедуры

// oscript "%system.teamcity.build.workingDir%\uni_script\uni_script.os" /GetVideoPreviewFromMarkDown /F %system.teamcity.build.workingDir%\CHANGELOG.md /UPath %system.teamcity.build.workingDir%\newsimages /Settings %system.teamcity.build.workingDir%\settings.ini /Section SETTINGS
// oscript "c:\Projects\CreatingContractsWordIn1C\uni_script\uni_script.os" /GetVideoPreviewFromMarkDown /F "c:\Projects\CreatingContractsWordIn1C\CHANGELOG.md" /UPath "c:\Projects\CreatingContractsWordIn1C\img" /Settings "c:\Projects\CreatingContractsWordIn1C\settings.ini" /Section "SETTINGS"
Процедура ПолучитьПревьюВидеоИзФайлаMarkDown()
	
	Лог.Информация("Получение картинок preview из файла markdown");

	Если НЕ ЗначениеЗаполнено(Параметры["/F"]) Тогда
		Лог.Ошибка("Не заполнен параметр ""/F"" - путь к файлу markdown!");
		КодВозврата = 54;
		Возврат;
	КонецЕсли;
	ИсходныйФайл = Параметры["/F"];

	КаталогВыгрузки = Параметры["/UPath"];
	Если НЕ ЗначениеЗаполнено(КаталогВыгрузки) Тогда
		Лог.Ошибка("Не заполнен параметр ""/UPath"" - путь к файлу выгрузки изображений!");
		КодВозврата = 54;
		Возврат;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Параметры["/Settings"]) Тогда
		Лог.Ошибка("Не заполнен параметр ""/Settings"" - файл с настройками экспорта!");
		КодВозврата = 54;
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Параметры["/Section"]) Тогда
		Лог.Ошибка("Не заполнен параметр ""/Section"" - секция в файле с настройками экспорта!");
		КодВозврата = 54;
		Возврат;
	КонецЕсли;	
	
	Settings		 			= Параметры["/Settings"];
	Section			 			= Параметры["/Section"];
	Настройки 					= ПрочитатьСекциюINIФайла(Settings, Section);
	ПревьюФорматФайла			= Настройки.Получить("FORMATJPG");	

	Файл = Новый Файл(КаталогВыгрузки);
	Если НЕ Файл.Существует() Тогда
		СоздатьКаталог(КаталогВыгрузки);
	КонецЕсли;

	мПрефикс = Настройки.Получить("SITE_ID_PROGRAM");
	Если НЕ ЗначениеЗаполнено(мПрефикс) Тогда
		Лог.Ошибка("Не заполнен параметр ""/SITE_ID_PROGRAM"" - ID программы в файле настроек!");
		КодВозврата = 84;
		Возврат;
	Иначе
		мПрефикс = мПрефикс + "_";
	КонецЕсли;	

	мМинимальнаяВерсияПлатформы = Настройки.Получить("MINIMAL_PLATFORM_VERSION");
	Если НЕ ЗначениеЗаполнено(мМинимальнаяВерсияПлатформы) Тогда
		Лог.Ошибка("Не заполнен параметр ""/MINIMAL_PLATFORM_VERSION"" - минимальная версия платформы для работы в файле настроек!");
		КодВозврата = 84;
		Возврат;
	КонецЕсли;

	мВерсия = Настройки.Получить("VERSION");
	Если НЕ ЗначениеЗаполнено(мВерсия) Тогда
		Лог.Ошибка("Не заполнен параметр ""/VERSION"" - версия отчета (обработки) в файле настроек!");
		КодВозврата = 84;
		Возврат;
	КонецЕсли;

	Обновление = Новый ТаблицаЗначений;
	Обновление.Колонки.Добавить("Раздел");
	Обновление.Колонки.Добавить("Текст");
	Обновление.Колонки.Добавить("ТекстHTML");
	Обновление.Колонки.Добавить("ЦветТекста");

	ТД = Новый ТекстовыйДокумент;
	Результат = "";
	Области = Новый ТекстовыйДокумент;
	Области.Прочитать(ИсходныйФайл, КодировкаТекста.UTF8);
	ТекущаяВерсияФайла = "";
	Раздел = "Новый функционал";
	Для а = 1 по Области.КоличествоСтрок() Цикл
		
		Текст 		= СокрЛП(Области.ПолучитьСтроку(а));
		Если ПустаяСтрока(Текст) Тогда
			Продолжить;
		КонецЕсли;

		Если СтрНайти(Текст, "## [" + мВерсия + "]") > 0 Тогда
			ТекущаяВерсияФайла = мВерсия;
			Продолжить;
		Иначе
			Если СтрНайти(Текст, "## [") > 0 И СтрНайти(Текст, "] -") > 0 Тогда
				Если НЕ ПустаяСтрока(ТекущаяВерсияФайла) Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;

			Если ПустаяСтрока(ТекущаяВерсияФайла) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;

		Результат = Результат + Текст + Символы.ПС;

	КонецЦикла;
		
	//ТекстHTML 	= Символы.ПС + Результат + Символы.ПС;
	ТекстHTML 	= Результат;	

	КоличествоИзображений = 0;

	// ![Это опциональный alt-текст](https://i.imgur.com/HzsGS7G.png)
	Массив = НайтиПоРегулярномуВыражению(ТекстHTML, "\!\[([^\[]+)\]\(([^\)]+)\)");
	Для Каждого Стр Из Массив Цикл
		Лог.Информация(Стр);
	КонецЦикла;
	// Это гиперссылка [here](myLib/README.md)
	//ТекстHTML = НайтиПоРегулярномуВыражению(ТекстHTML, "\[([^\[]+)\]\(([^\)]+)\)", "<a href=""$2"" target=""_blank"">$1</a>");

	// Если СтрНайти(НРег(НайденныйURL), "youtu") > 0 Тогда
	// 	ПоследнийСлеш	= СтрНайти(НайденныйURL, "/", НаправлениеПоиска.СКонца);
	// 	ИДВидео 		= Строка(Сред(НайденныйURL, ПоследнийСлеш +1));
	// 	Если Не ПустаяСтрока(ИДВидео) Тогда
	// 		АдресФайла		  = "http://img.youtube.com/vi/" + ИДВидео + "/" + ПревьюФорматФайла;
	// 		ПутьДляСохранения = КаталогВыгрузки + "\" + ИДВидео + ".jpg";						
	// 		НастройкаСохранения	= Новый Соответствие;
	// 		НастройкаСохранения.Вставить("МестоХранения", "Сервер");
	// 		НастройкаСохранения.Вставить("Путь", ПутьДляСохранения);
	// 		НастройкиСоединения = Новый Соответствие;
	// 		НастройкиСоединения.Вставить("Таймаут", 30);
	// 		НастройкиСоединения.Вставить("Порт", 80);
	// 		Результат = ПолучитьФайлИзИнтернет(АдресФайла, НастройкаСохранения, НастройкиСоединения);
	// 		Если Результат.Статус Тогда
	// 			Лог.Информация("Получено изображение: " + ИДВидео + ".jpg");	
	// 		Иначе	
	// 			Лог.Ошибка(Результат.СообщениеОбОшибке);	
	// 		КонецЕсли;							
	// 	КонецЕсли;

	// КонецЕсли;

	Лог.Информация("Изображения preview из файла markdown получены в количестве %1", КоличествоИзображений);

КонецПроцедуры

//oscript "c:\Projects\deldata\uni_script\uni_script.os" /MakeMailingMD /UFile "c:\Projects\deldata\mailing.html" /UBody "c:\Projects\deldata\README.md" /UHeader "c:\Projects\deldata\update\header.html" /UFooter "c:\Projects\deldata\update\footer.html" /Settings "c:\Projects\deldata\settings.ini" /Section "SETTINGS" /SectionURL "URL"
Процедура ПодготовитьТекстРассылкиMDФайла()
	
	Лог.Информация("Начало создания файла для рассылки");
	
	Если НЕ ЗначениеЗаполнено(Параметры["/UFile"]) Тогда
		Лог.Ошибка("Не заполнен параметр ""/UFile"" - путь к HTML документу с описанием изменений!");
		КодВозврата = 54;
		Возврат;
	КонецЕсли;
	ФайлРассылки = Параметры["/UFile"];

	Если НЕ ЗначениеЗаполнено(Параметры["/UHeader"]) Тогда
		Лог.Ошибка("Не заполнен параметр ""/UHeader"" - путь к HTML документу с шапкой письма!");
		КодВозврата = 54;
		Возврат;
	КонецЕсли;
	ФайлШапкиРассылки = Параметры["/UHeader"];		
	Если НЕ ФайлСуществует(ФайлШапкиРассылки) Тогда
		Лог.Ошибка("Не существут файл параметр ""/UHeader""" + "<" + ФайлШапкиРассылки + ">");
		КодВозврата = 54;
		Возврат;
	КонецЕсли;		

	Если НЕ ЗначениеЗаполнено(Параметры["/UBody"]) Тогда
		Лог.Ошибка("Не заполнен параметр ""/UBody"" - путь к HTML документу с шапкой письма!");
		КодВозврата = 54;
		Возврат;
	КонецЕсли;
	ФайлТелаРассылки = Параметры["/UBody"];		
	Если НЕ ФайлСуществует(ФайлТелаРассылки) Тогда
		Лог.Ошибка("Не существут файл параметр ""/UBody""" + "<" + ФайлТелаРассылки + ">");
		КодВозврата = 54;
		Возврат;
	КонецЕсли;	

	Если НЕ ЗначениеЗаполнено(Параметры["/UFooter"]) Тогда
		Лог.Ошибка("Не заполнен параметр ""/UFooter"" - путь к HTML документу с шапкой письма!");
		КодВозврата = 54;
		Возврат;
	КонецЕсли;
	ФайлПодвалаРассылки = Параметры["/UFooter"];		
	Если НЕ ФайлСуществует(ФайлПодвалаРассылки) Тогда
		Лог.Ошибка("Не существут файл параметр ""/UFooter""" + "<" + ФайлПодвалаРассылки + ">");
		КодВозврата = 54;
		Возврат;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Параметры["/Settings"]) Тогда
		Лог.Ошибка("Не заполнен параметр ""/Settings"" - файл с настройками экспорта!");
		КодВозврата = 54;
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Параметры["/Section"]) Тогда
		Лог.Ошибка("Не заполнен параметр ""/Section"" - секция в файле с настройками экспорта!");
		КодВозврата = 54;
		Возврат;
	КонецЕсли;	
	
	Settings		 			= Параметры["/Settings"];
	Section			 			= Параметры["/Section"];
	Настройки 					= ПрочитатьСекциюINIФайла(Settings, Section);
	SectionURL		 			= Параметры["/SectionURL"];
	НастройкиURL				= ПрочитатьСекциюINIФайла(Settings, SectionURL);
	ВерсияИзНастроек			= Настройки.Получить("VERSION");
	СписокВерсийДляОбновления	= Настройки.Получить("VERSION_UPDATES");
	ВерсияСервераЛицензирования = Настройки.Получить("VERSION_LICENSE_SERVER");

	ТД = Новый ТекстовыйДокумент;
	ТД.Прочитать(ФайлШапкиРассылки, КодировкаТекста.UTF8);
	ТекстHTML = ТД.ПолучитьТекст();

	ТД = Новый ТекстовыйДокумент;
	ТД.Прочитать(ФайлТелаРассылки, КодировкаТекста.UTF8);
	ТекстHTML = ТекстHTML + ТД.ПолучитьТекст();	

	ТД = Новый ТекстовыйДокумент;
	ТД.Прочитать(ФайлПодвалаРассылки, КодировкаТекста.UTF8);
	ТекстHTML = ТекстHTML + ТД.ПолучитьТекст();	

	ТекстHTML = СтрЗаменить(ТекстHTML, "%VERSION%", ВерсияИзНастроек);
	ТекстHTML = СтрЗаменить(ТекстHTML, "%VERSIONWITHOUTDOTES%", СтрЗаменить(ВерсияИзНастроек,".", "-"));
	ТекстHTML = СтрЗаменить(ТекстHTML, "%SITE_ID_PROGRAM%", Настройки.Получить("SITE_ID_PROGRAM"));
	ТекстHTML = СтрЗаменить(ТекстHTML, "%PROGRAM%", Настройки.Получить("PROGRAM"));

	// Вывод в файл.
	ТД = Новый ТекстовыйДокумент;	
	ТД.УстановитьТекст(ТекстHTML);		
	ТД.Записать(ФайлРассылки);
	
	Лог.Информация("Файл для рассылки создан.");

КонецПроцедуры

//oscript "c:\Projects\it\uni_script\uni_script.os" /CheckVanessaErrors /UFile "c:\Temp\vanessaonline_testing.log"
Процедура ПроверитьОшибкиТетсированияVanessaAutomation()

	Лог.Информация("Начало проверки ошибок тестирования Vanessa Automation");
	Если НЕ ЗначениеЗаполнено(Параметры["/UFile"]) Тогда
		Лог.Ошибка("Не заполнен параметр ""/UFile"" - путь к log-файлу тестирования");
		КодВозврата = 100;
		Возврат;
	КонецЕсли;

	ИмяФайла = Параметры["/UFile"];
	Если НЕ ФайлСуществует(ИмяФайла) Тогда
		Лог.Ошибка(СтрШаблон("Не найден log-файл тестирования <%1>", ИмяФайла)); 
		КодВозврата = 100;
		Возврат;
	КонецЕсли;

	ПолучитьУпавшиеТесты = Параметры["/ReturnErrors"];
	Если ЗначениеЗаполнено(ПолучитьУпавшиеТесты) Тогда
		ТекстДиректорий = "";
		ПутьКФайлу = Параметры["/UPath"];
		Если Не ЗначениеЗаполнено(ПутьКФайлу) Тогда
			Лог.Ошибка("Произошла ошибка, не заполнен путь /UPath сохранения файла со списком расположения упавших тестов.");
			КодВозврата = 136;
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ТД = Новый ТекстовыйДокумент;
	ТД.Прочитать(ИмяФайла, КодировкаТекста.UTF8);
	МассивОшибок = Новый Массив;
	СтрокаСОшибкой = "";
	Для Индекс = 1 По ТД.КоличествоСтрок() Цикл
		Стр = ТД.ПолучитьСтроку(Индекс);
		Если ПустаяСтрока(Стр) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрНачинаетсяС(Стр, "Failed:") Тогда
			СтрокаСОшибкой = СтрокаСОшибкой + Стр + Символы.ПС;
		Иначе
			Если НЕ ПустаяСтрока(СтрокаСОшибкой) Тогда
				Если СтрНачинаетсяС(Стр, "Фича:") ИЛИ СтрНачинаетсяС(Стр, "Feature:") ИЛИ СтрНачинаетсяС(Стр, "Script:") Тогда
					МассивОшибок.Добавить(СтрокаСОшибкой);
					СтрокаСОшибкой = "";
				Иначе
					СтрокаСОшибкой = СтрокаСОшибкой + Стр + Символы.ПС;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если НЕ ПустаяСтрока(СтрокаСОшибкой) Тогда
		МассивОшибок.Добавить(СтрокаСОшибкой);
	КонецЕсли;

	Если МассивОшибок.Количество() > 0 Тогда
		Лог.Ошибка(СтрШаблон("Найдено ошибок: %1", МассивОшибок.Количество()));
		Для Каждого Стр Из МассивОшибок Цикл
			Лог.Ошибка(Стр);
			Лог.Информация("========================================================================");
			Если ВРег(ПолучитьУпавшиеТесты) = "TRUE" Тогда
				ТекстовыйДокумент = Новый ТекстовыйДокумент();
				ПозицияПутиНачало = СтрНайти(Стр, "ПолныйПутьКФиче:");
				Если ПозицияПутиНачало <> 0 Тогда
					ПозицияПутиНачало 	= ПозицияПутиНачало + СтрДлина("ПолныйПутьКФиче:");
					ПозицияПутиКонец 	= СтрНайти(Стр, "ИмяФайла:", ,ПозицияПутиНачало);
					НайденныйПутьКФиче	= СокрЛП(Сред(Стр, ПозицияПутиНачало, ПозицияПутиКонец - ПозицияПутиНачало));
					
					ПозицияПутиНачало = СтрНайти(НайденныйПутьКФиче, "features");
					Если ПозицияПутиНачало <> 0 Тогда
						ДлинаНачала = СтрДлина("features");
						ИтоговыйПутьКФиче = Сред(НайденныйПутьКФиче, ПозицияПутиНачало + ДлинаНачала);
					КонецЕсли;
					ТекстДиректорий	= ТекстДиректорий + ИтоговыйПутьКФиче + Символы.ПС;
					ТекстовыйДокумент.УстановитьТекст(ТекстДиректорий);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеЗаполнено(ПутьКФайлу) Тогда
			ТекстовыйДокумент.Записать(ПутьКФайлу, КодировкаТекста.UTF8);
			Лог.Информация("Файл найденных каталогов расположений упавших тестов УСПЕШНО сохранен: " + ПутьКФайлу);
		КонецЕсли;

		ОстановитьСборку = Параметры["/Fall"];
		Если ЗначениеЗаполнено(ОстановитьСборку) И ВРег(ОстановитьСборку) = "TRUE" Тогда
			КодВозврата = 101;
		Иначе
			КодВозврата = 0;
		КонецЕсли;
	КонецЕсли;

	Лог.Информация("Окончание проверки ошибок тестирования Vanessa Automation");
	
КонецПроцедуры

//oscript "c:\Projects\uni_script\uni_script.os" /RunVanessaAutomation /F "c:\gitlab\it\builds\348du5up\0\Diversus23\it\base" /VanessaEpf "C:\Users\admin\Desktop\vanessa-automation-single.epf" /Workspace "c:\Projects\review\it\tests" /VanessaSettings "c:\Projects\review\it\tests\VBParams.json"
Процедура ЗапускVanessaAutomation()

	// %V83PATH% /Execute C:\vanessa-automation\vanessa-automation.epf /TESTMANAGER /C"StartFeaturePlayer;VBParams=C:\VBParams.json"
	Лог.Информация("Старт запуска тестирования Vanessa Automation");

	мПутьКОбработке = Параметры["/VanessaEpf"];
	Если НЕ ЗначениеЗаполнено(мПутьКОбработке) Тогда
		Лог.Ошибка("Не заполнен параметр ""/VanessaEpf"" - путь к обработке EPF");
		КодВозврата = 88;
		Возврат;
	КонецЕсли;
	Лог.Информация("Путь к обработке Vanessa Automation """ + мПутьКОбработке + """");

	мНастройки = Параметры["/VanessaSettings"];
	Если НЕ ЗначениеЗаполнено(мНастройки) Тогда
		Лог.Ошибка("Не заполнен параметр ""/VanessaSettings"" - путь к тестам");
		КодВозврата = 88;
		Возврат;
	КонецЕсли;
	Лог.Информация("Файл настроек для запуска тестов Vanessa Automation """ + мНастройки + """");
	
	мПутьКТестам = Параметры["/Workspace"];
	Если НЕ ЗначениеЗаполнено(мПутьКТестам) Тогда
		Лог.Ошибка("Не заполнен параметр ""/Workspace"" - путь к тестам");
		КодВозврата = 88;
		Возврат;
	КонецЕсли;
	Лог.Информация("Путь к тестам """ + мПутьКТестам + """");

	ЗапуститьАссинхронно = Параметры["/Asynch"];

	мПараметрыТестирования = "StartFeaturePlayer;QuietInstallVanessaExt;WorkspaceRoot=" + мПутьКТестам + ";VBParams=" + мНастройки;
	Лог.Информация("Параметры тестирования """ + мПараметрыТестирования + """");	
	
	мПараметры	= Конфигуратор.ПолучитьПараметрыЗапуска();
	мПараметры[0]	= "ENTERPRISE";
	мПараметры.Добавить("/TESTMANAGER");	
	мПараметры.Добавить("/Execute""" + мПутьКОбработке + """");
	мПараметры.Добавить("/C""" + мПараметрыТестирования + """");

	СтрокаЗапуска = """" + Конфигуратор.ПутьКТонкомуКлиенту1С() + """";
	
	Для Каждого Параметр Из мПараметры Цикл
		СтрокаЗапуска = СтрокаЗапуска + " " + Параметр;
	КонецЦикла;
	
	Лог.Информация("Начало тестирования " + СтрокаЗапуска);
	Попытка
		Если ЗначениеЗаполнено(ЗапуститьАссинхронно) И ВРег(ЗапуститьАссинхронно) = "TRUE" Тогда
			Лог.Информация("Запуск Vanessa-automation будет выполнен в АССИНХРОННОМ режиме.");
			ЗапуститьПриложение(СтрокаЗапуска, , Ложь);
		Иначе
			Лог.Информация("Запуск Vanessa-automation будет выполнен в СИНХРОННОМ режиме.");	
			ЗапуститьПриложение(СтрокаЗапуска, , Истина, КодВозврата);
		КонецЕсли;
	Исключение												   
		Лог.Ошибка("Произошла ошибка при тестировании конфигурации");
		КодВозврата = 90;
		Возврат;
	КонецПопытки;

	Лог.Информация("Тестирование Vanessa Automation завершено");
	
КонецПроцедуры

// oscript "c:\Projects\uni_script\uni_script.os" /FileCheckSum /FileName "c:\Projects\uni_script\uni_script.os"
Процедура КонтрольнаяСуммаФайла()

	мФайл = Параметры["/FileName"];
	Если НЕ ЗначениеЗаполнено(мФайл) Тогда
		Лог.Ошибка("Не заполнен параметр ""/FileName"" - путь к файлу");
		КодВозврата = 91;
		Возврат;
	КонецЕсли;

	Если ФайлСуществует(мФайл) Тогда
		Хеширование = Новый ХешированиеДанных(ХешФункция["MD5"]);
		Хеширование.ДобавитьФайл(мФайл); 
		Хеш = Строка(Хеширование.ХешСумма);
		Хеш = НРег(СтрЗаменить(Хеш, " ", ""));

		Сообщить(Хеш);
	Иначе
		Лог.Ошибка("Файл """ + мФайл + """ не существует");
	КонецЕсли;

КонецПроцедуры

// oscript "c:\Projects\uni_script\uni_script.os" /FolderCheckSum /FolderName "c:\Projects\uni_script" /UMask "*.os"
Процедура КонтрольнаяСуммаПапки()

	мКаталог = Параметры["/FolderName"];
	Если НЕ ЗначениеЗаполнено(мКаталог) Тогда
		Лог.Ошибка("Не заполнен параметр ""/FolderName"" - путь к файлу");
		КодВозврата = 92;
		Возврат;
	КонецЕсли;

	мМаска = Параметры["/UMask"];
	Если НЕ ЗначениеЗаполнено(мМаска) Тогда
		мМаска = "*";
	КонецЕсли;	

	Хеширование = Новый ХешированиеДанных(ХешФункция["MD5"]);

	Файлы = НайтиФайлы(мКаталог, мМаска, Истина);
	Для Каждого мФайл Из Файлы Цикл
		Если мФайл.ЭтоФайл() Тогда
			Хеширование.ДобавитьФайл(мФайл.ПолноеИмя);
		Иначе
			Хеширование.Добавить(мФайл.Имя);
		КонецЕсли;
	КонецЦикла;
	Хеш = Строка(Хеширование.ХешСумма);
	Хеш = НРег(СтрЗаменить(Хеш, " ", ""));

	Сообщить(Хеш);

КонецПроцедуры

// oscript "c:\Projects\uni_script\uni_script.os" /ConfigVersionFromEdtSrc /FolderName c:\Projects\itmobile\itmobile /Version 3
Процедура ВерсияКонфигурацииEDT()
	
	мКаталог = Параметры["/FolderName"];
	Если НЕ ЗначениеЗаполнено(мКаталог) Тогда
		Лог.Ошибка("Не заполнен параметр ""/FolderName"" - путь к файлу");
		КодВозврата = 93;
		Возврат;
	КонецЕсли;

	мЧиселВВерсии = Параметры["/Version"];
	Если НЕ ЗначениеЗаполнено(мЧиселВВерсии) Тогда
		мЧиселВВерсии = "4";
	КонецЕсли;

	Если мЧиселВВерсии = "4" Тогда
		мШаблонВерсии = "[0-9]*\.[0-9]*\.[0-9]*\.[0-9]*";
	ИначеЕсли мЧиселВВерсии = "3" Тогда
		мШаблонВерсии = "[0-9]*\.[0-9]*\.[0-9]*";
	ИначеЕсли мЧиселВВерсии = "2" Тогда
		мШаблонВерсии = "[0-9]*\.[0-9]*";
	ИначеЕсли мЧиселВВерсии = "1" Тогда
		мШаблонВерсии = "[0-9]*";
	Иначе
		Лог.Ошибка("Параметр ""/Version"" - может быть числом от 1 до 4, либо не заполнен, тогда по умолчанию он будет установлен значением 4");
		КодВозврата = 93;
		Возврат;
	КонецЕсли;

	мШаблонВерсии = "<version>(" + мШаблонВерсии + ")<\/version>";

	мВерсия = "";
	Файлы = НайтиФайлы(мКаталог, "Configuration.mdo", Истина);
	Для Каждого мФайл Из Файлы Цикл
		
		Если мФайл.ЭтоФайл() Тогда
			ТекстовыйДокумент = Новый ТекстовыйДокумент();
			ТекстовыйДокумент.Прочитать(мФайл.ПолноеИмя);
			Массив = НайтиПоРегулярномуВыражению(ТекстовыйДокумент.ПолучитьТекст(), мШаблонВерсии);
			Если Массив.Количество() > 1 Тогда				
				мВерсия = Массив[1];
				Прервать;
			КонецЕсли;			
		КонецЕсли;
	КонецЦикла;

	Если НЕ ПустаяСтрока(мВерсия) Тогда
		Сообщить(мВерсия);
	Иначе
		Лог.Ошибка("Версия по шаблону " + мШаблонВерсии + " (чисел в версии " + мЧиселВВерсии + ") в файле конфигурации Configuration.mdo не найдена");
		КодВозврата = 93;
	КонецЕсли;	

КонецПроцедуры

// Запускает сервер отладки dbgs.exe на переданном порту.
Процедура ЗапуститьФайлОтладчика()
	
	Settings		 	= Параметры["/Settings"];
	Section			 	= Параметры["/Section"];
	Настройки 			= ПрочитатьСекциюINIФайла(Settings, Section);

	ВерсияПлатформы = Настройки.Получить("PLATFORM_VERSION");
	Если Не ЗначениеЗаполнено(ВерсияПлатформы) Тогда
		Лог.Ошибка("Не удалось получить версию платформы, возможно не указан параметр /Settings или /Section.");
		КодВозврата = 115;
		Возврат;
	КонецЕсли;
	ПутьКПлатформе = Конфигуратор.ПолучитьПутьКВерсииПлатформы(ВерсияПлатформы);	
	ПозицияНужногоКаталога = СтрНайти(ПутьКПлатформе, "bin", НаправлениеПоиска.СКонца);
	ПутьКПлатформе = Лев(ПутьКПлатформе, ПозицияНужногоКаталога + 2);
	
	АдресОтладки = Параметры["/DebugURL"];
	Если Не ЗначениеЗаполнено(АдресОтладки) Тогда
		Лог.Ошибка("Произошла ошибка, не заполнен параметр /DebugURL");
		КодВозврата = 124;
		Возврат;
	КонецЕсли;

	ПортОтладки = Параметры["/Port"];
	Если Не ЗначениеЗаполнено(ПортОтладки) Тогда
		Лог.Ошибка("Произошла ошибка, не заполнен параметр /Port");
		КодВозврата = 117;
		Возврат;
	КонецЕсли;

	СтрокаЗапуска = ПутьКПлатформе + "\dbgs.exe";
	НомерШага = 1;
	Лог.Информация("Шаг №" + НомерШага + " " + "Найденный путь к платформе: " + ПутьКПлатформе);
	
	НомерШага = 2;
	Попытка
		Лог.Информация("Шаг №" + НомерШага + " " + "Выполнение принудительного запуска dbgs.exe для включения отладки.");
		Лог.Информация("Строка запуска: " + СтрокаЗапуска + " " + "--addr=" + АдресОтладки + " " + "--port=" + ПортОтладки);
		ЗапуститьПриложение("""" + СтрокаЗапуска + """" + " " + "--addr=" + АдресОтладки + " " + "--port=" + ПортОтладки, , Ложь);
	Исключение
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Лог.Ошибка(ТекстОшибки);
		КодВозврата = 116;
		Возврат;
	КонецПопытки;

	Лог.Информация("Сервер отладки успешно запущен");

КонецПроцедуры

// Первым делом запускаем сервер отладки на порту, который будет использовать клиент тестирования. Поэтому сначала нужно вызвать "ЗапуститьФайлОтладчика()".
// Это нужно для успешного соединения Coverage41C с клиентом. 
// Пример обращения: /StartCoverage41C /DebugURL http://127.0.0.1:1550 /FilesProject $CI_PROJECT_DIR /FileName $PROJECT_NAME /Settings $CI_PROJECT_DIR\settings.ini /Section SETTINGS
Процедура ВключитьАнализПокрытияКодаТестами()

	// Собираем данные для запуска анализа покрытия.
	СтрокаЗапускаCoverage   = "Coverage41C start -i DefAlias -u <АдресОтладки> -P <ПутьКПроектуЕДТ> -o <ПрефиксФайла>.xml";

	АдресОтладки = Параметры["/DebugURL"];
	Если Не ЗначениеЗаполнено(АдресОтладки) Тогда
		Лог.Ошибка("Произошла ошибка, не заполнен параметр /DebugURL");
		КодВозврата = 118;
		Возврат;
	КонецЕсли;
	СтрокаЗапускаCoverage   = СтрЗаменить(СтрокаЗапускаCoverage, "<АдресОтладки>", АдресОтладки);

	ПутьКПроектуЕДТ = Параметры["/FilesProject"];
	Если Не ЗначениеЗаполнено(ПутьКПроектуЕДТ) Тогда
		Лог.Ошибка("Произошла ошибка, не заполнен параметр /FilesProject");
		КодВозврата = 120;
		Возврат;
	КонецЕсли;
	СтрокаЗапускаCoverage = СтрЗаменить(СтрокаЗапускаCoverage, "<ПутьКПроектуЕДТ>", ПутьКПроектуЕДТ);

	ИмяФайла = Параметры["/FileName"];
	Если Не ЗначениеЗаполнено(ИмяФайла) Тогда
		Лог.Ошибка("Произошла ошибка, не заполнен параметр /FileName");
		КодВозврата = 121;
		Возврат;
	КонецЕсли;
	СтрокаЗапускаCoverage = СтрЗаменить(СтрокаЗапускаCoverage, "<ПрефиксФайла>", ИмяФайла);

	Попытка			
		Лог.Информация("Выполняется запуск Coverage41C" + """" + СтрокаЗапускаCoverage + """");
		ЗапуститьПриложение(СтрокаЗапускаCoverage, , Ложь);
	Исключение
		Ошибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Лог.Ошибка(Ошибка);
		КодВозврата = 122;
		Возврат;
	КонецПопытки;

	Лог.Информация("Coverage41C успешно запущен");

КонецПроцедуры

// Останавливает работу анализа покрытия Coverage41C.
Процедура ОтключитьАнализПокрытияКодаТестами()
	
	СтрокаОстановкиCoverage = "Coverage41C stop -i DefAlias -u <АдресОтладки>";
	АдресОтладки = Параметры["/DebugURL"];
	Если Не ЗначениеЗаполнено(АдресОтладки) Тогда
		Лог.Ошибка("Произошла ошибка, не заполнен параметр /DebugURL");
		КодВозврата = 118;
		Возврат;
	КонецЕсли;
	СтрокаОстановкиCoverage = СтрЗаменить(СтрокаОстановкиCoverage, "<АдресОтладки>", АдресОтладки);

	Попытка
		Лог.Информация("Останавливаем работу анализа покрытия Coverage41C");
		КодВозврата = 0;
		ЗапуститьПриложение(СтрокаОстановкиCoverage, , Истина, КодВозврата);
	Исключение
		Ошибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Лог.Ошибка(Ошибка);
		КодВозврата = 123;
		Возврат;
	КонецПопытки;
	Лог.Информация("Работа Coverage41C завершена");

КонецПроцедуры

Процедура СформироватьФайлНастроекVanessaAutomation()

	СтрокаНастроекVanessa = "{
		|    ""Version"": ""<ВерсияВанессы>"",
		|    ""Lang"": ""ru"",
		|    ""DebugLog"": false,
		|    ""КаталогПоискаВерсииПлатформы"":""C:\\Program Files\\1cv8"",
		|    ""ВыполнитьСценарии"": true,
		|    ""ЗавершитьРаботуСистемы"": true,
		|    ""ЗакрытьTestClientПослеЗапускаСценариев"": true,
		|    ""ВыводитьВЛогВыполнениеШагов"": true,
		|    ""ВыводитьЛогВКонсоль"": true,
		|    ""КаталогФич"": ""$workspaceRoot\\features"",
		|    <СписокДополнительныхБиблиотек>
		|	 <СписокТеговИсключений>
		|	 <СписокТеговОтборов>
		|
		|	 <ВыгружатьОтчетAllure>
		|    ""ДелатьОтчетВФорматеCucumberJson"": false,
		|    ""КаталогOutputCucumberJson"": ""$workspaceRoot\\cucumber"",
		|    ""ВыгружатьСтатусВыполненияСценариевВФайл"": false,
		|    ""ПутьКФайлуДляВыгрузкиСтатусаВыполненияСценариев"": """",
		|    ""ДелатьЛогВыполненияСценариевВТекстовыйФайл"": true,
		|    ""ИмяФайлаЛогВыполненияСценариев"": ""<ПутьКФайлуЛога>"",
		|    ""ДелатьСкриншотПриВозникновенииОшибки"": true,
		|    ""СниматьСкриншотКаждогоОкна1С"": false,
		|    ""ИспользоватьВнешнююКомпонентуДляСкриншотов"": true,
		|    ""ИспользоватьКомпонентуVanessaExt"": true,
		|	 ""ИспользоватьПарсерGherkinИзКомпонентыVanessaExt"": true,
		|	 ""СпособСнятияСкриншотовВнешнейКомпонентой"": 2,    
		|    ""КаталогВыгрузкиСкриншотов"": ""$workspaceRoot\\build\\out\\ScreenShots"",
		|    ""КомандаСделатьСкриншот"": ""\""C:\\Program Files (x86)\\IrfanView\\i_view32.exe\"" /capture=1 /convert="", 
		|	""КлиентТестирования"": {
		|		""ЗапускатьКлиентТестированияСМаксимизированнымОкном"": true,
		|		""ТаймаутЗапуска1С"": 25,
		|		""ДиапазонПортовTestclient"": ""<ДиапазонПортовКлиентаТестирования>"",
		|		""ЗакрыватьКлиентТестированияПринудительно"": true,
		|		""ТаймаутПередПринудительнымЗакрытиемКлиентаТестирования"": 10,
		|		""ЗапускатьТестКлиентВРежимеОтладки"": true,
		|		""КлючиОтладки"": ""<ТипОтладки>"",
		|		""АдресОтладчика"": ""<АдресОтладки>"",
		|		""ДанныеКлиентовТестирования"": []
		|    }
		|}";
			
	// Формируем полученные значения для заполнения содержимого файла.
	ПолученныеПараметры = Параметры["/ParamsVA"];
	Если Не ЗначениеЗаполнено(ПолученныеПараметры) Тогда
		Лог.Ошибка("Произошла ошибка, не заполнен параметр /ParamsVA");
		КодВозврата = 125;
		Возврат;
	КонецЕсли;

	ПутьСохранения = Параметры["/UPath"];
	Если Не ЗначениеЗаполнено(ПутьСохранения) Тогда
		Лог.Ошибка("Произошла ошибка, не заполнен параметр /UPath");
		КодВозврата = 126;
		Возврат;
	КонецЕсли;

	ПрефиксФайла = "";
	Если ЗначениеЗаполнено(Параметры["/Prefix"]) Тогда
		ПрефиксФайла = Параметры["/Prefix"];
	КонецЕсли;

	ГотовыеПараметры = Новый Структура;
	СписокПараметров = СтрРазделить(ПолученныеПараметры, "&", Ложь);
	Если СписокПараметров.Количество() = 0 Тогда
		ШаблонСтроки = "<ВерсияВанессы>&<ТипОтладки>&<АдресОтладки>&<ТегиИсключения>|<ТегиИсключения>&<ТегиОтборов>|<ТегиОтборов>";
		Лог.Ошибка("Произошла ошибка, полученно параметров из шаблонной строки: " + СписокПараметров.Количество() + "Убедитесь, что строка параметров задана правильно" + ШаблонСтроки);
		КодВозврата = 127;
		Возврат;
	КонецЕсли;
	
	Лог.Информация("Начало формирования настроек");
	// Обязательные параметры, которые нужно указывать всегда в правильной последовательности.
	СтрокаТеговИсключений = "
		|""СписокТеговИсключение"": [
		|        <ТегиИсключений>
		|    ],";

	ВерсияВанессы			= СписокПараметров[0];
	ТипОтладки				= СписокПараметров[1];
	АдресОтладки			= СписокПараметров[2];
	СписокТеговИсключений 	= СтрРазделить(СписокПараметров[3], "|", Ложь);	
	
	Если Не ЗначениеЗаполнено(ВерсияВанессы) Тогда
		Лог.Ошибка("Произошла ошибка, не удалось получить параметр VA - ""ВерсияВанессы""");
		КодВозврата = 128;
		Возврат;
	КонецЕсли;
	ГотовыеПараметры.Вставить("ВерсияВанессы", ВерсияВанессы);

	Если Не ЗначениеЗаполнено(ТипОтладки) Тогда
		Лог.Ошибка("Произошла ошибка, не удалось получить параметр VA - ""ТипОтладки""");
		КодВозврата = 129;
		Возврат;
	КонецЕсли;
	ГотовыеПараметры.Вставить("ТипОтладки", ТипОтладки);

	Если Не ЗначениеЗаполнено(АдресОтладки) Тогда
		Лог.Ошибка("Произошла ошибка, не удалось получить параметр VA - ""АдресОтладки""");
		КодВозврата = 130;
		Возврат;
	КонецЕсли;
	ГотовыеПараметры.Вставить("АдресОтладки", АдресОтладки);

	ТегиИсключений = "";
	ПоследнийЭлемент = СписокТеговИсключений.Количество() - 1;
	Для Каждого Тег Из СписокТеговИсключений Цикл
		Если СписокТеговИсключений.Найти(Тег) <> ПоследнийЭлемент Тогда
			ТегиИсключений = ТегиИсключений + Символы.ПС + """" + Тег + """" + ",";
		Иначе
			ТегиИсключений = ТегиИсключений + Символы.ПС + """" + Тег + """";
		КонецЕсли;
	КонецЦикла;
	СтрокаТеговИсключений = СтрЗаменить(СтрокаТеговИсключений, "<ТегиИсключений>", ТегиИсключений);
	ГотовыеПараметры.Вставить("СписокТеговИсключений", СтрокаТеговИсключений);
	/////////////////Конец обязательных параметров

	// Дополнительные параметры, добавленные опционально
	Если СписокПараметров.Количество() > 4 Тогда
		КоличествоОбязательныхПараметров 	= 4;
		КоличествоДопПараметров 			= СписокПараметров.Количество() - КоличествоОбязательныхПараметров;
		// Дополнительный списковый параметр "СписокТеговОтборов"
		Если КоличествоДопПараметров <> 0 Тогда
			СтрокаТеговОтбров = "
				|""СписокТеговОтбор"": [
				|		<ТегиОтборов>
				|	],";
			СписокТеговОтборов = СтрРазделить(СписокПараметров[СписокПараметров.Количество() - КоличествоДопПараметров], "|", Ложь);
			Если ТипЗнч(СписокТеговОтборов) = Тип("Массив") Тогда
				ТегиОтборов = "";
				ПоследнийЭлемент = СписокТеговОтборов.Количество() - 1;
				Для Каждого Тег Из СписокТеговОтборов Цикл
					Лог.Информация("Найденный тег отбора: " + Тег);
					Тег = СтрЗаменить(Тег, "@", "");
					Если СписокТеговОтборов.Найти(Тег) <> ПоследнийЭлемент Тогда
						ТегиОтборов = ТегиОтборов + Символы.ПС + """" + Тег + """" + ",";
					Иначе
						ТегиОтборов = ТегиОтборов + Символы.ПС + """" + Тег + """";
					КонецЕсли;
				КонецЦикла;
				СтрокаТеговОтбров = СтрЗаменить(СтрокаТеговОтбров, "<ТегиОтборов>", ТегиОтборов);
				ГотовыеПараметры.Вставить("СписокТеговОтборов", СтрокаТеговОтбров);
			КонецЕсли;
			КоличествоДопПараметров = КоличествоДопПараметров - 1;
		КонецЕсли;
		/////////////////Конец "СписокТеговОтборов"
		
		// Дополнительный параметр "ПутьКФайлуЛога"
		Если КоличествоДопПараметров <> 0 Тогда
			СтрокаПути 	 		= "$workspaceRoot\\vanessaonline_testing_<ПрефиксИмениЛога>.log";
			ИндексПараметра		= СписокПараметров.Количество() - КоличествоДопПараметров;
			ПараметрПрефикса	= СписокПараметров[ИндексПараметра];
					
			ПутьКФайлуЛога		= СтрЗаменить(СтрокаПути, "<ПрефиксИмениЛога>", ПараметрПрефикса);
			ГотовыеПараметры.Вставить("ПутьКФайлуЛога", ПутьКФайлуЛога);
			КоличествоДопПараметров = КоличествоДопПараметров - 1;
		КонецЕсли;
		/////////////////Конец "ПутьКФайлуЛога"

		// Дополнительный списковый параметр "СписокДополнительныхБиблиотек"
		Если КоличествоДопПараметров <> 0 Тогда
			СписокДополнительныхБиблиотек = "
				|""КаталогиБиблиотек"": [
				|		<СписокДопБиблиотек>
				|	],";
			СписокДопБиблиотек = СтрРазделить(СписокПараметров[СписокПараметров.Количество() - КоличествоДопПараметров], "|", Ложь);
			Если ТипЗнч(СписокДопБиблиотек) = Тип("Массив") Тогда
				ДопБиблиотеки = "";
				ПоследнийЭлемент = СписокДопБиблиотек.Количество() - 1;
				Для Каждого Библиотека Из СписокДопБиблиотек Цикл
					Лог.Информация("Найденная библиотека: " + Библиотека);
					Если СписокДопБиблиотек.Найти(Библиотека) <> ПоследнийЭлемент Тогда
						ДопБиблиотеки = ДопБиблиотеки + Символы.ПС + """" + СтрЗаменить(Библиотека, "\", "\\") + """" + ",";
					Иначе
						ДопБиблиотеки = ДопБиблиотеки + Символы.ПС + """" + СтрЗаменить(Библиотека, "\", "\\") + """";
					КонецЕсли;
				КонецЦикла;
				СписокДополнительныхБиблиотек = СтрЗаменить(СписокДополнительныхБиблиотек, "<СписокДопБиблиотек>", ДопБиблиотеки);
				ГотовыеПараметры.Вставить("СписокДополнительныхБиблиотек", СписокДополнительныхБиблиотек);
			КонецЕсли;
			КоличествоДопПараметров = КоличествоДопПараметров - 1;
		КонецЕсли;
		/////////////////Конец "СписокДополнительныхБиблиотек"

		// Дополнительный списковый параметр "НастройкиОтчетаAllure"
		Если КоличествоДопПараметров <> 0 Тогда
			
			НастройкиОтчетаAllure = "
				|   ""ДобавлятьКИмениСценарияУсловияВыгрузки"": true,
				|	""ИмяТекущейСборки"": ""<ИмяСборки>"",
				| 	""ДелатьОтчетВФорматеАллюр"": true,
				|	""ОтчетAllure"": {
				|		""КаталогВыгрузкиAllure"": """",
				|		""КаталогВыгрузкиAllureБазовый"": ""<ПутьВыгрузкиОтчетаAllure>"",
				|		""УровеньОтчета1"": """",
				|		""УровеньОтчета2"": """",
				|		""УровеньОтчета3"": """",
				|		""ГруппировкаTestSuites"": """",
				|		""ПрикладыватьКОтчетуAllureЖурналРегистрацииВыполненияСценария"": true,
				|		""ПрикладыватьКОтчетуAllureДанныеОСостоянииАктивнойФормы"": true,
				|		""ПрикладыватьКОтчетуAllureДанныеОЗначенияхПеременных"": true,
				|		""ПрикладыватьФайлыMxlКОтчетуAllure"": true,
				|		""ПрикладыватьФайлыMxlСохраненныеВФорматеHTMLКОтчетуAllure"": true,
				|		""ПрикладыватьДополнительныеДанныеПриСравненииЗначенияСЭталономAllure"": true,
				|		""ПодставлятьВОтчетеAllureЗначенияПеременных"": true,
				|		""ПрикладыватьКОтчетуAllureДанныеОСостоянииВсехФорм"": true,
				|		""ПрикладыватьКОтчетуAllureДанныеОСетевыхСоединениях"": true,
				|		""ПрикладыватьКОтчетуAllureДанныеОПроцессахОС"": true,
				|		""ТегиПропускающиеСценарийAllure"": """",
				|		""КаталогОтносительноКоторогоНадоСтроитьИерархию"": """",
				|		""ДанныеАллюрМеток"": []
				|	},";
			ПараметрыВыгрузкиAllure = СтрРазделить(СписокПараметров[СписокПараметров.Количество() - КоличествоДопПараметров], "|", Ложь);
			
			КаталогВыгрузкиAllure = ПараметрыВыгрузкиAllure[0];
			КаталогВыгрузкиAllure = СтрЗаменить(КаталогВыгрузкиAllure, "\", "\\");
			НастройкиОтчетаAllure = СтрЗаменить(НастройкиОтчетаAllure, "<ПутьВыгрузкиОтчетаAllure>", КаталогВыгрузкиAllure);
			
			ИмяСборки = ПараметрыВыгрузкиAllure[1];
			НастройкиОтчетаAllure = СтрЗаменить(НастройкиОтчетаAllure, "<ИмяСборки>", ИмяСборки);
			
			ГотовыеПараметры.Вставить("ВыгружатьОтчетAllure", НастройкиОтчетаAllure);
			КоличествоДопПараметров = КоличествоДопПараметров - 1;
		КонецЕсли;
		/////////////////Конец "НастройкиОтчетаAllure" 

		// Дополнительный списковый параметр "ДиапазонПортовКлиентаТестирования"
		Если КоличествоДопПараметров <> 0 Тогда
			
			Порты = СтрРазделить(СписокПараметров[СписокПараметров.Количество() - КоличествоДопПараметров], "|", Ложь);
			Если Порты.Количество() > 1 Тогда
				ГотовыеПараметры.Вставить("ДиапазонПортовКлиентаТестирования", Порты[0] + "-" + Порты[Порты.Количество() - 1]);			
			Иначе			
				ГотовыеПараметры.Вставить("ДиапазонПортовКлиентаТестирования", Порты[0]);
			КонецЕсли;
			
			КоличествоДопПараметров = КоличествоДопПараметров - 1;

		КонецЕсли;
		/////////////////Конец "ДиапазонПортовКлиентаТестирования"

	КонецЕсли;
	/////////////////Конец дополнительных параметров
	
	// Проверяем, если не заполнены доп.параметры, тогда очищаем итоговую строку настроек от вставленных дополнительных параметров, если доп.параметры не были переданы.
	Если Не ГотовыеПараметры.Свойство("СписокТеговОтборов") Тогда
		ГотовыеПараметры.Вставить("СписокТеговОтборов", "");
	КонецЕсли;
	Если Не ГотовыеПараметры.Свойство("ПутьКФайлуЛога") Тогда
		ГотовыеПараметры.Вставить("ПутьКФайлуЛога", "$workspaceRoot\\vanessaonline_testing.log");
	КонецЕсли;
	Если Не ГотовыеПараметры.Свойство("СписокДополнительныхБиблиотек") Тогда
		ГотовыеПараметры.Вставить("СписокДополнительныхБиблиотек", "");
	КонецЕсли;
	Если Не ГотовыеПараметры.Свойство("ВыгружатьОтчетAllure") Тогда
		ГотовыеПараметры.Вставить("ВыгружатьОтчетAllure", "");
	КонецЕсли;
	Если Не ГотовыеПараметры.Свойство("ДиапазонПортовКлиентаТестирования") Тогда
		ГотовыеПараметры.Вставить("ДиапазонПортовКлиентаТестирования", "");
	КонецЕсли;

	// Собираем итоговые настройки файла.
	Для Каждого Параметр Из ГотовыеПараметры Цикл
		СтрокаНастроекVanessa = СтрЗаменить(СтрокаНастроекVanessa, "<" + Параметр.Ключ + ">", Параметр.Значение);
	КонецЦикла;
	Лог.Информация("Данные настроек сформированы УСПЕШНО");

	// Записываем полученные данные настроек в файл.
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(СтрокаНастроекVanessa);
	ТекстовыйДокумент.Записать(ПутьСохранения + "VBParams" + ПрефиксФайла + ".json");

	Лог.Информация("Файл VBParams" + ПрефиксФайла + ".json УСПЕШНО сохранен по пути: " + ПутьСохранения);

КонецПроцедуры

Процедура ОбъединитьЛогиВОдинФайл()

	ПутьКФайлами = Параметры["/ParamsVA"];
	Если Не ЗначениеЗаполнено(ПутьКФайлами) Тогда
		Лог.Ошибка("Произошла ошибка, не указан параметр /ParamsVA, который указывает путь где лежат файлы логов.");
		КодВозврата = 132;
		Возврат;
	КонецЕсли;

	ПутьСохранения = Параметры["/UPath"];
	Если Не ЗначениеЗаполнено(ПутьСохранения) Тогда
		Лог.Ошибка("Произошла ошибка, не указан параметр /UPath, который указывает путь куда нужно сохранить сформированный файл.");
		КодВозврата = 133;
		Возврат;
	КонецЕсли;

	НайденныеФайлы = НайтиФайлы(ПутьКФайлами, "vanessaonline_testing_*.log", Ложь);
	Если НайденныеФайлы.Количество() = 0 Тогда
		Лог.Ошибка("Не возможно продолжить, так как не найдены файлы для объединения.");
		КодВозврата = 134;
		Возврат;
	КонецЕсли;
	
	ИмяИтоговогоФайла = Параметры["/FileName"];
	Если Не ЗначениеЗаполнено(ИмяИтоговогоФайла) Тогда
		Лог.Ошибка("Произошла ошибка, не заполнен параметр /FileName, который хранит имя итогового файла лога.");
		КодВозврата = 135;
		Возврат;
	КонецЕсли;
    
	Лог.Информация("Начало объединения логов");
	ИтоговыйФайл = Новый ТекстовыйДокумент();
	Текст = "";
	Для Каждого Файл Из НайденныеФайлы Цикл
		ПутьКФайлу = Файл.Путь + "\" + Файл.Имя;
		ФайлЛога   = Новый ТекстовыйДокумент();
		ФайлЛога.Прочитать(ПутьКФайлу, КодировкаТекста.UTF8);

		Текст = Текст + Символы.ПС + ФайлЛога.ПолучитьТекст();
		Итоговыйфайл.УстановитьТекст(Текст);
		УдалитьФайлы(ПутьКФайлу);
	КонецЦикла;
	ИтоговыйФайл.Записать(ПутьСохранения + ИмяИтоговогоФайла + ".log", КодировкаТекста.UTF8);
	Лог.Информация("Объединение УСПЕШНО завершено");
	Лог.Информация("Итоговый лог сохранен в каталоге: " + ПутьСохранения + ИмяИтоговогоФайла + ".log");

КонецПроцедуры

Процедура ОбъединитьCoverage()

	ПутьКФайлам = Параметры["/Catalog"];
	Если Не ЗначениеЗаполнено(ПутьКФайлам) Тогда
		Лог.Ошибка("Произошла ошибка, не указан параметр /Catalog, который указывает путь где лежат файлы отчетов.");
		КодВозврата = 136;
		Возврат;
	КонецЕсли;

	ПутьСохранения = Параметры["/UPath"];
	Если Не ЗначениеЗаполнено(ПутьСохранения) Тогда
		Лог.Ошибка("Произошла ошибка, не указан параметр /UPath, который указывает путь куда нужно сохранить объединенный файл.");
		КодВозврата = 137;
		Возврат;
	КонецЕсли;

	ИмяФайла = Параметры["/FileName"];
	Если Не ЗначениеЗаполнено(ПутьСохранения) Тогда
		Лог.Ошибка("Произошла ошибка, не указан параметр /FileName, который указывает имя объединенного файла.");
		КодВозврата = 138;
		Возврат;
	КонецЕсли;

	МаскаПоиска = Параметры["/UMask"];
	Если Не ЗначениеЗаполнено(ПутьСохранения) Тогда
		Лог.Ошибка("Произошла ошибка, не указан параметр /UMask, который указывает маску поиска отчетов.");
		КодВозврата = 139;
		Возврат;
	КонецЕсли;

	СписокОтчетов = НайтиФайлы(ПутьКФайлам, МаскаПоиска, Ложь);
	Если СписокОтчетов.Количество() = 0 Тогда
		Лог.Ошибка("Произошла ошибка, не найдено ниодного отчета Coverage41C");
		КодВозврата = 140;
		Возврат;
	КонецЕсли;
	
	Лог.Информация("Найдено отчетов: " + СписокОтчетов.Количество());
	ПервыйФайл 			= СписокОтчетов[0].Путь + СписокОтчетов[0].Имя;
	ЗаписьТекста 		= Новый ЗаписьТекста(ПутьСохранения + "\" + ИмяФайла + ".xml", КодировкаТекста.UTF8);
	ЧтениеТекста 		= Новый ЧтениеТекста(ПервыйФайл, КодировкаТекста.UTF8);
	МассивСтрок		 	= Новый Массив();

	ЗаписьТекста.ЗаписатьСтроку("<?xml version=""1.0"" encoding=""UTF-8"" standalone=""no""?>
								|<coverage version=""1"">");
	Для Сч = 1 По СписокОтчетов.Количество() - 1 Цикл
		Лог.Информация("Проверяем файл: " + СписокОтчетов[Сч].Имя);
		ФайлИтерации   = СписокОтчетов[Сч].Путь + СписокОтчетов[Сч].Имя;
		ЧтениеТекстаСч = Новый ЧтениеТекста(ФайлИтерации);
		
		ЧтениеТекста.Открыть(ПервыйФайл);
		СтрокаОсновногоФайла = ЧтениеТекста.ПрочитатьСтроку();
		Пока СтрокаОсновногоФайла <> Неопределено Цикл
			СтрокаФайлаСч = ЧтениеТекстаСч.ПрочитатьСтроку();
			Если СтрНайти(СтрокаОсновногоФайла, "<file path=") <> 0 Тогда
				Если МассивСтрок.Найти(СтрокаОсновногоФайла) = Неопределено Тогда
					МассивСтрок.Добавить(СтрокаОсновногоФайла + Символы.ПС);
				КонецЕсли;
			ИначеЕсли СтрНайти(СтрокаОсновногоФайла, "</file>") <> 0 Тогда
				Если МассивСтрок.Найти(СтрокаОсновногоФайла) = Неопределено Тогда
					МассивСтрок.Добавить(СтрокаОсновногоФайла + Символы.ПС);
				КонецЕсли;
			ИначеЕсли СтрНайти(СтрокаОсновногоФайла, "<lineToCover") <> 0 Тогда
				Если СтрНайти(СтрокаФайлаСч, "true") <> 0 И СтрНайти(СтрокаОсновногоФайла, "false") <> 0 Тогда
					Индекс = МассивСтрок.Найти(СтрокаОсновногоФайла);
					Если Индекс <> Неопределено Тогда
						МассивСтрок[Индекс] = СтрокаФайлаСч + Символы.ПС;
					Иначе
						МассивСтрок.Добавить(СтрокаФайлаСч + Символы.ПС);
					КонецЕсли;
				Иначе
					МассивСтрок.Добавить(СтрокаОсновногоФайла + Символы.ПС);
				КонецЕсли;
			КонецЕсли; 
			СтрокаОсновногоФайла = ЧтениеТекста.ПрочитатьСтроку();
		КонецЦикла;
	КонецЦикла;
	
	ЗаписьТекста.ЗаписатьСтроку(СтрСоединить(МассивСтрок));
	ЗаписьТекста.ЗаписатьСтроку("</coverage>");
	Лог.Информация("Объединение отчетов Coverage41C успешно завершено");
	ЗаписьТекста.Закрыть();

КонецПроцедуры

// oscript "D:\Projects\uni_script\uni_script\uni_script.os" /CreateMaileTemplate /F D:\Bases\GIT\ /UPath G:\mailing.html /N Администратор /Catalog "D:\Projects\IT\uit\media\template" /Maket ОписаниеИзмененийСистемы /Settings D:\Projects\IT\uit\settings.ini /Section SETTINGS /SectionURL URL
Процедура СоздатьШаблонПочтовойРассылкиОбновления()

	Лог.Информация("Подготовка текста для рассылки");
	
	Если НЕ ЗначениеЗаполнено(Параметры["/UPath"]) Тогда
		Лог.Ошибка("Не заполнен параметр ""/UPath"" - путь куда необходимо сохранить созданный шаблон рассылки!");
		КодВозврата = 141;
		Возврат;
	КонецЕсли;
	ФайлHTML = Параметры["/UPath"];	

	Если Не ЗначениеЗаполнено(Параметры["/Catalog"]) Тогда
		Лог.Ошибка("Не заполнен параметр ""/Catalog"" - путь к html шаблонам рассылки!");
		КодВозврата = 142;
		Возврат;
	КонецЕсли;
	КаталогШаблонов = Параметры["/Catalog"];

	Если НЕ ЗначениеЗаполнено(Параметры["/Settings"]) Тогда
		Лог.Ошибка("Не заполнен параметр ""/Settings"" - файл с настройками экспорта!");
		КодВозврата = 143;
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Параметры["/Section"]) Тогда
		Лог.Ошибка("Не заполнен параметр ""/Section"" - секция в файле с настройками экспорта!");
		КодВозврата = 144;
		Возврат;
	КонецЕсли;	
	
	Settings		 			= Параметры["/Settings"];
	Section			 			= Параметры["/Section"];
	SectionURL		 			= Параметры["/SectionURL"];

	Настройки 					= ПрочитатьСекциюINIФайла(Settings, Section);
	НастройкиURL				= ПрочитатьСекциюINIФайла(Settings, SectionURL);

	ВерсияИзНастроек			= Настройки.Получить("VERSION");
	СписокВерсийДляОбновления	= Настройки.Получить("VERSION_UPDATES");
	ВерсияСервераЛицензирования = Настройки.Получить("VERSION_LICENSE_SERVER");
	ИмяПрограммы 			 	= Настройки.Получить("PROGRAM");
	ИдентефикаторПрограммы		= Настройки.Получить("SITE_ID_PROGRAM");
	ОсновнаяКартинкаРассылки	= Настройки.Получить("PREVIEW_PICTURE");
	ОсновнойАнонсНовости		= Настройки.Получить("SHORT_DESCRIPTION");
	
	Если ПустаяСтрока(ОсновнаяКартинкаРассылки) Тогда
		Лог.Ошибка("Не удалось создать шаблон рассылки по причине: ""в файле settings.ini отсутствует ссылка на основное изображение preview (PREVIEW_PICTURE)""");
		КодВозврата = 146;
		Возврат;
	КонецЕсли;

	Если ПустаяСтрока(ОсновнойАнонсНовости) Тогда
		Лог.Ошибка("Не удалось создать шаблон рассылки по причине: ""в файле settings.ini отсутствует основное описание анонса новости (SHORT_DESCRIPTION)""");
		КодВозврата = 147;
		Возврат;
	КонецЕсли;

	// Проверка существования каталога куда сохраняем и если его нет, то создаем.
	Файл = Новый Файл(ФайлHTML);
	Если НЕ ФайлСуществует(Файл.Путь) Тогда
		СоздатьКаталог(Файл.Путь)
	КонецЕсли;	
	
	Если Настройки.Получить("MAKET") = Неопределено Тогда
		ИмяМакета = "ОписаниеИзмененийСистемы";
	Иначе
		ИмяМакета = Настройки.Получить("MAKET");
	КонецЕсли;
	
	ИмяCOMСоединителя = "V83.ComConnector";
	Попытка
		COMОбъект = Новый COMОбъект(ИмяCOMСоединителя);
	Исключение
		Лог.Ошибка("Не удалось подключиться через " + ИмяCOMСоединителя + " по причине: " + ОписаниеОшибки());
		КодВозврата = 145;
		Возврат;
	КонецПопытки;

	Попытка
		Соединение 				= COMОбъект.Connect(Параметры["СтрокаПодключения"]);
		мВерсияКонфигурации 	= Соединение.Метаданные().Версия;
		МассивИтоговыхСтрок		= Новый Массив;
				
		// Инициализируем строковые переменные шаблонов.
		ОсновнойШаблонHTML 					= "";
		СекцияВнимание						= "";
		ЗаголовкиСекцийHTML					= "";
		ОписаниеСекцийHTML					= "";
		СекцияПодвалаHTML					= "";
		СекцияСсылокHTML					= "";
		СсылкаНаНовостьТекущегоОбновления	= "";

		ТекстовыйДокумент 	= Новый ТекстовыйДокумент;
		ШаблоныHTML 		= Новый Структура;
		СписокШаблоновHTML 	= НайтиФайлы(КаталогШаблонов, "*.html");
		Для Каждого Шаблон Из СписокШаблоновHTML Цикл
			ТекстовыйДокумент.Прочитать(Шаблон.Путь + Шаблон.Имя, КодировкаТекста.UTF8);
			ШаблоныHTML.Вставить(НРег(Шаблон.ИмяБезРасширения), ТекстовыйДокумент.ПолучитьТекст());
		КонецЦикла;
		СсылкаНаНовостьТекущегоОбновления = СсылкаНаНовостьТекущегоОбновления + "https://softonit.ru/blog/news/updateit/upd" + ИдентефикаторПрограммы + "-" + СокрЛП(СтрЗаменить(мВерсияКонфигурации, ".", "-"));

		// Формируем HTML секцию главного анонса
		ПараметрыОбработки = Новый Структура;
		ПараметрыОбработки.Вставить("main_image", ОсновнаяКартинкаРассылки);
		ПараметрыОбработки.Вставить("main_description", ОсновнойАнонсНовости);
		ПараметрыОбработки.Вставить("number_release", мВерсияКонфигурации);
		ПараметрыОбработки.Вставить("link_news", СсылкаНаНовостьТекущегоОбновления);

		ОсновнойШаблонHTML = ШаблоныHTML.template;
		УстановитьПараметрыHTML(ОсновнойШаблонHTML, ПараметрыОбработки);

		// Получаем текст из макета описания изменений.
		Макет 	= Соединение.ПолучитьОбщийМакет(ИмяМакета);
		Области	= Макет.ПолучитьОбласть("Версия" + СтрЗаменить(мВерсияКонфигурации, ".", "_"));
		Раздел	= ""; 
		Маркер 	= "";		
		Для Индекс = 1 По Области.ВысотаТаблицы Цикл
		
			Текст 	= Области.Область(Индекс, 2, Индекс, 2).Текст;		
			Если ПустаяСтрока(Текст) Тогда
				Продолжить;
			КонецЕсли;
			
			// Обрабатываем текст от ошибочных тегов.
			Текст = СтрЗаменить(Текст, "&", "&amp;");
			Текст = СтрЗаменить(Текст, "<", "&lt;");
			Текст = СтрЗаменить(Текст, ">", "&gt;");
			Текст = СтрЗаменить(Текст, Символы.ПС, "<br />");

			Текст = СтрЗаменить(Текст, Символы.ПС, " ");
			Пока Найти(Текст, "  ") > 0 Цикл
				Текст = СтрЗаменить(Текст, "  ", " ");
			КонецЦикла;			
			Текст = СокрЛП(Текст);

			Если Текст = "Внимание!"
				ИЛИ Текст = "Новый функционал"
				ИЛИ Текст = "Изменения"
				ИЛИ Текст = "Исправление ошибок" Тогда
				Раздел = Текст;
				Счетчик = 1;
				Продолжить;
			КонецЕсли;
						
			Если НЕ ПустаяСтрока(Раздел) Тогда
				Если Раздел = "Внимание!" Тогда
									
					СекцияВнимание = ШаблоныHTML.attention;
					
					// Это гиперссылка
					Если Области.Область(Индекс, 2, Индекс, 2).Гиперссылка = Истина Тогда
						ИмяСсылки 	 = Области.Область(Индекс, 2, Индекс, 2).Имя;
						НайденныйURL = НастройкиURL.Получить(ИмяСсылки);
						Если НайденныйURL = Неопределено Тогда
							НайденныйURL = ИмяСсылки;
							Лог.Ошибка("В файле настроек сборки в секции <" + SectionURL + "> не указана гиперссылка для области <" + НайденныйURL + ">");
							КодВозврата = 148;
							Возврат;
						КонецЕсли;
						СекцияСсылокHTML = ШаблоныHTML.links;
						ПараметрыОбработки = Новый Структура("link, link_description", НайденныйURL, ИмяСсылки);
						УстановитьПараметрыHTML(СекцияСсылокHTML, ПараметрыОбработки);
						Текст = СекцияСсылокHTML;
					КонецЕсли;

					Если Счетчик = 1 Тогда
						ЗаголовкиСекцийHTML = ШаблоныHTML.title_attention;
						ПараметрыОбработки = Новый Структура("title", Раздел);
						УстановитьПараметрыHTML(ЗаголовкиСекцийHTML, ПараметрыОбработки);
						МассивИтоговыхСтрок.Добавить(ЗаголовкиСекцийHTML);
					КонецЕсли;
					
					ПараметрыОбработки = Новый Структура;
					ПараметрыОбработки.Вставить("description", Текст);
					
					УстановитьПараметрыHTML(СекцияВнимание, ПараметрыОбработки);
					МассивИтоговыхСтрок.Добавить(СекцияВнимание);
					Счетчик = Счетчик + 1;
					Продолжить;
				Иначе
					ЗаголовкиСекцийHTML = ШаблоныHTML.titles;
					ПараметрыОбработки = Новый Структура("text_titile", Раздел);
					УстановитьПараметрыHTML(ЗаголовкиСекцийHTML, ПараметрыОбработки);
					МассивИтоговыхСтрок.Добавить(ЗаголовкиСекцийHTML);
				КонецЕсли;
				Раздел = "";
			КонецЕсли;

			ОписаниеСекцийHTML = ШаблоныHTML.descriptions;
			ПараметрыОбработки = Новый Структура("text_description", Текст);
			УстановитьПараметрыHTML(ОписаниеСекцийHTML, ПараметрыОбработки);
			МассивИтоговыхСтрок.Добавить(ОписаниеСекцийHTML);

		КонецЦикла;

		// Формируем ссылки на прошлые обновления.
		МассивВерсийДляОбновления = РазложитьСтрокуВМассивПодстрок(СписокВерсийДляОбновления);
		Если МассивВерсийДляОбновления.Количество() > 0 Тогда
			СтрокаВерсийОбновления = "";
			Для Каждого СтрокаВерсия Из МассивВерсийДляОбновления Цикл				
				СтрокаВерсийОбновления = СтрокаВерсийОбновления + "<a href=""https://softonit.ru/blog/news/updateit/upd" + ИдентефикаторПрограммы + "-" + СокрЛП(СтрЗаменить(СтрокаВерсия, ".", "-"))
					+ "/"" target=""_blank"">" + СокрЛП(Строка(СтрокаВерсия)) + "</a>, " + Символы.ПС;
			КонецЦикла;
			СтрокаВерсийОбновления = Сред(СтрокаВерсийОбновления, 1, СтрДлина(СтрокаВерсийОбновления) - 3); // последний пробел и запятая						
		КонецЕсли;
		ТекстСпискаВерсий = "Обновление устанавливается на версии: " + СтрокаВерсийОбновления;
		ТекстВерсииСервераЛицензирования = "Версия сервера лицензирования: " + ВерсияСервераЛицензирования;
		
		СекцияПодвалаHTML = ШаблоныHTML.footer;
		ПараметрыОбработки = Новый Структура("prog_version, lic_version", ТекстСпискаВерсий, ТекстВерсииСервераЛицензирования);
		УстановитьПараметрыHTML(СекцияПодвалаHTML, ПараметрыОбработки);

		ПараметрыОбработки = Новый Структура("description, footer", СтрСоединить(МассивИтоговыхСтрок), СекцияПодвалаHTML);
		УстановитьПараметрыHTML(ОсновнойШаблонHTML, ПараметрыОбработки);

		ТД = Новый ТекстовыйДокумент();
		ТД.УстановитьТекст(ОсновнойШаблонHTML);
		ТД.Записать(Файл.Путь + Файл.Имя, КодировкаТекста.UTF8);
		Лог.Информация("Файл рассылки УСПЕШНО сохранен: " + Файл.Путь + Файл.Имя);
	Исключение
		Лог.Ошибка("Не удалось получить текст последнего текущего обновления конфигурации через " 
			+ ИмяCOMСоединителя + " по причине: " + ОписаниеОшибки());
		КодВозврата = 149;
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

// Выполняет замену параметров "ключей", которые вставлены в html, на необходимые значения.
//	Параметры:
//		ТекстHTML - Строка - Исходная строка html, куда необходимо вставить значения ключей.
//		Параметры - Структура - Параметры и значения, которые необходимо вставить в исходный html.
//	Пример: "<div>{{Текст}}</div>" будет изменен на "<div>Привет мир !</div>".
Процедура УстановитьПараметрыHTML(ТекстHTML, Параметры = Неопределено)

	Если Параметры <> Неопределено Тогда
		Для Каждого Параметр Из Параметры Цикл
			ТекстHTML = СтрЗаменить(ТекстHTML, "{{" + Параметр.Ключ + "}}", Параметр.Значение);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

// oscript "D:\Projects\uni_script\uni_script\uni_script.os" /SendMailOnApiSendSay /UPath G:\mailing.html /KeyAPI 18GL7PRbjE731P1FUIZ5n_.... /ID 75 /Name "Тест API ШАБЛОН2" /IDSegment "pl16995"
Процедура ОтправитьШаблонРассылкиВSendSay()
	
	Если Не ЗначениеЗаполнено(Параметры["/UPath"]) Тогда
		Лог.Ошибка("Не возможно выполнить отправку расслыки по причине: не заполнен параметр /UPath (путь где нужно брать готовый шаблон рассылки html)!");
		КодВозврата = 150;
		Возврат;
	КонецЕсли;
	ПутьКФайлуШаблона = Параметры["/UPath"];

	Если Не ЗначениеЗаполнено(Параметры["/KeyAPI"]) Тогда
		Лог.Ошибка("Не возможно выполнить отправку расслыки по причине: не заполнен параметр /KeyAPI (секретный ключ пользователя для авторизации в API sendsay)");
		КодВозврата = 151;
		Возврат;
	КонецЕсли;
	КлючAPI = Параметры["/KeyAPI"];

	Если Не ЗначениеЗаполнено(Параметры["/ID"]) Тогда
		Лог.Ошибка("Не возможно выполнить отправку расслыки по причине: не заполнен параметр /ID (id шаблона, который необходимо изменить или создать)");
		КодВозврата = 152;
		Возврат;
	КонецЕсли;
	ИДШаблона = Параметры["/ID"];

	Если Не ЗначениеЗаполнено(Параметры["/Name"]) Тогда
		Лог.Ошибка("Не возможно выполнить отправку расслыки по причине: не заполнен параметр /Name (Имя шаблона, который необходимо изменить или создать)");
		КодВозврата = 153;
		Возврат;
	КонецЕсли;
	ИмяШаблона = Параметры["/Name"];

	Если Не ЗначениеЗаполнено(Параметры["/IDSegment"]) Тогда
		Лог.Ошибка("Не возможно выполнить отправку расслыки по причине: не заполнен параметр /IDSegment (идентификатор сегмента получателей рассылки)");
		КодВозврата = 154;
		Возврат;
	КонецЕсли;
	ИДСегмента = Параметры["/IDSegment"]; 

	Лог.Информация("Получаем html готового шаблона рассылки.");

	ТекстовыйДокумент = Новый ТекстовыйДокумент();
	ТекстовыйДокумент.Прочитать(ПутьКФайлуШаблона, КодировкаТекста.UTF8);
	ТекстHTML = ТекстовыйДокумент.ПолучитьТекст();

	Структура = Новый Соответствие;
	Структура.Вставить("subject", "Обновление");
	Структура.Вставить("from.name", "Softonit.ru");
	Структура.Вставить("from.email", "support@softonit.ru");
	Структура.Вставить("message", Новый Структура("html", ТекстHTML));

	СтруктураШаблонаJSON  = Новый Структура;
	СтруктураШаблонаJSON.Вставить("name", ИмяШаблона);
	СтруктураШаблонаJSON.Вставить("letter", Структура);
	СтруктураШаблонаJSON.Вставить("group", ИДСегмента);

	ПараметрыОтправкиJSON = Новый Структура;
	ПараметрыОтправкиJSON.Вставить("apikey", КлючAPI);
	ПараметрыОтправкиJSON.Вставить("action", "issue.draft.set"); // Данный метод используется API SendSay для создания или изменения шаблона рассылки.
	ПараметрыОтправкиJSON.Вставить("obj", СтруктураШаблонаJSON);
	ПараметрыОтправкиJSON.Вставить("id", ИДШаблона);

	Заголовки = Новый Соответствие;
	Заголовки.Вставить("Content-Type", "application/json");

	Лог.Информация("Формируем JSON");

	ЗаписьJSON 		= Новый ЗаписьJSON();
	ПараметрыJSON 	= Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто);
	ЗаписьJSON.УстановитьСтроку(ПараметрыJSON);
	ЗаписатьJSON(ЗаписьJSON, ПараметрыОтправкиJSON);
	СтрокаJSON = ЗаписьJSON.Закрыть();

	Лог.Информация("Выполняем отправку шаблона рассылки на сервер SendSay");

	HTTPСоединение 			= Новый HTTPСоединение("https://api.sendsay.ru");
	HTTPЗапрос 				= Новый HTTPЗапрос("/general/api/v100/json/x_1671617153961465", Заголовки);
	HTTPЗапрос.УстановитьТелоИзСтроки(СтрокаJSON);

	HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);

	Если HTTPОтвет.КодСостояния = 200 Тогда
		Ответ = HTTPОтвет.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
		Если СтрНайти(Ответ, "error") <> 0 Тогда
			Лог.Ошибка("Отправка шаблона рассылки прервана - сервер вернул ошибку: " + Ответ);
			КодВозврата = 156;
			Возврат;
		КонецЕсли;

		Лог.Информация("Шаблон рассылки УСПЕШНО отправлен на сервер SendSay: " + Ответ);
	Иначе
		Для Каждого Заголовок Из HTTPОтвет.Заголовки Цикл
			Лог.Ошибка("Заголовок: " + Заголовок.Ключ + " " + Заголовок.Значение);
		КонецЦикла;

		Лог.Ошибка("Произошла ошибка отправки шаблона рассылки на сервер методом POST: " + HTTPОтвет.КодСостояния);
		КодВозврата = 157;
		Возврат;
	КонецЕсли;

КонецПроцедуры

ЗадатьНачальныеНастройки();
ИнициализацияСистемныхПеременных();
ВыполнитьКоманду();

ВременныеФайлы.Удалить();
ЗавершитьРаботу(КодВозврата);
